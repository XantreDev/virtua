import{j as w}from"./jsx-runtime-c3d7f245.js";import{r as l}from"./index-c6dae603.js";import{f as Y,u as k,a as A,b as u,c as R,r as i,U as B,e as D,v as F,W as K,d as G,l as Q,k as X,m as Z,i as $}from"./Window-a2af8e74.js";import{L as ee}from"./ListItem-24126322.js";const T=l.forwardRef(({children:c,overscan:g=4,initialItemSize:x,initialItemCount:L,horizontal:q,mode:_,cache:E,element:W=K,itemElement:O="div",onScroll:H,onScrollStop:j,onRangeChange:b,...m},M)=>{const d=l.useMemo(()=>Y(c),[c]),a=d.length,y=k(H),S=k(j),[e,v,s,r,N]=A(()=>{const t=!!q,o=_==="rtl",n=G(a,x,L,_==="reverse",E);return[n,Q(n,t),X(n,t,o),t,o]});e._updateCacheLength(a);const[f,p]=u(e,e._getRange),h=u(e,e._getIsScrolling),P=u(e,e._getJumpCount),C=u(e,e._getCorrectedScrollSize,!0),z=l.useRef(null);R(()=>{const t=z[i],o=v._observeRoot(t),n=s._initRoot(t),U=e._subscribe(B,()=>{y[i]&&y[i](e._getScrollOffset())});return()=>{o(),n(),U()}},[]),R(()=>{const t=e._flushJump();t&&s._fixScrollJump(t)},[P]),l.useEffect(()=>{h||S[i]&&S[i]()},[h]),l.useEffect(()=>{b&&b({start:f,end:p,count:a})},[f,p]),l.useImperativeHandle(M,()=>({get cache(){return e._getCache()},get scrollOffset(){return e._getScrollOffset()},get scrollSize(){return s._getActualScrollSize()},get viewportSize(){return e._getViewportSize()},scrollToIndex:s._scrollToIndex,scrollTo:s._scrollTo,scrollBy(t){s._scrollTo(e._getScrollOffset()+t)}}),[]);const V=Z(f-g,0),I=$(p+g,a-1),J=l.useMemo(()=>{const t=[];for(let o=V;o<=I;o++){const n=d[o];D(n)&&t.push(w(ee,{_resizer:v,_store:e,_index:o,_element:O,_children:n,_isHorizontal:r,_isRtl:N},n.key||o))}return t},[d,V,I]);return w(W,{ref:z,width:r?C:void 0,height:r?void 0:C,scrolling:h,attrs:l.useMemo(()=>({...m,style:{overflow:r?"auto hidden":"hidden auto",display:r?"inline-block":"block",contain:"strict",width:"100%",height:"100%",padding:0,margin:0,...m.style}}),F(m)),children:J})});try{T.displayName="VList",T.__docgenInfo={description:"Virtualized list component. See {@link VListProps} and {@link VListHandle}.",displayName:"VList",props:{children:{defaultValue:null,description:"Elements rendered by this component.",name:"children",required:!0,type:{name:"ReactNode"}},overscan:{defaultValue:{value:"4"},description:`Number of items to render above/below the visible bounds of the list. You can increase to avoid showing blank items in fast scrolling.
@defaultValue 4`,name:"overscan",required:!1,type:{name:"number"}},initialItemSize:{defaultValue:null,description:`Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.

- If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.
- If set, you can opt out estimation and use the value as initial item size.`,name:"initialItemSize",required:!1,type:{name:"number"}},initialItemCount:{defaultValue:null,description:"If set, the specified amount of items will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.",name:"initialItemCount",required:!1,type:{name:"number"}},horizontal:{defaultValue:null,description:"If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.",name:"horizontal",required:!1,type:{name:"boolean"}},mode:{defaultValue:null,description:"Scroll modes that should be set in certain situations.\n\n- `reverse`: This mode will adjust some styles to be suitable for bottom-to-top scrolling.\n- `rtl`: You have to set this mode if you use this component under `direction: rtl` style.",name:"mode",required:!1,type:{name:"enum",value:[{value:'"reverse"'},{value:'"rtl"'}]}},cache:{defaultValue:null,description:"You can restore cache by passing a {@link CacheSnapshot} on mount. This is useful when you want to restore scroll position after navigation. The snapshot can be obtained from {@link VListHandle.cache}.",name:"cache",required:!1,type:{name:"CacheSnapshot"}},element:{defaultValue:null,description:`Customized element type for scrollable element. This element will get {@link CustomWindowComponentProps} as props.
@defaultValue {@link Window }`,name:"element",required:!1,type:{name:"ForwardRefExoticComponent<CustomWindowComponentProps & RefAttributes<any>>"}},itemElement:{defaultValue:{value:"div"},description:`Customized element type for item element. This element will get {@link CustomItemComponentProps } as props.
@defaultValue "div"`,name:"itemElement",required:!1,type:{name:"CustomItemComponentOrElement"}},onScroll:{defaultValue:null,description:`Callback invoked whenever scroll offset changes.
@param offset Current scrollTop or scrollLeft.`,name:"onScroll",required:!1,type:{name:"(offset: number) => void"}},onScrollStop:{defaultValue:null,description:"Callback invoked when scrolling stops.",name:"onScrollStop",required:!1,type:{name:"() => void"}},onRangeChange:{defaultValue:null,description:"Callback invoked when visible items range changes.",name:"onRangeChange",required:!1,type:{name:"(payload: { start: number; end: number; count: number; }) => void"}}}}}catch{}export{T as V};
//# sourceMappingURL=VList-201d803e.js.map
