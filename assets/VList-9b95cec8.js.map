{"version":3,"file":"VList-9b95cec8.js","sources":["../../src/react/VList.tsx"],"sourcesContent":["import {\n  useRef,\n  useMemo,\n  ReactElement,\n  forwardRef,\n  useImperativeHandle,\n  ReactNode,\n  useEffect,\n} from \"react\";\nimport {\n  UPDATE_SCROLL_WITH_EVENT,\n  ACTION_ITEMS_LENGTH_CHANGE,\n  createVirtualStore,\n  UPDATE_SIZE_STATE,\n  UPDATE_SCROLL_STATE,\n  SCROLL_IDLE,\n} from \"../core/store\";\nimport { useIsomorphicLayoutEffect } from \"./useIsomorphicLayoutEffect\";\nimport { exists, values } from \"../core/utils\";\nimport { createScroller } from \"../core/scroller\";\nimport {\n  MayHaveKey,\n  clampEndIndex,\n  clampStartIndex,\n  emptyComponents,\n  flattenChildren,\n  refKey,\n} from \"./utils\";\nimport { useStatic } from \"./useStatic\";\nimport { useLatestRef } from \"./useLatestRef\";\nimport { createResizer } from \"../core/resizer\";\nimport {\n  CustomViewportComponent,\n  CustomViewportComponentProps,\n  Viewport as DefaultViewport,\n  ViewportComponentAttributes,\n} from \"./Viewport\";\nimport { CustomItemComponent, ListItem } from \"./ListItem\";\nimport { CacheSnapshot, ScrollToIndexAlign } from \"../core/types\";\nimport { Cache } from \"../core/cache\";\nimport { flushSync } from \"react-dom\";\nimport { useRerender } from \"./useRerender\";\n\ntype CustomItemComponentOrElement =\n  | keyof JSX.IntrinsicElements\n  | CustomItemComponent;\n\n/**\n * Methods of {@link VList}.\n */\nexport interface VListHandle {\n  /**\n   * Get current {@link CacheSnapshot}.\n   */\n  readonly cache: CacheSnapshot;\n  /**\n   * Get current scrollTop or scrollLeft.\n   */\n  readonly scrollOffset: number;\n  /**\n   * Get current scrollHeight or scrollWidth.\n   */\n  readonly scrollSize: number;\n  /**\n   * Get current offsetHeight or offsetWidth.\n   */\n  readonly viewportSize: number;\n  /**\n   * Scroll to the item specified by index.\n   * @param index index of item\n   * @param align alignment of item\n   */\n  scrollToIndex(index: number, align?: ScrollToIndexAlign): void;\n  /**\n   * Scroll to the given offset.\n   * @param offset offset from start\n   */\n  scrollTo(offset: number): void;\n  /**\n   * Scroll by the given offset.\n   * @param offset offset from current position\n   */\n  scrollBy(offset: number): void;\n}\n\n/**\n * Props of {@link VList}.\n */\nexport interface VListProps extends ViewportComponentAttributes {\n  /**\n   * Elements rendered by this component.\n   */\n  children: ReactNode;\n  /**\n   * Number of items to render above/below the visible bounds of the list. You can increase to avoid showing blank items in fast scrolling.\n   * @defaultValue 4\n   */\n  overscan?: number;\n  /**\n   * Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.\n   *\n   * - If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.\n   * - If set, you can opt out estimation and use the value as initial item size.\n   */\n  initialItemSize?: number;\n  /**\n   * If set, the specified amount of items will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.\n   */\n  initialItemCount?: number;\n  /**\n   * While true is set, scroll position will be maintained from the end not usual start when items are shifted/unshifted. It is useful for reverse infinite scrolling.\n   */\n  shift?: boolean;\n  /**\n   * If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.\n   */\n  horizontal?: boolean;\n  /**\n   * If true, some styles will be adjusted to be suitable for bottom-to-top scrolling.\n   */\n  reverse?: boolean;\n  /**\n   * You can restore cache by passing a {@link CacheSnapshot} on mount. This is useful when you want to restore scroll position after navigation. The snapshot can be obtained from {@link VListHandle.cache}.\n   */\n  cache?: CacheSnapshot;\n  /**\n   * Customized components for advanced usage.\n   */\n  components?: {\n    /**\n     * Component for scrollable element. This component will get {@link CustomViewportComponentProps} as props.\n     * @defaultValue {@link DefaultViewport}\n     */\n    Root?: CustomViewportComponent;\n    /**\n     * Component or element type for item element. This component will get {@link CustomItemComponentProps} as props.\n     * @defaultValue \"div\"\n     */\n    Item?: CustomItemComponentOrElement;\n  };\n  /**\n   * Callback invoked whenever scroll offset changes.\n   * @param offset Current scrollTop or scrollLeft.\n   */\n  onScroll?: (offset: number) => void;\n  /**\n   * Callback invoked when scrolling stops.\n   */\n  onScrollStop?: () => void;\n  /**\n   * Callback invoked when visible items range changes.\n   */\n  onRangeChange?: (\n    /**\n     * The start index of viewable items.\n     */\n    startIndex: number,\n    /**\n     * The end index of viewable items.\n     */\n    endIndex: number\n  ) => void;\n}\n\n/**\n * Virtualized list component. See {@link VListProps} and {@link VListHandle}.\n */\nexport const VList = forwardRef<VListHandle, VListProps>(\n  (\n    {\n      children,\n      overscan = 4,\n      initialItemSize,\n      initialItemCount,\n      shift,\n      horizontal: horizontalProp,\n      reverse: reverseProp,\n      cache,\n      components: {\n        Root: Viewport = DefaultViewport,\n        Item: ItemElement = \"div\",\n      } = emptyComponents as {\n        Root?: undefined;\n        Item?: undefined;\n      },\n      onScroll: onScrollProp,\n      onScrollStop: onScrollStopProp,\n      onRangeChange: onRangeChangeProp,\n      ...viewportAttrs\n    },\n    ref\n  ): ReactElement => {\n    // Memoize element array\n    const elements = useMemo(() => flattenChildren(children), [children]);\n    const count = elements.length;\n\n    const onScroll = useLatestRef(onScrollProp);\n    const onScrollStop = useLatestRef(onScrollStopProp);\n\n    const [store, resizer, scroller, isHorizontal] = useStatic(() => {\n      const _isHorizontal = !!horizontalProp;\n      const _store = createVirtualStore(\n        count,\n        initialItemSize,\n        initialItemCount,\n        cache as unknown as Cache | undefined,\n        !!reverseProp,\n        !initialItemSize\n      );\n      return [\n        _store,\n        createResizer(_store, _isHorizontal),\n        createScroller(_store, _isHorizontal),\n        _isHorizontal,\n      ];\n    });\n\n    // The elements length and cached items length are different just after element is added/removed.\n    if (count !== store._getItemsLength()) {\n      store._update(ACTION_ITEMS_LENGTH_CHANGE, [count, shift]);\n    }\n\n    const rerender = useRerender();\n\n    const [startIndex, endIndex] = store._getRange();\n    const scrollDirection = store._getScrollDirection();\n    const jumpCount = store._getJumpCount();\n    const scrollSize = store._getCorrectedScrollSize();\n\n    const rootRef = useRef<HTMLDivElement>(null);\n    const scrolling = scrollDirection !== SCROLL_IDLE;\n\n    useIsomorphicLayoutEffect(() => {\n      const root = rootRef[refKey]!;\n      const cleanupResizer = resizer._observeRoot(root);\n      const cleanupScroller = scroller._initRoot(root);\n      const unsubscribeStore = store._subscribe(\n        UPDATE_SCROLL_STATE + UPDATE_SIZE_STATE,\n        (sync) => {\n          if (sync) {\n            flushSync(rerender);\n          } else {\n            rerender();\n          }\n        }\n      );\n      const unsubscribeOnScroll = store._subscribe(\n        UPDATE_SCROLL_WITH_EVENT,\n        () => {\n          onScroll[refKey] && onScroll[refKey](store._getScrollOffset());\n        }\n      );\n      return () => {\n        cleanupResizer();\n        cleanupScroller();\n        unsubscribeStore();\n        unsubscribeOnScroll();\n      };\n    }, []);\n\n    useIsomorphicLayoutEffect(() => {\n      const jump = store._flushJump();\n      if (!jump) return;\n\n      scroller._fixScrollJump(jump);\n    }, [jumpCount]);\n\n    useEffect(() => {\n      if (!scrolling) {\n        onScrollStop[refKey] && onScrollStop[refKey]();\n      }\n    }, [scrolling]);\n\n    useEffect(() => {\n      if (!onRangeChangeProp) return;\n\n      onRangeChangeProp(startIndex, endIndex);\n    }, [startIndex, endIndex]);\n\n    useImperativeHandle(\n      ref,\n      () => {\n        return {\n          get cache() {\n            return store._getCache();\n          },\n          get scrollOffset() {\n            return store._getScrollOffset();\n          },\n          get scrollSize() {\n            return store._getCorrectedScrollSize();\n          },\n          get viewportSize() {\n            return store._getViewportSize();\n          },\n          scrollToIndex: scroller._scrollToIndex,\n          scrollTo: scroller._scrollTo,\n          scrollBy: scroller._scrollBy,\n        };\n      },\n      []\n    );\n\n    const overscanedStartIndex = clampStartIndex(\n      startIndex,\n      overscan,\n      scrollDirection\n    );\n    const overscanedEndIndex = clampEndIndex(\n      endIndex,\n      overscan,\n      scrollDirection,\n      count\n    );\n\n    const items: ReactElement[] = [];\n    for (let i = overscanedStartIndex; i <= overscanedEndIndex; i++) {\n      const e = elements[i]!;\n      const key = (e as MayHaveKey).key;\n      items.push(\n        <ListItem\n          key={exists(key) ? key : \"_\" + i}\n          _resizer={resizer}\n          _index={i}\n          _offset={store._getItemOffset(i)}\n          _hide={store._isUnmeasuredItem(i)}\n          _element={ItemElement as \"div\"}\n          _children={e}\n          _isHorizontal={isHorizontal}\n        />\n      );\n    }\n\n    return (\n      <Viewport\n        ref={rootRef}\n        width={isHorizontal ? scrollSize : undefined}\n        height={isHorizontal ? undefined : scrollSize}\n        scrolling={scrolling}\n        attrs={useMemo(\n          () => ({\n            ...viewportAttrs,\n            style: {\n              overflow: \"auto\",\n              display: isHorizontal ? \"inline-block\" : \"block\",\n              contain: \"strict\",\n              // transform: \"translate3d(0px, 0px, 0px)\",\n              // willChange: \"scroll-position\",\n              // backfaceVisibility: \"hidden\",\n              // https://github.com/bvaughn/react-window/issues/395\n              // willChange: \"transform\",\n              width: \"100%\",\n              height: \"100%\",\n              ...viewportAttrs.style,\n            },\n          }),\n          values(viewportAttrs)\n        )}\n      >\n        {items}\n      </Viewport>\n    );\n  }\n);\n"],"names":["VList","forwardRef","children","overscan","initialItemSize","initialItemCount","shift","horizontalProp","reverseProp","cache","Viewport","DefaultViewport","ItemElement","emptyComponents","onScrollProp","onScrollStopProp","onRangeChangeProp","viewportAttrs","ref","elements","useMemo","flattenChildren","count","onScroll","useLatestRef","onScrollStop","store","resizer","scroller","isHorizontal","useStatic","_isHorizontal","_store","createVirtualStore","createResizer","createScroller","ACTION_ITEMS_LENGTH_CHANGE","rerender","useRerender","startIndex","endIndex","scrollDirection","jumpCount","scrollSize","rootRef","useRef","scrolling","SCROLL_IDLE","useIsomorphicLayoutEffect","root","refKey","cleanupResizer","cleanupScroller","unsubscribeStore","UPDATE_SCROLL_STATE","UPDATE_SIZE_STATE","sync","flushSync","unsubscribeOnScroll","UPDATE_SCROLL_WITH_EVENT","jump","useEffect","useImperativeHandle","overscanedStartIndex","clampStartIndex","overscanedEndIndex","clampEndIndex","items","i","e","key","jsx","ListItem","exists","values"],"mappings":"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"}