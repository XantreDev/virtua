{"version":3,"file":"VList-ab9e42c8.js","sources":["../../src/react/VList.tsx"],"sourcesContent":["import {\n  useRef,\n  useMemo,\n  ReactElement,\n  forwardRef,\n  useImperativeHandle,\n  ReactNode,\n  useEffect,\n  RefObject,\n  useState,\n} from \"react\";\nimport { VirtualStore, createVirtualStore } from \"../core/store\";\nimport { useIsomorphicLayoutEffect } from \"./useIsomorphicLayoutEffect\";\nimport { useSelector } from \"./useSelector\";\nimport { exists, max, min } from \"../core/utils\";\nimport { createScroller } from \"../core/scroller\";\nimport { flattenChildren, refKey } from \"./utils\";\nimport { useStatic } from \"./useStatic\";\nimport { useRefWithUpdate } from \"./useRefWithUpdate\";\nimport { createResizer } from \"../core/resizer\";\nimport { WindowComponentAttributes } from \"..\";\nimport {\n  CustomWindowComponent,\n  CustomWindowComponentProps,\n  DefaultWindow,\n} from \"./DefaultWindow\";\nimport { CustomItemComponent, ListItem } from \"./ListItem\";\n\nexport type ScrollMode = \"reverse\" | \"rtl\";\n\nconst Window = ({\n  _children: children,\n  _ref: ref,\n  _store: store,\n  _element: Element,\n  _scrolling: scrolling,\n  _attrs: attrs,\n  _isHorizontal: horizontal,\n}: {\n  _children: ReactNode;\n  _ref: RefObject<HTMLDivElement>;\n  _store: VirtualStore;\n  _element: CustomWindowComponent;\n  _scrolling: boolean;\n  _attrs: WindowComponentAttributes;\n  _isHorizontal: boolean;\n}) => {\n  const scrollSize = useSelector(store, store._getCorrectedScrollSize);\n\n  return (\n    <Element\n      ref={ref}\n      width={horizontal ? scrollSize : undefined}\n      height={horizontal ? undefined : scrollSize}\n      scrolling={scrolling}\n      attrs={useMemo(\n        () => ({\n          ...attrs,\n          style: {\n            overflow: horizontal ? \"auto hidden\" : \"hidden auto\",\n            display: horizontal ? \"inline-block\" : \"block\",\n            contain: \"strict\",\n            // transform: \"translate3d(0px, 0px, 0px)\",\n            // willChange: \"scroll-position\",\n            // backfaceVisibility: \"hidden\",\n            // https://github.com/bvaughn/react-window/issues/395\n            // willChange: \"transform\",\n            width: \"100%\",\n            height: \"100%\",\n            padding: 0,\n            margin: 0,\n            ...attrs.style,\n          },\n        }),\n        [attrs]\n      )}\n    >\n      {children}\n    </Element>\n  );\n};\n\ntype CustomItemComponentOrElement =\n  | keyof JSX.IntrinsicElements\n  | CustomItemComponent;\n\n/**\n * Methods of {@link VList}.\n */\nexport interface VListHandle {\n  /**\n   * Get current scrollTop or scrollLeft.\n   */\n  readonly scrollOffset: number;\n  /**\n   * Get current scrollHeight or scrollWidth.\n   */\n  readonly scrollSize: number;\n  /**\n   * Get current offsetHeight or offsetWidth.\n   */\n  readonly viewportSize: number;\n  /**\n   * Scroll to the item specified by index.\n   * @param index index of item\n   */\n  scrollToIndex(index: number): void;\n  /**\n   * Scroll to the given offset.\n   * @param offset offset from start\n   */\n  scrollTo(offset: number): void;\n  /**\n   * Scroll by the given offset.\n   * @param offset offset from current position\n   */\n  scrollBy(offset: number): void;\n}\n\n/**\n * Props of {@link VList}.\n */\nexport interface VListProps extends WindowComponentAttributes {\n  /**\n   * Elements rendered by this component.\n   */\n  children: ReactNode;\n  /**\n   * Number of items to render above/below the visible bounds of the list. You can increase to avoid showing blank items in fast scrolling.\n   * @defaultValue 4\n   */\n  overscan?: number;\n  /**\n   * Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.\n   *\n   * - If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.\n   * - If set, you can opt out estimation and use the value as initial item size.\n   */\n  initialItemSize?: number;\n  /**\n   * If set, the specified amount of items will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.\n   */\n  initialItemCount?: number;\n  /**\n   * If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.\n   */\n  horizontal?: boolean;\n  /**\n   * Scroll modes that should be set in certain situations.\n   *\n   * - `reverse`: This mode will adjust some styles to be suitable for bottom-to-top scrolling.\n   * - `rtl`: You have to set this mode if you use this component under `direction: rtl` style.\n   */\n  mode?: ScrollMode;\n  /**\n   * Customized element type for scrollable element. This element will get {@link CustomWindowComponentProps} as props.\n   * @defaultValue {@link DefaultWindow}\n   */\n  element?: CustomWindowComponent;\n  /**\n   * Customized element type for item element. This element will get {@link CustomItemComponentProps} as props.\n   * @defaultValue \"div\"\n   */\n  itemElement?: CustomItemComponentOrElement;\n  /**\n   * Callback invoked whenever scroll offset changes.\n   * @param offset Current scrollTop or scrollLeft.\n   */\n  onScroll?: (offset: number) => void;\n  /**\n   * Callback invoked when scrolling stops.\n   */\n  onScrollStop?: () => void;\n  /**\n   * Callback invoked when visible items range changes.\n   */\n  onRangeChange?: (payload: {\n    /**\n     * The start index of viewable items.\n     */\n    start: number;\n    /**\n     * The end index of viewable items.\n     */\n    end: number;\n    /**\n     * The total count of items.\n     */\n    count: number;\n  }) => void;\n}\n\n/**\n * Virtualized list component. See {@link VListProps} and {@link VListHandle}.\n */\nexport const VList = forwardRef<VListHandle, VListProps>(\n  (\n    {\n      children,\n      overscan = 4,\n      initialItemSize,\n      initialItemCount,\n      horizontal: horizontalProp,\n      mode,\n      element = DefaultWindow,\n      itemElement = \"div\",\n      onScroll: onScrollProp,\n      onScrollStop: onScrollStopProp,\n      onRangeChange: onRangeChangeProp,\n      ...windowAttrs\n    },\n    ref\n  ): ReactElement => {\n    // Memoize element array\n    const elements = useMemo(() => flattenChildren(children), [children]);\n    const count = elements.length;\n\n    const onScroll = useRefWithUpdate(onScrollProp);\n    const onScrollStop = useRefWithUpdate(onScrollStopProp);\n\n    const [scrolling, setScrolling] = useState(false);\n    const [store, resizer, scroller, isHorizontal, isRtl] = useStatic(() => {\n      const _isHorizontal = !!horizontalProp;\n      const _isRtl = mode === \"rtl\";\n      const _store = createVirtualStore(\n        count,\n        initialItemSize,\n        initialItemCount,\n        mode === \"reverse\",\n        (isScrolling) => {\n          setScrolling(isScrolling);\n          if (!isScrolling) {\n            onScrollStop[refKey] && onScrollStop[refKey]();\n          }\n        },\n        (offset) => {\n          onScroll[refKey] && onScroll[refKey](offset);\n        }\n      );\n\n      return [\n        _store,\n        createResizer(_store, _isHorizontal),\n        createScroller(_store, _isHorizontal, _isRtl),\n        _isHorizontal,\n        _isRtl,\n      ];\n    });\n    // The elements length and cached items length are different just after element is added/removed.\n    store._updateCacheLength(count);\n\n    const [startIndex, endIndex] = useSelector(store, store._getRange);\n    const jumpCount = useSelector(store, store._getJumpCount);\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    useIsomorphicLayoutEffect(() => {\n      const root = rootRef[refKey]!;\n      const unobserve = resizer._observeRoot(root);\n      const cleanup = scroller._initRoot(root);\n      return () => {\n        unobserve();\n        cleanup();\n      };\n    }, []);\n\n    useIsomorphicLayoutEffect(() => {\n      const jump = store._flushJump();\n      if (!jump) return;\n\n      scroller._fixScrollJump(jump);\n    }, [jumpCount]);\n\n    useEffect(() => {\n      if (!onRangeChangeProp) return;\n\n      onRangeChangeProp({\n        start: startIndex,\n        end: endIndex,\n        count,\n      });\n    }, [startIndex, endIndex]);\n\n    useImperativeHandle(\n      ref,\n      () => {\n        return {\n          get scrollOffset() {\n            return store._getScrollOffset();\n          },\n          get scrollSize() {\n            return scroller._getActualScrollSize();\n          },\n          get viewportSize() {\n            return store._getViewportSize();\n          },\n          scrollToIndex: scroller._scrollToIndex,\n          scrollTo: scroller._scrollTo,\n          scrollBy(offset) {\n            scroller._scrollTo(store._getScrollOffset() + offset);\n          },\n        };\n      },\n      []\n    );\n\n    const startIndexWithMargin = max(startIndex - overscan, 0);\n    const endIndexWithMargin = min(endIndex + overscan, count - 1);\n    const items = useMemo(() => {\n      const res: ReactElement[] = [];\n      for (let i = startIndexWithMargin; i <= endIndexWithMargin; i++) {\n        const e = elements[i];\n        // This can be undefined when items are removed\n        if (exists(e)) {\n          res.push(\n            <ListItem\n              key={(e as { key?: ReactElement[\"key\"] })?.key || i}\n              _resizer={resizer}\n              _store={store}\n              _index={i}\n              _element={itemElement as \"div\"}\n              _children={e}\n              _isHorizontal={isHorizontal}\n              _isRtl={isRtl}\n            />\n          );\n        }\n      }\n      return res;\n    }, [elements, startIndexWithMargin, endIndexWithMargin]);\n\n    return (\n      <Window\n        _ref={rootRef}\n        _store={store}\n        _element={element}\n        _scrolling={scrolling}\n        _children={items}\n        _attrs={windowAttrs}\n        _isHorizontal={isHorizontal}\n      />\n    );\n  }\n);\n"],"names":["Window","children","ref","store","Element","scrolling","attrs","horizontal","scrollSize","useSelector","jsx","useMemo","VList","forwardRef","overscan","initialItemSize","initialItemCount","horizontalProp","mode","element","DefaultWindow","itemElement","onScrollProp","onScrollStopProp","onRangeChangeProp","windowAttrs","elements","flattenChildren","count","onScroll","useRefWithUpdate","onScrollStop","setScrolling","useState","resizer","scroller","isHorizontal","isRtl","useStatic","_isHorizontal","_isRtl","_store","createVirtualStore","isScrolling","refKey","offset","createResizer","createScroller","startIndex","endIndex","jumpCount","rootRef","useRef","useIsomorphicLayoutEffect","root","unobserve","cleanup","jump","useEffect","useImperativeHandle","startIndexWithMargin","max","endIndexWithMargin","min","items","res","i","e","exists","ListItem"],"mappings":"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"}