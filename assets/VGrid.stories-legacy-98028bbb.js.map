{"version":3,"file":"VGrid.stories-legacy-98028bbb.js","sources":["../../src/react/VGrid.tsx"],"sourcesContent":["import {\n  memo,\n  useRef,\n  useMemo,\n  CSSProperties,\n  ReactElement,\n  forwardRef,\n  ReactNode,\n  RefObject,\n  useState,\n} from \"react\";\nimport { VirtualStore, createVirtualStore } from \"../core/store\";\nimport { useIsomorphicLayoutEffect } from \"./useIsomorphicLayoutEffect\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore\";\nimport { max, min } from \"../core/utils\";\nimport { createScroller } from \"../core/scroller\";\nimport { refKey } from \"./utils\";\nimport { useStatic } from \"./useStatic\";\nimport { WindowComponentAttributes } from \"..\";\nimport { createGridResizer, GridResizer } from \"../core/resizer\";\n\nconst genKey = (i: number, j: number) => `${i}-${j}`;\n\n/**\n * Props of customized cell component for {@link VGrid}.\n */\nexport interface CustomCellComponentProps {\n  style: CSSProperties;\n  children: ReactNode;\n}\n\nexport type CustomCellComponent = React.ForwardRefExoticComponent<\n  React.PropsWithoutRef<CustomCellComponentProps> & React.RefAttributes<any>\n>;\n\ntype CustomCellComponentOrElement =\n  | keyof JSX.IntrinsicElements\n  | CustomCellComponent;\n\ntype CellProps = {\n  _children: ReactNode;\n  _resizer: GridResizer;\n  _verticalStore: VirtualStore;\n  _horizontalStore: VirtualStore;\n  _rowIndex: number;\n  _colIndex: number;\n  _element: \"div\";\n};\n\nconst Cell = memo(\n  ({\n    _children: children,\n    _resizer: resizer,\n    _verticalStore: verticalStore,\n    _horizontalStore: horizontalStore,\n    _rowIndex: rowIndex,\n    _colIndex: colIndex,\n    _element: Element,\n  }: CellProps): ReactElement => {\n    const ref = useRef<HTMLDivElement>(null);\n\n    const top = useSyncExternalStore(verticalStore._subscribe, () =>\n      verticalStore._getItemOffset(rowIndex)\n    );\n    const left = useSyncExternalStore(horizontalStore._subscribe, () =>\n      horizontalStore._getItemOffset(colIndex)\n    );\n    const vHide = useSyncExternalStore(verticalStore._subscribe, () =>\n      verticalStore._isUnmeasuredItem(rowIndex)\n    );\n    const hHide = useSyncExternalStore(horizontalStore._subscribe, () =>\n      horizontalStore._isUnmeasuredItem(colIndex)\n    );\n    const height = useSyncExternalStore(verticalStore._subscribe, () =>\n      verticalStore._getItemSize(rowIndex)\n    );\n    const width = useSyncExternalStore(horizontalStore._subscribe, () =>\n      horizontalStore._getItemSize(colIndex)\n    );\n\n    // The index may be changed if elements are inserted to or removed from the start of props.children\n    useIsomorphicLayoutEffect(\n      () => resizer._observeItem(ref[refKey]!, rowIndex, colIndex),\n      [colIndex, rowIndex]\n    );\n\n    return (\n      <Element\n        ref={ref}\n        style={useMemo((): CSSProperties => {\n          const style: CSSProperties = {\n            display: \"grid\",\n            margin: 0,\n            padding: 0,\n            position: \"absolute\",\n            top: top,\n            [verticalStore._isRtl() ? \"right\" : \"left\"]: left,\n            visibility: vHide || hHide ? \"hidden\" : \"visible\",\n            minHeight: height,\n            minWidth: width,\n          };\n          return style;\n        }, [top, left, width, height, vHide, hHide])}\n      >\n        {children}\n      </Element>\n    );\n  }\n);\n\n/**\n * Props of customized scrollable component for {@link VGrid}.\n */\nexport interface CustomGridWindowComponentProps {\n  children: ReactNode;\n  scrollWidth: number;\n  scrollHeight: number;\n  scrolling: boolean;\n  attrs: WindowComponentAttributes;\n}\n\nconst DefaultWindow = forwardRef<any, CustomGridWindowComponentProps>(\n  (\n    { children, scrollWidth, scrollHeight, scrolling, attrs },\n    ref\n  ): ReactElement => {\n    return (\n      <div ref={ref} {...attrs}>\n        <div\n          style={useMemo((): CSSProperties => {\n            return {\n              position: \"relative\",\n              visibility: \"hidden\",\n              width: scrollWidth,\n              height: scrollHeight,\n              pointerEvents: scrolling ? \"none\" : \"auto\",\n            };\n          }, [scrollWidth, scrollHeight, scrolling])}\n        >\n          {children}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport type CustomGridWindowComponent = typeof DefaultWindow;\n\nconst Window = ({\n  _children: children,\n  _ref: ref,\n  _vStore: vStore,\n  _hStore: hStore,\n  _element: Element,\n  _scrolling: scrolling,\n  _attrs: attrs,\n}: {\n  _children: ReactNode;\n  _ref: RefObject<HTMLDivElement>;\n  _vStore: VirtualStore;\n  _hStore: VirtualStore;\n  _element: CustomGridWindowComponent;\n  _scrolling: boolean;\n  _attrs: WindowComponentAttributes;\n}) => {\n  const height = useSyncExternalStore(vStore._subscribe, vStore._getScrollSize);\n  const width = useSyncExternalStore(hStore._subscribe, hStore._getScrollSize);\n\n  return (\n    <Element\n      ref={ref}\n      scrollWidth={width}\n      scrollHeight={height}\n      scrolling={scrolling}\n      attrs={useMemo(\n        () => ({\n          ...attrs,\n          style: {\n            overflow: \"auto\",\n            contain: \"strict\",\n            // transform: \"translate3d(0px, 0px, 0px)\",\n            // willChange: \"scroll-position\",\n            // backfaceVisibility: \"hidden\",\n            width: \"100%\",\n            height: \"100%\",\n            padding: 0,\n            margin: 0,\n            ...attrs.style,\n          },\n        }),\n        [attrs]\n      )}\n    >\n      {children}\n    </Element>\n  );\n};\n\n/**\n * Methods of {@link VGrid}.\n */\nexport interface VGridHandle {}\n\n/**\n * Props of {@link VGrid}.\n */\nexport interface VGridProps extends WindowComponentAttributes {\n  /**\n   * A function to create elements rendered by this component.\n   */\n  children: (arg: {\n    /**\n     * row index of cell\n     */\n    rowIndex: number;\n    /**\n     * column index of cell\n     */\n    colIndex: number;\n  }) => ReactNode;\n  /**\n   * Total row length of grid.\n   */\n  row: number;\n  /**\n   * Total column length of grid.\n   */\n  col: number;\n  /**\n   * Cell height hint for unmeasured items. It's recommended to specify this prop if item sizes are fixed and known, or much larger than the defaultValue. It will help to reduce scroll jump when items are measured.\n   * @defaultValue 40\n   */\n  cellHeight?: number;\n  /**\n   * Cell width hint for unmeasured items. It's recommended to specify this prop if item sizes are fixed and known, or much larger than the defaultValue. It will help to reduce scroll jump when items are measured.\n   * @defaultValue 100\n   */\n  cellWidth?: number;\n  /**\n   * Number of items to render above/below the visible bounds of the grid. You can increase to avoid showing blank items in fast scrolling.\n   * @defaultValue 2\n   */\n  overscan?: number;\n  /**\n   * If set, the specified amount of rows will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.\n   */\n  initialRowCount?: number;\n  /**\n   * If set, the specified amount of cols will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.\n   */\n  initialColCount?: number;\n  /**\n   * You have to set true if you use this component under `direction: rtl` style.\n   */\n  rtl?: boolean;\n  /**\n   * Customized element type for scrollable element. This element will get {@link CustomGridWindowComponentProps} as props.\n   * @defaultValue {@link DefaultWindow}\n   */\n  element?: CustomGridWindowComponent;\n  /**\n   * Customized element type for cell element. This element will get {@link CustomCellComponentProps} as props.\n   * @defaultValue \"div\"\n   */\n  cellElement?: CustomCellComponentOrElement;\n}\n\n/**\n * Virtualized grid component. See {@link VGridProps} and {@link VGridHandle}.\n */\nexport const VGrid = forwardRef<VGridHandle, VGridProps>(\n  (\n    {\n      children,\n      row: rowCount,\n      col: colCount,\n      cellHeight = 40,\n      cellWidth = 100,\n      overscan = 2,\n      initialRowCount,\n      initialColCount,\n      rtl: rtlProp,\n      element = DefaultWindow,\n      cellElement: itemElement = \"div\",\n      ...windowAttrs\n    },\n    _ref // TODO implement\n  ): ReactElement => {\n    const [verticalScrolling, setVerticalScrolling] = useState(false);\n    const [horizontalScrolling, setHorizontalScrolling] = useState(false);\n    // https://github.com/facebook/react/issues/25191#issuecomment-1237456448\n    const [vStore, hStore, resizer, vScroller, hScroller] = useStatic(() => {\n      const dummy = () => {};\n      const _vs = createVirtualStore(\n        rowCount,\n        cellHeight,\n        false,\n        !!rtlProp,\n        initialRowCount,\n        setVerticalScrolling,\n        dummy\n      );\n      const _hs = createVirtualStore(\n        colCount,\n        cellWidth,\n        true,\n        !!rtlProp,\n        initialColCount,\n        setHorizontalScrolling,\n        dummy\n      );\n      const resizer = createGridResizer(_vs, _hs);\n      return [\n        _vs,\n        _hs,\n        resizer,\n        createScroller(_vs, () => resizer._isJustResized()),\n        createScroller(_hs, () => resizer._isJustResized(true)),\n      ];\n    });\n    // The elements length and cached items length are different just after element is added/removed.\n    vStore._updateCacheLength(rowCount);\n    hStore._updateCacheLength(colCount);\n\n    const [startRowIndex, endRowIndex] = useSyncExternalStore(\n      vStore._subscribe,\n      vStore._getRange\n    );\n    const [startColIndex, endColIndex] = useSyncExternalStore(\n      hStore._subscribe,\n      hStore._getRange\n    );\n    const verticalJump = useSyncExternalStore(\n      vStore._subscribe,\n      vStore._getJump\n    );\n    const horizontalJump = useSyncExternalStore(\n      hStore._subscribe,\n      hStore._getJump\n    );\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    useIsomorphicLayoutEffect(() => {\n      const root = rootRef[refKey]!;\n      const unobserve = resizer._observeRoot(root);\n      const vCleanup = vScroller._initRoot(root);\n      const hCleanup = hScroller._initRoot(root);\n      return () => {\n        unobserve();\n        vCleanup();\n        hCleanup();\n      };\n    }, []);\n\n    useIsomorphicLayoutEffect(() => {\n      if (verticalJump.length) {\n        vScroller._fixScrollJump(verticalJump, startRowIndex);\n      }\n    }, [verticalJump]);\n    useIsomorphicLayoutEffect(() => {\n      if (horizontalJump.length) {\n        hScroller._fixScrollJump(horizontalJump, startColIndex);\n      }\n    }, [horizontalJump]);\n\n    const render = useMemo(() => {\n      const cache = new Map<string, ReactNode>();\n      return (rowIndex: number, colIndex: number) => {\n        let e: ReactNode | undefined = cache.get(genKey(rowIndex, colIndex));\n        if (!e) {\n          cache.set(\n            genKey(rowIndex, colIndex),\n            (e = children({ rowIndex, colIndex }))\n          );\n        }\n        return e;\n      };\n    }, [children]);\n\n    const startRowIndexWithMargin = max(startRowIndex - overscan, 0);\n    const endRowIndexWithMargin = min(endRowIndex + overscan, rowCount - 1);\n    const startColIndexWithMargin = max(startColIndex - overscan, 0);\n    const endColIndexWithMargin = min(endColIndex + overscan, colCount - 1);\n    const items = useMemo(() => {\n      const res: ReactElement[] = [];\n      for (let i = startRowIndexWithMargin; i <= endRowIndexWithMargin; i++) {\n        for (let j = startColIndexWithMargin; j <= endColIndexWithMargin; j++) {\n          res.push(\n            <Cell\n              key={genKey(i, j)}\n              _resizer={resizer}\n              _verticalStore={vStore}\n              _horizontalStore={hStore}\n              _rowIndex={i}\n              _colIndex={j}\n              _element={itemElement as \"div\"}\n              _children={render(i, j)}\n            />\n          );\n        }\n      }\n\n      return res;\n    }, [\n      render,\n      startRowIndexWithMargin,\n      endRowIndexWithMargin,\n      startColIndexWithMargin,\n      endColIndexWithMargin,\n    ]);\n\n    return (\n      <Window\n        _ref={rootRef}\n        _vStore={vStore}\n        _hStore={hStore}\n        _element={element}\n        _scrolling={verticalScrolling || horizontalScrolling}\n        _children={items}\n        _attrs={windowAttrs}\n      />\n    );\n  }\n);\n"],"names":["genKey","i","j","Cell","memo","_children","children","_resizer","resizer","_verticalStore","verticalStore","_horizontalStore","horizontalStore","_rowIndex","rowIndex","_colIndex","colIndex","_element","Element","ref","useRef","top","useSyncExternalStore","_subscribe","_getItemOffset","left","vHide","_isUnmeasuredItem","hHide","height","_getItemSize","width","useIsomorphicLayoutEffect","_observeItem","refKey","jsx","style","useMemo","display","margin","padding","position","_isRtl","visibility","minHeight","minWidth","DefaultWindow","forwardRef","scrollWidth","scrollHeight","scrolling","attrs","_objectSpread","pointerEvents","Window","_ref","_vStore","vStore","_hStore","hStore","_scrolling","_attrs","_getScrollSize","overflow","contain","VGrid","_ref2","row","rowCount","col","colCount","cellHeight","cellWidth","overscan","initialRowCount","initialColCount","rtl","rtlProp","element","cellElement","itemElement","windowAttrs","_objectWithoutProperties","_excluded","verticalScrolling","setVerticalScrolling","useState","horizontalScrolling","setHorizontalScrolling","vScroller","hScroller","useStatic","dummy","_vs","createVirtualStore","_hs","resizer2","createGridResizer","createScroller","_isJustResized","_updateCacheLength","startRowIndex","endRowIndex","_getRange","startColIndex","endColIndex","verticalJump","_getJump","horizontalJump","rootRef","root","unobserve","_observeRoot","vCleanup","_initRoot","hCleanup","length","_fixScrollJump","render","cache","Map","e","get","set","startRowIndexWithMargin","max","endRowIndexWithMargin","min","startColIndexWithMargin","endColIndexWithMargin","items","res","push"],"mappings":"s3DAqBA,MAAAA,EAAAA,CAAAC,EAAAC,IAAA,GAAAD,KAAAC,IA4BAC,EAAAC,EAAAA,MAAa,EACVC,UAAAC,EACYC,SAAAC,EACDC,eAAAC,EACMC,iBAAAC,EACEC,UAAAC,EACPC,UAAAC,EACAC,SAAAC,MAGX,MAAAC,EAAAC,SAAA,MAEAC,EAAAC,EAAYZ,EAAAa,YAAmC,IAAAb,EAAAc,eAAAV,KAG/CW,EAAAH,EAAaV,EAAAW,YAAqC,IAAAX,EAAAY,eAAAR,KAGlDU,EAAAJ,EAAcZ,EAAAa,YAAmC,IAAAb,EAAAiB,kBAAAb,KAGjDc,EAAAN,EAAcV,EAAAW,YAAqC,IAAAX,EAAAe,kBAAAX,KAGnDa,EAAAP,EAAeZ,EAAAa,YAAmC,IAAAb,EAAAoB,aAAAhB,KAGlDiB,EAAAT,EAAcV,EAAAW,YAAqC,IAAAX,EAAAkB,aAAAd,KAUnD,OALAgB,GAAA,IAAAxB,EAAAyB,aAAAd,EAAAe,GAAApB,EAAAE,IAC6D,CAAAA,EAAAF,IAI7DqB,EACEjB,EAAC,CAAAC,MACCiB,MAAAC,EAAAA,SAAA,KAEE,CAA6BC,QAAA,OAClBC,OAAA,EACDC,QAAA,EACCC,SAAA,WACCpB,MACV,CAAAX,EAAAgC,SAAA,QAAA,QAAAjB,EAC6CkB,WAAAjB,GAAAE,EAAA,SAAA,UACLgB,UAAAf,EAC7BgB,SAAAd,KAGN,CAAAV,EAAAI,EAAAM,EAAAF,EAAAH,EAAAE,IACkCtB,YAE1C,IAiBTwC,EAAAC,EAAAA,YAAsB,EAAAzC,WAAA0C,cAAAC,eAAAC,YAAAC,SAAAhC,IAKlBgB,EAAA,MAAAiB,EAAAA,EAAA,CAAAjC,OAAAgC,GAAA7C,CAAAA,EAAAA,CAAAA,SAAA6B,EAEI,MAAC,CAAAC,MAAAC,EAAAA,SAAA,KAEG,CAAOI,SAAA,WACKE,WAAA,SACEZ,MAAAiB,EACLnB,OAAAoB,EACCI,cAAAH,EAAA,OAAA,UAEV,CAAAF,EAAAC,EAAAC,IACuC5C,kBAWnDgD,EAAAA,EAAgBjD,UAAAC,EACHiD,KAAApC,EACLqC,QAAAC,EACGC,QAAAC,EACA1C,SAAAC,EACC0C,WAAAV,EACEW,OAAAV,MAWZ,MAAAtB,EAAAP,EAAAmC,EAAAlC,WAAAkC,EAAAK,gBACA/B,EAAAT,EAAAqC,EAAApC,WAAAoC,EAAAG,gBAEA,OAAA3B,EACEjB,EAAC,CAAAC,MACC6B,YAAAjB,EACakB,aAAApB,EACCqB,YACdC,MAAAd,EAAAA,SACO,IAAAe,EAAAA,EACED,CAAAA,EAAAA,OACFf,MAAAgB,EAAA,CACIW,SAAA,OACKC,QAAA,SACDjC,MAAA,OAIFF,OAAA,OACCW,QAAA,EACCD,OAAA,GACDY,EAAAf,UAGZ,CAAAe,IAEF7C,YAEC,EA6EA2D,EAAAlB,EAAAA,YAAc,CAAAmB,EAcZX,SAdYjD,SAEjBA,EACE6D,IAAAC,EACKC,IAAAC,EAAAC,WACAA,EAAA,GAAAC,UACQA,EAAA,IAAAC,SACDA,EAAA,EAAAC,gBACDA,EAAAC,gBACXA,EACAC,IAAAC,EAAAC,QACKA,EAAAhC,EACKiC,YAAAC,EAAA,OAEPd,EADwBe,EAAAC,EAAAhB,EAAAiB,GAK7B,MAAAC,EAAAC,GAAAC,EAAAA,UAAA,IACAC,EAAAC,GAAAF,EAAAA,UAAA,IAEA7B,EAAAE,EAAAnD,EAAAiF,EAAAC,GAAAC,GAAA,KACE,MAAAC,EAAAA,OACAC,EAAAC,EAAY1B,EACVG,GACA,IACAM,EACEH,EACFW,EACAO,GAGFG,EAAAD,EAAYxB,EACVE,GACA,IACAK,EACEF,EACFa,EACAI,GAGFI,EAAAC,EAAAJ,EAAAE,GACA,MAAA,CAAOF,EACLE,EACAC,EACAE,EAAAL,GAAA,IAAAG,EAAAG,mBACkDD,EAAAH,GAAA,IAAAC,EAAAG,gBAAA,KACI,IAI1D1C,EAAA2C,mBAAAhC,GACAT,EAAAyC,mBAAA9B,GAEA,MAAA+B,EAAAC,GAAAhF,EAAqCmC,EAAAlC,WAC5BkC,EAAA8C,YAGTC,EAAAC,GAAAnF,EAAqCqC,EAAApC,WAC5BoC,EAAA4C,WAGTG,EAAApF,EAAqBmC,EAAAlC,WACZkC,EAAAkD,UAGTC,EAAAtF,EAAuBqC,EAAApC,WACdoC,EAAAgD,UAGTE,EAAAzF,SAAA,MAEAY,GAAA,KACE,MAAA8E,EAAAD,EAAA3E,GACA6E,EAAAvG,EAAAwG,aAAAF,GACAG,EAAAxB,EAAAyB,UAAAJ,GACAK,EAAAzB,EAAAwB,UAAAJ,GACA,MAAA,KACEC,IACAE,IACAE,GAAA,CAAS,GACX,IAGFnF,GAAA,KACE0E,EAAAU,QACE3B,EAAA4B,eAAAX,EAAAL,EAAoD,GACtD,CAAAK,IAEF1E,GAAA,KACE4E,EAAAQ,QACE1B,EAAA2B,eAAAT,EAAAJ,EAAsD,GACxD,CAAAI,IAGF,MAAAU,EAAAjF,EAAAA,SAAA,KACE,MAAAkF,EAAA,IAAAC,IACA,MAAA,CAAA1G,EAAAE,KACE,IAAAyG,EAAAF,EAAAG,IAAA1H,EAAAc,EAAAE,IAOA,OANAyG,GACEF,EAAAI,IAAM3H,EAAAc,EAAAE,GACqByG,EAAAnH,EAAA,CAAAQ,WAAAE,cAI7ByG,CAAA,CAAO,GACT,CAAAnH,IAGFsH,EAAAC,EAAAxB,EAAA5B,EAAA,GACAqD,EAAAC,EAAAzB,EAAA7B,EAAAL,EAAA,GACA4D,EAAAH,EAAArB,EAAA/B,EAAA,GACAwD,EAAAF,EAAAtB,EAAAhC,EAAAH,EAAA,GACA4D,EAAA7F,EAAAA,SAAA,KACE,MAAA8F,EAAA,GACA,IAAA,IAAAlI,EAAA2H,EAAA3H,GAAA6H,EAAA7H,IACE,IAAA,IAAAC,EAAA8H,EAAA9H,GAAA+H,EAAA/H,IACEiI,EAAAC,KAAIjG,EACFhC,EAAC,CAAAI,SAAAC,EAEWC,eAAAgD,EACM9C,iBAAAgD,EACE9C,UAAAZ,EACPc,UAAAb,EACAe,SAAA+D,EACD3E,UAAAiH,EAAArH,EAAAC,IACYF,EAAAC,EAAAC,KAM9B,OAAAiI,CAAA,GAAO,CACNb,EACDM,EACAE,EACAE,EACAC,IAIF,OAAA9F,EACEmB,EAAC,CAAAC,KAAAsD,EACOrD,QAAAC,EACGC,QAAAC,EACA1C,SAAA6D,EACClB,WAAAwB,GAAAG,EACuBlF,UAAA6H,EACtBrE,OAAAoB,GACH"}