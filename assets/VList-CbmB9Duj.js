import{a as C}from"./jsx-runtime-sgeEVxPu.js";import{r as n}from"./index-yp3VsGQP.js";import{a as W,A as X,b as F,u as E,r as l,U as K,c as Z,k as Q,d as $,e as ee,m as te,l as oe,v as ne,V as se,f as re,g as le,n as ae,j as ie,S as ce}from"./useRerender-5UbPLih8.js";import{u as ue,a as L,L as de}from"./useChildren-7Kvug2i9.js";import{r as me}from"./index-8dy-jdxy.js";const T=n.forwardRef(({children:h,count:x,overscan:_=4,initialItemSize:S,initialItemCount:R,shift:k,horizontal:q,reverse:O,cache:H,components:{Root:A=se,Item:N="div"}=re,onScroll:D,onScrollStop:P,onRangeChange:b,...u},j)=>{const[U,a]=ue(h,x),g=L(D),y=L(P),[e,v,s,r]=W(()=>{const t=!!q,o=le(a,S,R,H,!S);return[o,ae(o,t),ie(o,t),t]});a!==e._getItemsLength()&&e._update(X,[a,k]);const I=F(),[d,m]=e._getRange(),f=e._getScrollDirection(),J=e._getJumpCount(),V=e._getScrollSize(),z=n.useRef(null),p=f!==ce;E(()=>{const t=z[l],o=e._subscribe(K+Z,M=>{M?me.flushSync(I):I()}),i=e._subscribe(Q,()=>{g[l]&&g[l](e._getScrollOffset())}),c=v._observeRoot(t),G=s._observe(t);return()=>{o(),i(),c(),G()}},[]),E(()=>{const t=e._flushJump();t&&s._fixScrollJump(t)},[J]),n.useEffect(()=>{p||y[l]&&y[l]()},[p]),n.useEffect(()=>{b&&b(d,m)},[d,m]),n.useImperativeHandle(j,()=>({get cache(){return e._getCache()},get scrollOffset(){return e._getScrollOffset()},get scrollSize(){return e._getScrollSize()},get viewportSize(){return e._getViewportSize()},scrollToIndex:s._scrollToIndex,scrollTo:s._scrollTo,scrollBy:s._scrollBy}),[]);const Y=$(d,_,f),B=ee(m,_,f,a),w=[];for(let t=Y;t<=B;t++){const o=U(t),i=o.key;let c=e._getItemOffset(t);O&&(c+=te(0,e._getViewportSize()-e._getTotalSize())),w.push(C(de,{_resizer:v,_index:t,_offset:c,_hide:e._isUnmeasuredItem(t),_element:N,_children:o,_isHorizontal:r},oe(i)?i:"_"+t))}return C(A,{ref:z,width:r?V:void 0,height:r?void 0:V,scrolling:p,attrs:n.useMemo(()=>({...u,style:{display:r?"inline-block":"block",[r?"overflowX":"overflowY"]:"auto",overflowAnchor:"none",contain:"strict",width:"100%",height:"100%",...u.style}}),ne(u)),children:w})});try{T.displayName="VList",T.__docgenInfo={description:"Virtualized list component. See {@link VListProps} and {@link VListHandle}.",displayName:"VList",props:{children:{defaultValue:null,description:`Elements rendered by this component.

You can also pass a function and set {@link VListProps.count} to create elements lazily.`,name:"children",required:!0,type:{name:"ReactNode | ((index: number) => ReactElement<any, string | JSXElementConstructor<any>>)"}},count:{defaultValue:null,description:"If you set a function to {@link VListProps.children}, you have to set total number of items to this prop.",name:"count",required:!1,type:{name:"number"}},overscan:{defaultValue:{value:"4"},description:`Number of items to render above/below the visible bounds of the list. Lower value will give better performance but you can increase to avoid showing blank items in fast scrolling.
@defaultValue 4`,name:"overscan",required:!1,type:{name:"number"}},initialItemSize:{defaultValue:null,description:`Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.

- If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.
- If set, you can opt out estimation and use the value as initial item size.`,name:"initialItemSize",required:!1,type:{name:"number"}},initialItemCount:{defaultValue:null,description:"If set, the specified amount of items will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.",name:"initialItemCount",required:!1,type:{name:"number"}},shift:{defaultValue:null,description:"While true is set, scroll position will be maintained from the end not usual start when items are added to/removed from start. It's recommended to set false if you add to/remove from mid/end of the list because it can cause unexpected behavior. This prop is useful for reverse infinite scrolling.",name:"shift",required:!1,type:{name:"boolean"}},horizontal:{defaultValue:null,description:"If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.",name:"horizontal",required:!1,type:{name:"boolean"}},reverse:{defaultValue:null,description:"If true, items are aligned to the end of the list when total size of items are smaller than viewport size. It's useful for chat like app.",name:"reverse",required:!1,type:{name:"boolean"}},cache:{defaultValue:null,description:"You can restore cache by passing a {@link CacheSnapshot} on mount. This is useful when you want to restore scroll position after navigation. The snapshot can be obtained from {@link VListHandle.cache}.",name:"cache",required:!1,type:{name:"CacheSnapshot"}},components:{defaultValue:null,description:"Customized components for advanced usage.",name:"components",required:!1,type:{name:"{ Root?: ForwardRefExoticComponent<CustomViewportComponentProps & RefAttributes<any>>; Item?: CustomItemComponentOrElement; }"}},onScroll:{defaultValue:null,description:`Callback invoked whenever scroll offset changes.
@param offset Current scrollTop or scrollLeft.`,name:"onScroll",required:!1,type:{name:"(offset: number) => void"}},onScrollStop:{defaultValue:null,description:"Callback invoked when scrolling stops.",name:"onScrollStop",required:!1,type:{name:"() => void"}},onRangeChange:{defaultValue:null,description:"Callback invoked when visible items range changes.",name:"onRangeChange",required:!1,type:{name:"(startIndex: number, endIndex: number) => void"}}}}}catch{}export{T as V};
