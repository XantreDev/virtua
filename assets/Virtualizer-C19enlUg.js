import{a as w}from"./jsx-runtime-CWvgoIdH.js";import{r as a}from"./index-D3g0PtM7.js";import{a as G,A as K,b as Y,u as R,r as n,U as W,c as X,j as Z,k as F,m as Q,g as $,d as ee,l as te,S as ne,e as re,n as oe,h as ae}from"./useRerender-HspPmvuw.js";import{u as se,a as k,L as le}from"./useChildren-AMeck3n4.js";import{r as ie}from"./index-4KpVZEbj.js";const L=a.forwardRef(({children:p,count:q,overscan:x=4,itemSize:h,shift:O,horizontal:A,cache:N,startMargin:D,endMargin:H,ssrCount:b,as:u="div",item:P="div",scrollRef:_,onScroll:j,onScrollEnd:M,onRangeChange:g},U)=>{u=u;const[J,s]=se(p,q),y=a.useRef(null),S=a.useRef(!!b),v=k(j),z=k(M),[e,c,o,d]=G(()=>{const t=!!A,r=re(s,h,b,N,!h,D,H);return[r,oe(r,t),ae(r,t),t]});s!==e._getItemsLength()&&e._update(K,[s,O]);const E=Y(e),[m,f]=e._getRange(),I=e._getScrollDirection(),B=e._getJumpCount(),V=e._getTotalSize(),C=[];R(()=>{S[n]=!1;const t=e._subscribe(W+X,i=>{i?ie.flushSync(E):E()}),r=e._subscribe(Z,()=>{v[n]&&v[n](e._getScrollOffset())}),l=e._subscribe(F,()=>{z[n]&&z[n]()}),T=i=>{c._observeRoot(i),o._observe(i)};return _?Q(()=>T(_[n])):T(y[n].parentElement),()=>{t(),r(),l(),c._dispose(),o._dispose()}},[]),R(()=>{o._fixScrollJump()},[B]),a.useEffect(()=>{g&&g(m,f)},[m,f]),a.useImperativeHandle(U,()=>({get cache(){return e._getCacheSnapshot()},get scrollOffset(){return e._getScrollOffset()},get scrollSize(){return $(e)},get viewportSize(){return e._getViewportSize()},scrollToIndex:o._scrollToIndex,scrollTo:o._scrollTo,scrollBy:o._scrollBy}),[]);for(let[t,r]=ee(m,f,x,I,s);t<=r;t++){const l=J(t);C.push(w(le,{_resizer:c._observeItem,_index:t,_offset:e._getItemOffset(t),_hide:e._isUnmeasuredItem(t),_element:P,_children:l,_isHorizontal:d,_isSSR:S[n]},te(l,t)))}return w(u,{ref:y,style:{overflowAnchor:"none",flex:"none",position:"relative",visibility:"hidden",width:d?V:"100%",height:d?"100%":V,pointerEvents:I!==ne?"none":"auto"},children:C})});try{L.displayName="Virtualizer",L.__docgenInfo={description:"Customizable list virtualizer for advanced usage. See {@link VirtualizerProps} and {@link VirtualizerHandle}.",displayName:"Virtualizer",props:{children:{defaultValue:null,description:`Elements rendered by this component.

You can also pass a function and set {@link VirtualizerProps.count} to create elements lazily.`,name:"children",required:!0,type:{name:"ReactNode | ((index: number) => ReactElement<any, string | JSXElementConstructor<any>>)"}},count:{defaultValue:null,description:"If you set a function to {@link VirtualizerProps.children}, you have to set total number of items to this prop.",name:"count",required:!1,type:{name:"number"}},overscan:{defaultValue:{value:"4"},description:`Number of items to render above/below the visible bounds of the list. Lower value will give better performance but you can increase to avoid showing blank items in fast scrolling.
@defaultValue 4`,name:"overscan",required:!1,type:{name:"number"}},itemSize:{defaultValue:null,description:`Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.

- If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.
- If set, you can opt out estimation and use the value as initial item size.`,name:"itemSize",required:!1,type:{name:"number"}},shift:{defaultValue:null,description:"While true is set, scroll position will be maintained from the end not usual start when items are added to/removed from start. It's recommended to set false if you add to/remove from mid/end of the list because it can cause unexpected behavior. This prop is useful for reverse infinite scrolling.",name:"shift",required:!1,type:{name:"boolean"}},horizontal:{defaultValue:null,description:"If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.",name:"horizontal",required:!1,type:{name:"boolean"}},cache:{defaultValue:null,description:"You can restore cache by passing a {@link CacheSnapshot} on mount. This is useful when you want to restore scroll position after navigation. The snapshot can be obtained from {@link VirtualizerHandle.cache}.",name:"cache",required:!1,type:{name:"CacheSnapshot"}},startMargin:{defaultValue:null,description:"If you put an element before virtualizer, you have to define its height with this prop.",name:"startMargin",required:!1,type:{name:"number"}},endMargin:{defaultValue:null,description:"If you put an element after virtualizer, you have to define its height with this prop.",name:"endMargin",required:!1,type:{name:"number"}},ssrCount:{defaultValue:null,description:"A prop for SSR. If set, the specified amount of items will be mounted in the initial rendering regardless of the container size until hydrated.",name:"ssrCount",required:!1,type:{name:"number"}},as:{defaultValue:null,description:`Component or element type for container element.
@defaultValue "div"`,name:"as",required:!1,type:{name:"keyof IntrinsicElements | CustomContainerComponent"}},item:{defaultValue:null,description:`Component or element type for item element. This component will get {@link CustomItemComponentProps } as props.
@defaultValue "div"`,name:"item",required:!1,type:{name:"keyof IntrinsicElements | CustomItemComponent"}},scrollRef:{defaultValue:null,description:"Reference to the scrollable element. The default will get the parent element of virtualizer.",name:"scrollRef",required:!1,type:{name:"RefObject<HTMLElement>"}},onScroll:{defaultValue:null,description:`Callback invoked whenever scroll offset changes.
@param offset Current scrollTop or scrollLeft.`,name:"onScroll",required:!1,type:{name:"((offset: number) => void)"}},onScrollEnd:{defaultValue:null,description:"Callback invoked when scrolling stops.",name:"onScrollEnd",required:!1,type:{name:"(() => void)"}},onRangeChange:{defaultValue:null,description:"Callback invoked when visible items range changes.",name:"onRangeChange",required:!1,type:{name:"((startIndex: number, endIndex: number) => void)"}}}}}catch{}export{L as V};
