{"version":3,"file":"VList-0ba52111.js","sources":["../../src/react/VList.tsx"],"sourcesContent":["import {\n  Children,\n  memo,\n  useRef,\n  useMemo,\n  CSSProperties,\n  ReactElement,\n  forwardRef,\n  useImperativeHandle,\n  ReactNode,\n  useEffect,\n  RefObject,\n  useState,\n  ReactFragment,\n} from \"react\";\nimport { VirtualStore, createVirtualStore } from \"../core/store\";\nimport { useIsomorphicLayoutEffect } from \"./useIsomorphicLayoutEffect\";\nimport { useStore } from \"./useStore\";\nimport { exists, max, min } from \"../core/utils\";\nimport { createScroller } from \"../core/scroller\";\nimport { isInvalidElement, refKey } from \"./utils\";\nimport { useStatic } from \"./useStatic\";\nimport { useRefWithUpdate } from \"./useRefWithUpdate\";\nimport { Resizer, createResizer } from \"../core/resizer\";\nimport { WindowComponentAttributes } from \"..\";\nimport {\n  CustomWindowComponent,\n  CustomWindowComponentProps,\n  DefaultWindow,\n} from \"./DefaultWindow\";\n\nexport type ScrollMode = \"reverse\" | \"rtl\";\n\ntype ItemProps = {\n  _children: ReactNode;\n  _resizer: Resizer;\n  _store: VirtualStore;\n  _index: number;\n  _element: \"div\";\n  _isHorizontal: boolean;\n  _isRtl: boolean;\n};\n\nconst Item = memo(\n  ({\n    _children: children,\n    _resizer: resizer,\n    _store: store,\n    _index: index,\n    _element: Element,\n    _isHorizontal: isHorizontal,\n    _isRtl: isRtl,\n  }: ItemProps): ReactElement => {\n    const ref = useRef<HTMLDivElement>(null);\n\n    const offset = useStore(store, () => store._getItemOffset(index), true);\n    const hide = useStore(store, () => store._isUnmeasuredItem(index), true);\n\n    // The index may be changed if elements are inserted to or removed from the start of props.children\n    useIsomorphicLayoutEffect(\n      () => resizer._observeItem(ref[refKey]!, index),\n      [index]\n    );\n\n    return (\n      <Element\n        ref={ref}\n        style={useMemo((): CSSProperties => {\n          const leftOrRightKey = isRtl ? \"right\" : \"left\";\n          const style: CSSProperties = {\n            margin: 0,\n            padding: 0,\n            position: \"absolute\",\n            [isHorizontal ? \"height\" : \"width\"]: \"100%\",\n            [isHorizontal ? \"top\" : leftOrRightKey]: 0,\n            [isHorizontal ? leftOrRightKey : \"top\"]: offset,\n            visibility: hide ? \"hidden\" : \"visible\",\n            // willChange: \"transform\",\n          };\n          if (isHorizontal) {\n            style.display = \"flex\";\n          }\n          return style;\n        }, [offset, hide])}\n      >\n        {children}\n      </Element>\n    );\n  }\n);\n\nconst Window = ({\n  _children: children,\n  _ref: ref,\n  _store: store,\n  _element: Element,\n  _scrolling: scrolling,\n  _attrs: attrs,\n  _isHorizontal: horizontal,\n}: {\n  _children: ReactNode;\n  _ref: RefObject<HTMLDivElement>;\n  _store: VirtualStore;\n  _element: CustomWindowComponent;\n  _scrolling: boolean;\n  _attrs: WindowComponentAttributes;\n  _isHorizontal: boolean;\n}) => {\n  const scrollSize = useStore(store, store._getCorrectedScrollSize);\n\n  return (\n    <Element\n      ref={ref}\n      width={horizontal ? scrollSize : undefined}\n      height={horizontal ? undefined : scrollSize}\n      scrolling={scrolling}\n      attrs={useMemo(\n        () => ({\n          ...attrs,\n          style: {\n            overflow: horizontal ? \"auto hidden\" : \"hidden auto\",\n            contain: \"strict\",\n            // transform: \"translate3d(0px, 0px, 0px)\",\n            // willChange: \"scroll-position\",\n            // backfaceVisibility: \"hidden\",\n            // https://github.com/bvaughn/react-window/issues/395\n            // willChange: \"transform\",\n            width: \"100%\",\n            height: \"100%\",\n            padding: 0,\n            margin: 0,\n            ...attrs.style,\n          },\n        }),\n        [attrs]\n      )}\n    >\n      {children}\n    </Element>\n  );\n};\n\n/**\n * Props of customized item component for {@link VList}.\n */\nexport interface CustomItemComponentProps {\n  style: CSSProperties;\n  children: ReactNode;\n}\n\nexport type CustomItemComponent = React.ForwardRefExoticComponent<\n  React.PropsWithoutRef<CustomItemComponentProps> & React.RefAttributes<any>\n>;\n\ntype CustomItemComponentOrElement =\n  | keyof JSX.IntrinsicElements\n  | CustomItemComponent;\n\n/**\n * Methods of {@link VList}.\n */\nexport interface VListHandle {\n  /**\n   * Get current scrollTop or scrollLeft.\n   */\n  readonly scrollOffset: number;\n  /**\n   * Get current scrollHeight or scrollWidth.\n   */\n  readonly scrollSize: number;\n  /**\n   * Get current offsetHeight or offsetWidth.\n   */\n  readonly viewportSize: number;\n  /**\n   * Scroll to the item specified by index.\n   * @param index index of item\n   */\n  scrollToIndex(index: number): void;\n  /**\n   * Scroll to the given offset.\n   * @param offset offset from start\n   */\n  scrollTo(offset: number): void;\n  /**\n   * Scroll by the given offset.\n   * @param offset offset from current position\n   */\n  scrollBy(offset: number): void;\n}\n\n/**\n * Props of {@link VList}.\n */\nexport interface VListProps extends WindowComponentAttributes {\n  /**\n   * Elements rendered by this component.\n   */\n  children: ReactNode;\n  /**\n   * Number of items to render above/below the visible bounds of the list. You can increase to avoid showing blank items in fast scrolling.\n   * @defaultValue 4\n   */\n  overscan?: number;\n  /**\n   * Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.\n   *\n   * - If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.\n   * - If set, you can opt out estimation and use the value as initial item size.\n   */\n  initialItemSize?: number;\n  /**\n   * If set, the specified amount of items will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.\n   */\n  initialItemCount?: number;\n  /**\n   * If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.\n   */\n  horizontal?: boolean;\n  /**\n   * Scroll modes that should be set in certain situations.\n   *\n   * - `reverse`: This mode will adjust some styles to be suitable for bottom-to-top scrolling.\n   * - `rtl`: You have to set this mode if you use this component under `direction: rtl` style.\n   */\n  mode?: ScrollMode;\n  /**\n   * Customized element type for scrollable element. This element will get {@link CustomWindowComponentProps} as props.\n   * @defaultValue {@link DefaultWindow}\n   */\n  element?: CustomWindowComponent;\n  /**\n   * Customized element type for item element. This element will get {@link CustomItemComponentProps} as props.\n   * @defaultValue \"div\"\n   */\n  itemElement?: CustomItemComponentOrElement;\n  /**\n   * Callback invoked whenever scroll offset changes.\n   * @param offset Current scrollTop or scrollLeft.\n   */\n  onScroll?: (offset: number) => void;\n  /**\n   * Callback invoked when scrolling stops.\n   */\n  onScrollStop?: () => void;\n  /**\n   * Callback invoked when visible items range changes.\n   */\n  onRangeChange?: (payload: {\n    /**\n     * The start index of viewable items.\n     */\n    start: number;\n    /**\n     * The end index of viewable items.\n     */\n    end: number;\n    /**\n     * The total count of items.\n     */\n    count: number;\n  }) => void;\n}\n\n/**\n * Virtualized list component. See {@link VListProps} and {@link VListHandle}.\n */\nexport const VList = forwardRef<VListHandle, VListProps>(\n  (\n    {\n      children,\n      overscan = 4,\n      initialItemSize,\n      initialItemCount,\n      horizontal: horizontalProp,\n      mode,\n      element = DefaultWindow,\n      itemElement = \"div\",\n      onScroll: onScrollProp,\n      onScrollStop: onScrollStopProp,\n      onRangeChange: onRangeChangeProp,\n      ...windowAttrs\n    },\n    ref\n  ): ReactElement => {\n    // Memoize element array\n    const elements = useMemo(() => {\n      const arr: (ReactElement | ReactFragment | string | number)[] = [];\n      Children.forEach(children, (e) => {\n        if (isInvalidElement(e)) {\n          return;\n        }\n        arr.push(e);\n      });\n      return arr;\n    }, [children]);\n    const count = elements.length;\n\n    const onScroll = useRefWithUpdate(onScrollProp);\n    const onScrollStop = useRefWithUpdate(onScrollStopProp);\n\n    const [scrolling, setScrolling] = useState(false);\n    const [store, resizer, scroller, isHorizontal, isRtl] = useStatic(() => {\n      const _isHorizontal = !!horizontalProp;\n      const _isRtl = mode === \"rtl\";\n      const _store = createVirtualStore(\n        count,\n        initialItemSize,\n        initialItemCount,\n        mode === \"reverse\",\n        (isScrolling) => {\n          setScrolling(isScrolling);\n          if (!isScrolling) {\n            onScrollStop[refKey] && onScrollStop[refKey]();\n          }\n        },\n        (offset) => {\n          onScroll[refKey] && onScroll[refKey](offset);\n        }\n      );\n\n      return [\n        _store,\n        createResizer(_store, _isHorizontal),\n        createScroller(_store, _isHorizontal, _isRtl),\n        _isHorizontal,\n        _isRtl,\n      ];\n    });\n    // The elements length and cached items length are different just after element is added/removed.\n    store._updateCacheLength(count);\n\n    const [startIndex, endIndex] = useStore(store, store._getRange);\n    const jumpCount = useStore(store, store._getJumpCount);\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    useIsomorphicLayoutEffect(() => {\n      const root = rootRef[refKey]!;\n      const unobserve = resizer._observeRoot(root);\n      const cleanup = scroller._initRoot(root);\n      return () => {\n        unobserve();\n        cleanup();\n      };\n    }, []);\n\n    useIsomorphicLayoutEffect(() => {\n      const jump = store._flushJump();\n      if (!jump) return;\n\n      scroller._fixScrollJump(jump);\n    }, [jumpCount]);\n\n    useEffect(() => {\n      if (!onRangeChangeProp) return;\n\n      onRangeChangeProp({\n        start: startIndex,\n        end: endIndex,\n        count,\n      });\n    }, [startIndex, endIndex]);\n\n    useImperativeHandle(\n      ref,\n      () => {\n        return {\n          get scrollOffset() {\n            return store._getScrollOffset();\n          },\n          get scrollSize() {\n            return scroller._getActualScrollSize();\n          },\n          get viewportSize() {\n            return store._getViewportSize();\n          },\n          scrollToIndex(index) {\n            scroller._scrollToIndex(index, count);\n          },\n          scrollTo: scroller._scrollTo,\n          scrollBy(offset) {\n            scroller._scrollTo(store._getScrollOffset() + offset);\n          },\n        };\n      },\n      [count]\n    );\n\n    const startIndexWithMargin = max(startIndex - overscan, 0);\n    const endIndexWithMargin = min(endIndex + overscan, count - 1);\n    const items = useMemo(() => {\n      const res: ReactElement[] = [];\n      for (let i = startIndexWithMargin; i <= endIndexWithMargin; i++) {\n        const e = elements[i];\n        // This can be undefined when items are removed\n        if (exists(e)) {\n          res.push(\n            <Item\n              key={(e as { key?: ReactElement[\"key\"] })?.key || i}\n              _resizer={resizer}\n              _store={store}\n              _index={i}\n              _element={itemElement as \"div\"}\n              _children={e}\n              _isHorizontal={isHorizontal}\n              _isRtl={isRtl}\n            />\n          );\n        }\n      }\n      return res;\n    }, [elements, startIndexWithMargin, endIndexWithMargin]);\n\n    return (\n      <Window\n        _ref={rootRef}\n        _store={store}\n        _element={element}\n        _scrolling={scrolling}\n        _children={items}\n        _attrs={windowAttrs}\n        _isHorizontal={isHorizontal}\n      />\n    );\n  }\n);\n"],"names":["Item","memo","children","resizer","store","index","Element","isHorizontal","isRtl","ref","useRef","offset","useStore","hide","useIsomorphicLayoutEffect","refKey","jsx","useMemo","leftOrRightKey","style","Window","scrolling","attrs","horizontal","scrollSize","VList","forwardRef","overscan","initialItemSize","initialItemCount","horizontalProp","mode","element","DefaultWindow","itemElement","onScrollProp","onScrollStopProp","onRangeChangeProp","windowAttrs","elements","arr","Children","e","isInvalidElement","count","onScroll","useRefWithUpdate","onScrollStop","setScrolling","useState","scroller","useStatic","_isHorizontal","_isRtl","_store","createVirtualStore","isScrolling","createResizer","createScroller","startIndex","endIndex","jumpCount","rootRef","root","unobserve","cleanup","jump","useEffect","useImperativeHandle","startIndexWithMargin","max","endIndexWithMargin","min","items","res","i","exists"],"mappings":"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"}