import{j as w}from"./jsx-runtime-c3d7f245.js";import{r as l}from"./index-c6dae603.js";import{f as A,u as k,a as B,b as p,c as R,r as i,e as D,v as F,W as K,d as G,U as Q,l as X,k as Z,m as $,i as ee}from"./Window-5d984148.js";import{L as te}from"./ListItem-549a921c.js";const T=l.forwardRef(({children:u,overscan:h=4,initialItemSize:x,initialItemCount:L,horizontal:q,mode:g,cache:E,element:W=K,itemElement:H="div",onScroll:O,onScrollStop:j,onRangeChange:b,...c},M)=>{const m=l.useMemo(()=>A(u),[u]),a=m.length,y=k(O),_=k(j),[N,P]=l.useState(!1),[e,S,s,r,J]=B(()=>{const t=!!q,o=g==="rtl",n=G(a,x,L,g==="reverse",I=>{P(I),I||_[i]&&_[i]()},E);return n._subscribe(Q,()=>{y[i]&&y[i](e._getScrollOffset())}),[n,X(n,t),Z(n,t,o),t,o]});e._updateCacheLength(a);const[d,f]=p(e,e._getRange),U=p(e,e._getJumpCount),v=p(e,e._getCorrectedScrollSize,!0),C=l.useRef(null);R(()=>{const t=C[i],o=S._observeRoot(t),n=s._initRoot(t);return()=>{o(),n()}},[]),R(()=>{const t=e._flushJump();t&&s._fixScrollJump(t)},[U]),l.useEffect(()=>{b&&b({start:d,end:f,count:a})},[d,f]),l.useImperativeHandle(M,()=>({get cache(){return e._getCache()},get scrollOffset(){return e._getScrollOffset()},get scrollSize(){return s._getActualScrollSize()},get viewportSize(){return e._getViewportSize()},scrollToIndex:s._scrollToIndex,scrollTo:s._scrollTo,scrollBy(t){s._scrollTo(e._getScrollOffset()+t)}}),[]);const z=$(d-h,0),V=ee(f+h,a-1),Y=l.useMemo(()=>{const t=[];for(let o=z;o<=V;o++){const n=m[o];D(n)&&t.push(w(te,{_resizer:S,_store:e,_index:o,_element:H,_children:n,_isHorizontal:r,_isRtl:J},n.key||o))}return t},[m,z,V]);return w(W,{ref:C,width:r?v:void 0,height:r?void 0:v,scrolling:N,attrs:l.useMemo(()=>({...c,style:{overflow:r?"auto hidden":"hidden auto",display:r?"inline-block":"block",contain:"strict",width:"100%",height:"100%",padding:0,margin:0,...c.style}}),F(c)),children:Y})});try{T.displayName="VList",T.__docgenInfo={description:"Virtualized list component. See {@link VListProps} and {@link VListHandle}.",displayName:"VList",props:{children:{defaultValue:null,description:"Elements rendered by this component.",name:"children",required:!0,type:{name:"ReactNode"}},overscan:{defaultValue:{value:"4"},description:`Number of items to render above/below the visible bounds of the list. You can increase to avoid showing blank items in fast scrolling.
@defaultValue 4`,name:"overscan",required:!1,type:{name:"number"}},initialItemSize:{defaultValue:null,description:`Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.

- If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.
- If set, you can opt out estimation and use the value as initial item size.`,name:"initialItemSize",required:!1,type:{name:"number"}},initialItemCount:{defaultValue:null,description:"If set, the specified amount of items will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.",name:"initialItemCount",required:!1,type:{name:"number"}},horizontal:{defaultValue:null,description:"If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.",name:"horizontal",required:!1,type:{name:"boolean"}},mode:{defaultValue:null,description:"Scroll modes that should be set in certain situations.\n\n- `reverse`: This mode will adjust some styles to be suitable for bottom-to-top scrolling.\n- `rtl`: You have to set this mode if you use this component under `direction: rtl` style.",name:"mode",required:!1,type:{name:"enum",value:[{value:'"reverse"'},{value:'"rtl"'}]}},cache:{defaultValue:null,description:"You can restore cache by passing a {@link CacheSnapshot} on mount. This is useful when you want to restore scroll position after navigation. The snapshot can be obtained from {@link VListHandle.cache}.",name:"cache",required:!1,type:{name:"CacheSnapshot"}},element:{defaultValue:null,description:`Customized element type for scrollable element. This element will get {@link CustomWindowComponentProps} as props.
@defaultValue {@link Window }`,name:"element",required:!1,type:{name:"ForwardRefExoticComponent<CustomWindowComponentProps & RefAttributes<any>>"}},itemElement:{defaultValue:{value:"div"},description:`Customized element type for item element. This element will get {@link CustomItemComponentProps } as props.
@defaultValue "div"`,name:"itemElement",required:!1,type:{name:"CustomItemComponentOrElement"}},onScroll:{defaultValue:null,description:`Callback invoked whenever scroll offset changes.
@param offset Current scrollTop or scrollLeft.`,name:"onScroll",required:!1,type:{name:"(offset: number) => void"}},onScrollStop:{defaultValue:null,description:"Callback invoked when scrolling stops.",name:"onScrollStop",required:!1,type:{name:"() => void"}},onRangeChange:{defaultValue:null,description:"Callback invoked when visible items range changes.",name:"onRangeChange",required:!1,type:{name:"(payload: { start: number; end: number; count: number; }) => void"}}}}}catch{}export{T as V};
//# sourceMappingURL=VList-fb86ea78.js.map
