import{j as E}from"./jsx-runtime-c3d7f245.js";import{r as l}from"./index-c6dae603.js";import{f as Y,u as w,a as A,b as a,c as L,r as i,U as G,e as B,v as D,W as F,d as K,q as Z,p as Q,S as X,i as $,j as ee,k as te,m as oe,l as ne}from"./Window-53c6905e.js";import{L as le}from"./ListItem-59df263e.js";const R=l.forwardRef(({children:u,overscan:S=4,initialItemSize:T,initialItemCount:k,horizontal:x,mode:_,cache:q,element:O=F,itemElement:N="div",onScroll:j,onScrollStop:H,onRangeChange:g,...c},W)=>{const d=l.useMemo(()=>Y(u),[u]),m=d.length,b=w(j),v=w(H),[e,y,s,r,P]=A(()=>{const t=!!x,o=_==="rtl",n=K(m,T,k,_==="reverse",q);return[n,Z(n,t),Q(n,t,o),t,o]});e._updateCacheLength(m);const[f,p]=a(e,e._getRange,X),h=a(e,e._getIsScrolling,$),U=a(e,e._getJumpCount,ee),C=a(e,e._getCorrectedScrollSize,te,!0),I=l.useRef(null);L(()=>{const t=I[i],o=y._observeRoot(t),n=s._initRoot(t),M=e._subscribe(G,()=>{b[i]&&b[i](e._getScrollOffset())});return()=>{o(),n(),M()}},[]),L(()=>{const t=e._flushJump();t&&s._fixScrollJump(t)},[U]),l.useEffect(()=>{h||v[i]&&v[i]()},[h]),l.useEffect(()=>{g&&g(f,p)},[f,p]),l.useImperativeHandle(W,()=>({get cache(){return e._getCache()},get scrollOffset(){return e._getScrollOffset()},get scrollSize(){return s._getActualScrollSize()},get viewportSize(){return e._getViewportSize()},scrollToIndex:s._scrollToIndex,scrollTo:s._scrollTo,scrollBy(t){s._scrollTo(e._getScrollOffset()+t)}}),[]);const z=oe(f-S,0),V=ne(p+S,m-1),J=l.useMemo(()=>{const t=[];for(let o=z;o<=V;o++){const n=d[o];B(n)&&t.push(E(le,{_resizer:y,_store:e,_index:o,_element:N,_children:n,_isHorizontal:r,_isRtl:P},n.key||o))}return t},[d,z,V]);return E(O,{ref:I,width:r?C:void 0,height:r?void 0:C,scrolling:h,attrs:l.useMemo(()=>({...c,style:{overflow:r?"auto hidden":"hidden auto",display:r?"inline-block":"block",contain:"strict",width:"100%",height:"100%",padding:0,margin:0,...c.style}}),D(c)),children:J})});try{R.displayName="VList",R.__docgenInfo={description:"Virtualized list component. See {@link VListProps} and {@link VListHandle}.",displayName:"VList",props:{children:{defaultValue:null,description:"Elements rendered by this component.",name:"children",required:!0,type:{name:"ReactNode"}},overscan:{defaultValue:{value:"4"},description:`Number of items to render above/below the visible bounds of the list. You can increase to avoid showing blank items in fast scrolling.
@defaultValue 4`,name:"overscan",required:!1,type:{name:"number"}},initialItemSize:{defaultValue:null,description:`Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.

- If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.
- If set, you can opt out estimation and use the value as initial item size.`,name:"initialItemSize",required:!1,type:{name:"number"}},initialItemCount:{defaultValue:null,description:"If set, the specified amount of items will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.",name:"initialItemCount",required:!1,type:{name:"number"}},horizontal:{defaultValue:null,description:"If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.",name:"horizontal",required:!1,type:{name:"boolean"}},mode:{defaultValue:null,description:"Scroll modes that should be set in certain situations.\n\n- `reverse`: This mode will adjust some styles to be suitable for bottom-to-top scrolling.\n- `rtl`: You have to set this mode if you use this component under `direction: rtl` style.",name:"mode",required:!1,type:{name:"enum",value:[{value:'"reverse"'},{value:'"rtl"'}]}},cache:{defaultValue:null,description:"You can restore cache by passing a {@link CacheSnapshot} on mount. This is useful when you want to restore scroll position after navigation. The snapshot can be obtained from {@link VListHandle.cache}.",name:"cache",required:!1,type:{name:"CacheSnapshot"}},element:{defaultValue:null,description:`Customized element type for scrollable element. This element will get {@link CustomWindowComponentProps} as props.
@defaultValue {@link Window }`,name:"element",required:!1,type:{name:"ForwardRefExoticComponent<CustomWindowComponentProps & RefAttributes<any>>"}},itemElement:{defaultValue:{value:"div"},description:`Customized element type for item element. This element will get {@link CustomItemComponentProps } as props.
@defaultValue "div"`,name:"itemElement",required:!1,type:{name:"CustomItemComponentOrElement"}},onScroll:{defaultValue:null,description:`Callback invoked whenever scroll offset changes.
@param offset Current scrollTop or scrollLeft.`,name:"onScroll",required:!1,type:{name:"(offset: number) => void"}},onScrollStop:{defaultValue:null,description:"Callback invoked when scrolling stops.",name:"onScrollStop",required:!1,type:{name:"() => void"}},onRangeChange:{defaultValue:null,description:"Callback invoked when visible items range changes.",name:"onRangeChange",required:!1,type:{name:"(startIndex: number, endIndex: number) => void"}}}}}catch{}export{R as V};
//# sourceMappingURL=VList-cadaef78.js.map
