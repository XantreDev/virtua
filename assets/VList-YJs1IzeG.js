import{a as z}from"./jsx-runtime-sgeEVxPu.js";import{r}from"./index-yp3VsGQP.js";import{a as M,A as X,b as F,u as w,r as l,U as W,c as Z,k as Q,l as $,d as ee,e as te,m as oe,n as ne,S as se,v as re,V as le,f as ae,g as ie,o as ce,j as ue}from"./useRerender-yG4Yh5zB.js";import{u as de,a as C,L as me}from"./useChildren-RL_s2hLH.js";import{r as fe}from"./index-8dy-jdxy.js";const E=r.forwardRef(({children:f,count:L,overscan:p=4,initialItemSize:h,initialItemCount:T,shift:R,horizontal:x,reverse:k,cache:O,components:{Root:q=le,Item:A="div"}=ae,onScroll:N,onScrollStop:D,onRangeChange:_,...c},H)=>{const[P,a]=de(f,L),S=C(N),b=C(D),[e,g,n,s]=M(()=>{const t=!!x,o=ie(a,h,T,O,!h);return[o,ce(o,t),ue(o,t),t]});a!==e._getItemsLength()&&e._update(X,[a,R]);const y=F(e),[u,d]=e._getRange(),m=e._getScrollDirection(),U=e._getJumpCount(),v=e._getScrollSize(),I=r.useRef(null);w(()=>{const t=I[l],o=e._subscribe(W+Z,K=>{K?fe.flushSync(y):y()}),i=e._subscribe(Q,()=>{S[l]&&S[l](e._getScrollOffset())}),Y=e._subscribe($,()=>{b[l]&&b[l]()}),B=g._observeRoot(t),G=n._observe(t);return()=>{o(),i(),Y(),B(),G()}},[]),w(()=>{const t=e._flushJump();t&&n._fixScrollJump(t)},[U]),r.useEffect(()=>{_&&_(u,d)},[u,d]),r.useImperativeHandle(H,()=>({get cache(){return e._getCache()},get scrollOffset(){return e._getScrollOffset()},get scrollSize(){return e._getScrollSize()},get viewportSize(){return e._getViewportSize()},scrollToIndex:n._scrollToIndex,scrollTo:n._scrollTo,scrollBy:n._scrollBy}),[]);const j=ee(u,p,m),J=te(d,p,m,a),V=[];for(let t=j;t<=J;t++){const o=P(t);let i=e._getItemOffset(t);k&&(i+=oe(0,e._getViewportSize()-e._getTotalSize())),V.push(z(me,{_resizer:g,_index:t,_offset:i,_hide:e._isUnmeasuredItem(t),_element:A,_children:o,_isHorizontal:s},ne(o,t)))}return z(q,{ref:I,width:s?v:void 0,height:s?void 0:v,scrolling:m!==se,attrs:r.useMemo(()=>({...c,style:{display:s?"inline-block":"block",[s?"overflowX":"overflowY"]:"auto",overflowAnchor:"none",contain:"strict",width:"100%",height:"100%",...c.style}}),re(c)),children:V})});try{E.displayName="VList",E.__docgenInfo={description:"Virtualized list component. See {@link VListProps} and {@link VListHandle}.",displayName:"VList",props:{children:{defaultValue:null,description:`Elements rendered by this component.

You can also pass a function and set {@link VListProps.count} to create elements lazily.`,name:"children",required:!0,type:{name:"ReactNode | ((index: number) => ReactElement<any, string | JSXElementConstructor<any>>)"}},count:{defaultValue:null,description:"If you set a function to {@link VListProps.children}, you have to set total number of items to this prop.",name:"count",required:!1,type:{name:"number"}},overscan:{defaultValue:{value:"4"},description:`Number of items to render above/below the visible bounds of the list. Lower value will give better performance but you can increase to avoid showing blank items in fast scrolling.
@defaultValue 4`,name:"overscan",required:!1,type:{name:"number"}},initialItemSize:{defaultValue:null,description:`Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.

- If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.
- If set, you can opt out estimation and use the value as initial item size.`,name:"initialItemSize",required:!1,type:{name:"number"}},initialItemCount:{defaultValue:null,description:"If set, the specified amount of items will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.",name:"initialItemCount",required:!1,type:{name:"number"}},shift:{defaultValue:null,description:"While true is set, scroll position will be maintained from the end not usual start when items are added to/removed from start. It's recommended to set false if you add to/remove from mid/end of the list because it can cause unexpected behavior. This prop is useful for reverse infinite scrolling.",name:"shift",required:!1,type:{name:"boolean"}},horizontal:{defaultValue:null,description:"If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.",name:"horizontal",required:!1,type:{name:"boolean"}},reverse:{defaultValue:null,description:"If true, items are aligned to the end of the list when total size of items are smaller than viewport size. It's useful for chat like app.",name:"reverse",required:!1,type:{name:"boolean"}},cache:{defaultValue:null,description:"You can restore cache by passing a {@link CacheSnapshot} on mount. This is useful when you want to restore scroll position after navigation. The snapshot can be obtained from {@link VListHandle.cache}.",name:"cache",required:!1,type:{name:"CacheSnapshot"}},components:{defaultValue:null,description:"Customized components for advanced usage.",name:"components",required:!1,type:{name:"{ Root?: ForwardRefExoticComponent<CustomViewportComponentProps & RefAttributes<any>>; Item?: CustomItemComponentOrElement; }"}},onScroll:{defaultValue:null,description:`Callback invoked whenever scroll offset changes.
@param offset Current scrollTop or scrollLeft.`,name:"onScroll",required:!1,type:{name:"(offset: number) => void"}},onScrollStop:{defaultValue:null,description:"Callback invoked when scrolling stops.",name:"onScrollStop",required:!1,type:{name:"() => void"}},onRangeChange:{defaultValue:null,description:"Callback invoked when visible items range changes.",name:"onRangeChange",required:!1,type:{name:"(startIndex: number, endIndex: number) => void"}}}}}catch{}export{E as V};
