{"version":3,"file":"VList-d18febfd.js","sources":["../../src/react/VList.tsx"],"sourcesContent":["import {\n  useRef,\n  useMemo,\n  ReactElement,\n  forwardRef,\n  useImperativeHandle,\n  ReactNode,\n  useEffect,\n} from \"react\";\nimport { UPDATE_SCROLL_WITH_EVENT, createVirtualStore } from \"../core/store\";\nimport { useIsomorphicLayoutEffect } from \"./useIsomorphicLayoutEffect\";\nimport { useSelector } from \"./useSelector\";\nimport { exists, max, min, values } from \"../core/utils\";\nimport { createScroller } from \"../core/scroller\";\nimport { MayHaveKey, flattenChildren, refKey } from \"./utils\";\nimport { useStatic } from \"./useStatic\";\nimport { useRefWithUpdate } from \"./useRefWithUpdate\";\nimport { createResizer } from \"../core/resizer\";\nimport { WindowComponentAttributes } from \"..\";\nimport {\n  CustomWindowComponent,\n  CustomWindowComponentProps,\n  Window as DefaultWindow,\n} from \"./Window\";\nimport { CustomItemComponent, ListItem } from \"./ListItem\";\nimport { CacheSnapshot } from \"../core/types\";\n\nexport type ScrollMode = \"reverse\" | \"rtl\";\n\ntype CustomItemComponentOrElement =\n  | keyof JSX.IntrinsicElements\n  | CustomItemComponent;\n\n/**\n * Methods of {@link VList}.\n */\nexport interface VListHandle {\n  /**\n   * Get current {@link CacheSnapshot}.\n   */\n  readonly cache: CacheSnapshot;\n  /**\n   * Get current scrollTop or scrollLeft.\n   */\n  readonly scrollOffset: number;\n  /**\n   * Get current scrollHeight or scrollWidth.\n   */\n  readonly scrollSize: number;\n  /**\n   * Get current offsetHeight or offsetWidth.\n   */\n  readonly viewportSize: number;\n  /**\n   * Scroll to the item specified by index.\n   * @param index index of item\n   */\n  scrollToIndex(index: number): void;\n  /**\n   * Scroll to the given offset.\n   * @param offset offset from start\n   */\n  scrollTo(offset: number): void;\n  /**\n   * Scroll by the given offset.\n   * @param offset offset from current position\n   */\n  scrollBy(offset: number): void;\n}\n\n/**\n * Props of {@link VList}.\n */\nexport interface VListProps extends WindowComponentAttributes {\n  /**\n   * Elements rendered by this component.\n   */\n  children: ReactNode;\n  /**\n   * Number of items to render above/below the visible bounds of the list. You can increase to avoid showing blank items in fast scrolling.\n   * @defaultValue 4\n   */\n  overscan?: number;\n  /**\n   * Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.\n   *\n   * - If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.\n   * - If set, you can opt out estimation and use the value as initial item size.\n   */\n  initialItemSize?: number;\n  /**\n   * If set, the specified amount of items will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.\n   */\n  initialItemCount?: number;\n  /**\n   * If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.\n   */\n  horizontal?: boolean;\n  /**\n   * Scroll modes that should be set in certain situations.\n   *\n   * - `reverse`: This mode will adjust some styles to be suitable for bottom-to-top scrolling.\n   * - `rtl`: You have to set this mode if you use this component under `direction: rtl` style.\n   */\n  mode?: ScrollMode;\n  /**\n   * You can restore cache by passing a {@link CacheSnapshot} on mount. This is useful when you want to restore scroll position after navigation. The snapshot can be obtained from {@link VListHandle.cache}.\n   */\n  cache?: CacheSnapshot;\n  /**\n   * Customized element type for scrollable element. This element will get {@link CustomWindowComponentProps} as props.\n   * @defaultValue {@link Window}\n   */\n  element?: CustomWindowComponent;\n  /**\n   * Customized element type for item element. This element will get {@link CustomItemComponentProps} as props.\n   * @defaultValue \"div\"\n   */\n  itemElement?: CustomItemComponentOrElement;\n  /**\n   * Callback invoked whenever scroll offset changes.\n   * @param offset Current scrollTop or scrollLeft.\n   */\n  onScroll?: (offset: number) => void;\n  /**\n   * Callback invoked when scrolling stops.\n   */\n  onScrollStop?: () => void;\n  /**\n   * Callback invoked when visible items range changes.\n   */\n  onRangeChange?: (payload: {\n    /**\n     * The start index of viewable items.\n     */\n    start: number;\n    /**\n     * The end index of viewable items.\n     */\n    end: number;\n    /**\n     * The total count of items.\n     */\n    count: number;\n  }) => void;\n}\n\n/**\n * Virtualized list component. See {@link VListProps} and {@link VListHandle}.\n */\nexport const VList = forwardRef<VListHandle, VListProps>(\n  (\n    {\n      children,\n      overscan = 4,\n      initialItemSize,\n      initialItemCount,\n      horizontal: horizontalProp,\n      mode,\n      cache,\n      element: Window = DefaultWindow,\n      itemElement = \"div\",\n      onScroll: onScrollProp,\n      onScrollStop: onScrollStopProp,\n      onRangeChange: onRangeChangeProp,\n      ...windowAttrs\n    },\n    ref\n  ): ReactElement => {\n    // Memoize element array\n    const elements = useMemo(() => flattenChildren(children), [children]);\n    const count = elements.length;\n\n    const onScroll = useRefWithUpdate(onScrollProp);\n    const onScrollStop = useRefWithUpdate(onScrollStopProp);\n\n    const [store, resizer, scroller, isHorizontal, isRtl] = useStatic(() => {\n      const _isHorizontal = !!horizontalProp;\n      const _isRtl = mode === \"rtl\";\n      const _store = createVirtualStore(\n        count,\n        initialItemSize,\n        initialItemCount,\n        mode === \"reverse\",\n        cache\n      );\n      return [\n        _store,\n        createResizer(_store, _isHorizontal),\n        createScroller(_store, _isHorizontal, _isRtl),\n        _isHorizontal,\n        _isRtl,\n      ];\n    });\n    // The elements length and cached items length are different just after element is added/removed.\n    store._updateCacheLength(count);\n\n    const [startIndex, endIndex] = useSelector(store, store._getRange);\n    const scrolling = useSelector(store, store._getIsScrolling);\n    const jumpCount = useSelector(store, store._getJumpCount);\n    const scrollSize = useSelector(store, store._getCorrectedScrollSize, true);\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    useIsomorphicLayoutEffect(() => {\n      const root = rootRef[refKey]!;\n      const unobserve = resizer._observeRoot(root);\n      const cleanup = scroller._initRoot(root);\n      const cleanupOnScroll = store._subscribe(UPDATE_SCROLL_WITH_EVENT, () => {\n        onScroll[refKey] && onScroll[refKey](store._getScrollOffset());\n      });\n      return () => {\n        unobserve();\n        cleanup();\n        cleanupOnScroll();\n      };\n    }, []);\n\n    useIsomorphicLayoutEffect(() => {\n      const jump = store._flushJump();\n      if (!jump) return;\n\n      scroller._fixScrollJump(jump);\n    }, [jumpCount]);\n\n    useEffect(() => {\n      if (!scrolling) {\n        onScrollStop[refKey] && onScrollStop[refKey]();\n      }\n    }, [scrolling]);\n\n    useEffect(() => {\n      if (!onRangeChangeProp) return;\n\n      onRangeChangeProp({\n        start: startIndex,\n        end: endIndex,\n        count,\n      });\n    }, [startIndex, endIndex]);\n\n    useImperativeHandle(\n      ref,\n      () => {\n        return {\n          get cache() {\n            return store._getCache();\n          },\n          get scrollOffset() {\n            return store._getScrollOffset();\n          },\n          get scrollSize() {\n            return scroller._getActualScrollSize();\n          },\n          get viewportSize() {\n            return store._getViewportSize();\n          },\n          scrollToIndex: scroller._scrollToIndex,\n          scrollTo: scroller._scrollTo,\n          scrollBy(offset) {\n            scroller._scrollTo(store._getScrollOffset() + offset);\n          },\n        };\n      },\n      []\n    );\n\n    const overscanedStartIndex = max(startIndex - overscan, 0);\n    const overscanedEndIndex = min(endIndex + overscan, count - 1);\n    const items = useMemo(() => {\n      const res: ReactElement[] = [];\n      for (let i = overscanedStartIndex; i <= overscanedEndIndex; i++) {\n        const e = elements[i];\n        // This can be undefined when items are removed\n        if (exists(e)) {\n          res.push(\n            <ListItem\n              key={(e as MayHaveKey).key || i}\n              _resizer={resizer}\n              _store={store}\n              _index={i}\n              _element={itemElement as \"div\"}\n              _children={e}\n              _isHorizontal={isHorizontal}\n              _isRtl={isRtl}\n            />\n          );\n        }\n      }\n      return res;\n    }, [elements, overscanedStartIndex, overscanedEndIndex]);\n\n    return (\n      <Window\n        ref={rootRef}\n        width={isHorizontal ? scrollSize : undefined}\n        height={isHorizontal ? undefined : scrollSize}\n        scrolling={scrolling}\n        attrs={useMemo(\n          () => ({\n            ...windowAttrs,\n            style: {\n              overflow: isHorizontal ? \"auto hidden\" : \"hidden auto\",\n              display: isHorizontal ? \"inline-block\" : \"block\",\n              contain: \"strict\",\n              // transform: \"translate3d(0px, 0px, 0px)\",\n              // willChange: \"scroll-position\",\n              // backfaceVisibility: \"hidden\",\n              // https://github.com/bvaughn/react-window/issues/395\n              // willChange: \"transform\",\n              width: \"100%\",\n              height: \"100%\",\n              padding: 0,\n              margin: 0,\n              ...windowAttrs.style,\n            },\n          }),\n          values(windowAttrs)\n        )}\n      >\n        {items}\n      </Window>\n    );\n  }\n);\n"],"names":["VList","forwardRef","children","overscan","initialItemSize","initialItemCount","horizontalProp","mode","cache","Window","DefaultWindow","itemElement","onScrollProp","onScrollStopProp","onRangeChangeProp","windowAttrs","ref","elements","useMemo","flattenChildren","count","onScroll","useRefWithUpdate","onScrollStop","store","resizer","scroller","isHorizontal","isRtl","useStatic","_isHorizontal","_isRtl","_store","createVirtualStore","createResizer","createScroller","startIndex","endIndex","useSelector","scrolling","jumpCount","scrollSize","rootRef","useRef","useIsomorphicLayoutEffect","root","refKey","unobserve","cleanup","cleanupOnScroll","UPDATE_SCROLL_WITH_EVENT","jump","useEffect","useImperativeHandle","offset","overscanedStartIndex","max","overscanedEndIndex","min","items","res","i","e","exists","jsx","ListItem","values"],"mappings":"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"}