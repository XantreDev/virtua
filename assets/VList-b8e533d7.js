import{j as E}from"./jsx-runtime-c3d7f245.js";import{r as s}from"./index-c6dae603.js";import{f as Y,u as T,a as B,A as W,b as u,c as L,r as i,q as F,e as K,v as Z,V as Q,d as X,g as $,s as ee,p as te,U as oe,j as x,k as ne,l as se,m as re,n as le}from"./Viewport-77899377.js";import{L as ie}from"./ListItem-0aa55561.js";import{r as ae}from"./index-eb008d06.js";const k=s.forwardRef(({children:d,overscan:S=4,initialItemSize:g,initialItemCount:q,shift:O,horizontal:H,mode:y,cache:N,components:{Root:j=Q,Item:A="div"}=X,onScroll:P,onScrollStop:U,onRangeChange:b,...m},D)=>{const f=s.useMemo(()=>Y(d),[d]),a=f.length,v=T(P),I=T(U),[e,C,r,l,M]=B(()=>{const t=!!H,o=y==="rtl",n=$(ae.flushSync,a,g,q,N,y==="reverse",!g);return[n,ee(n,t),te(n,t,o),t,o]});a!==e._getItemsLength()&&e._update(W,[a,O]);const[p,h]=u(e,e._getRange,oe+x),_=u(e,e._getIsScrolling,ne),J=u(e,e._getJumpCount,se),V=u(e,e._getCorrectedScrollSize,x,!0),z=s.useRef(null);L(()=>{const t=z[i],o=C._observeRoot(t),n=r._initRoot(t),c=e._subscribe(F,()=>{v[i]&&v[i](e._getScrollOffset())});return()=>{o(),n(),c()}},[]),L(()=>{const t=e._flushJump();t&&r._fixScrollJump(t)},[J]),s.useEffect(()=>{_||I[i]&&I[i]()},[_]),s.useEffect(()=>{b&&b(p,h)},[p,h]),s.useImperativeHandle(D,()=>({get cache(){return e._getCache()},get scrollOffset(){return e._getScrollOffset()},get scrollSize(){return e._getCorrectedScrollSize()},get viewportSize(){return e._getViewportSize()},scrollToIndex:r._scrollToIndex,scrollTo:r._scrollTo,scrollBy:r._scrollBy}),[]);const w=re(p-S,0),R=le(h+S,a-1),G=s.useMemo(()=>{const t=[];for(let o=w;o<=R;o++){const n=f[o],c=n.key;t.push(E(ie,{_resizer:C,_store:e,_index:o,_element:A,_children:n,_isHorizontal:l,_isRtl:M},K(c)?c:"_"+o))}return t},[f,w,R]);return E(j,{ref:z,width:l?V:void 0,height:l?void 0:V,scrolling:_,attrs:s.useMemo(()=>({...m,style:{overflow:l?"auto hidden":"hidden auto",display:l?"inline-block":"block",contain:"strict",width:"100%",height:"100%",padding:0,margin:0,...m.style}}),Z(m)),children:G})});try{k.displayName="VList",k.__docgenInfo={description:"Virtualized list component. See {@link VListProps} and {@link VListHandle}.",displayName:"VList",props:{children:{defaultValue:null,description:"Elements rendered by this component.",name:"children",required:!0,type:{name:"ReactNode"}},overscan:{defaultValue:{value:"4"},description:`Number of items to render above/below the visible bounds of the list. You can increase to avoid showing blank items in fast scrolling.
@defaultValue 4`,name:"overscan",required:!1,type:{name:"number"}},initialItemSize:{defaultValue:null,description:`Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.

- If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.
- If set, you can opt out estimation and use the value as initial item size.`,name:"initialItemSize",required:!1,type:{name:"number"}},initialItemCount:{defaultValue:null,description:"If set, the specified amount of items will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.",name:"initialItemCount",required:!1,type:{name:"number"}},shift:{defaultValue:null,description:"While true is set, scroll position will be maintained from the end not usual start when items are shifted/unshifted. It is useful for reverse infinite scrolling.",name:"shift",required:!1,type:{name:"boolean"}},horizontal:{defaultValue:null,description:"If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.",name:"horizontal",required:!1,type:{name:"boolean"}},mode:{defaultValue:null,description:"Scroll modes that should be set in certain situations.\n\n- `reverse`: This mode will adjust some styles to be suitable for bottom-to-top scrolling.\n- `rtl`: You have to set this mode if you use this component under `direction: rtl` style.",name:"mode",required:!1,type:{name:"enum",value:[{value:'"reverse"'},{value:'"rtl"'}]}},cache:{defaultValue:null,description:"You can restore cache by passing a {@link CacheSnapshot} on mount. This is useful when you want to restore scroll position after navigation. The snapshot can be obtained from {@link VListHandle.cache}.",name:"cache",required:!1,type:{name:"CacheSnapshot"}},components:{defaultValue:null,description:"Customized components for advanced usage.",name:"components",required:!1,type:{name:"{ Root?: ForwardRefExoticComponent<CustomViewportComponentProps & RefAttributes<any>>; Item?: CustomItemComponentOrElement; }"}},onScroll:{defaultValue:null,description:`Callback invoked whenever scroll offset changes.
@param offset Current scrollTop or scrollLeft.`,name:"onScroll",required:!1,type:{name:"(offset: number) => void"}},onScrollStop:{defaultValue:null,description:"Callback invoked when scrolling stops.",name:"onScrollStop",required:!1,type:{name:"() => void"}},onRangeChange:{defaultValue:null,description:"Callback invoked when visible items range changes.",name:"onRangeChange",required:!1,type:{name:"(startIndex: number, endIndex: number) => void"}}}}}catch{}export{k as V};
//# sourceMappingURL=VList-b8e533d7.js.map
