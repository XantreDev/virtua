{"version":3,"file":"WVList.stories-ccd57ec1.js","sources":["../../src/react/WVList.tsx"],"sourcesContent":["import {\n  useRef,\n  useMemo,\n  ReactElement,\n  ReactNode,\n  useEffect,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { createVirtualStore } from \"../core/store\";\nimport { useIsomorphicLayoutEffect } from \"./useIsomorphicLayoutEffect\";\nimport {\n  SELECT_IS_SCROLLING,\n  SELECT_JUMP_COUNT,\n  SELECT_RANGE,\n  SELECT_SCROLL_SIZE,\n  useSelector,\n} from \"./useSelector\";\nimport { exists, max, min, values } from \"../core/utils\";\nimport { createWindowScroller } from \"../core/scroller\";\nimport { MayHaveKey, flattenChildren, refKey } from \"./utils\";\nimport { useStatic } from \"./useStatic\";\nimport { useRefWithUpdate } from \"./useRefWithUpdate\";\nimport { createWindowResizer } from \"../core/resizer\";\nimport { CacheSnapshot, WindowComponentAttributes } from \"..\";\nimport {\n  CustomWindowComponent,\n  CustomWindowComponentProps,\n  Window as DefaultWindow,\n} from \"./Window\";\nimport { CustomItemComponent, ListItem } from \"./ListItem\";\n\ntype CustomItemComponentOrElement =\n  | keyof JSX.IntrinsicElements\n  | CustomItemComponent;\n\n/**\n * Methods of {@link WVList}.\n */\nexport interface WVListHandle {\n  /**\n   * Get current {@link CacheSnapshot}.\n   */\n  readonly cache: CacheSnapshot;\n}\n\n/**\n * Props of {@link WVList}.\n */\nexport interface WVListProps extends WindowComponentAttributes {\n  /**\n   * Elements rendered by this component.\n   */\n  children: ReactNode;\n  /**\n   * Number of items to render above/below the visible bounds of the list. You can increase to avoid showing blank items in fast scrolling.\n   * @defaultValue 4\n   */\n  overscan?: number;\n  /**\n   * Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.\n   *\n   * - If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.\n   * - If set, you can opt out estimation and use the value as initial item size.\n   */\n  initialItemSize?: number;\n  /**\n   * If set, the specified amount of items will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.\n   */\n  initialItemCount?: number;\n  /**\n   * If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.\n   */\n  horizontal?: boolean;\n  /**\n   * You can restore cache by passing a {@link CacheSnapshot} on mount. This is useful when you want to restore scroll position after navigation. The snapshot can be obtained from {@link WVListHandle.cache}.\n   */\n  cache?: CacheSnapshot;\n  /**\n   * Customized element type for scrollable element. This element will get {@link CustomWindowComponentProps} as props.\n   * @defaultValue {@link Window}\n   */\n  element?: CustomWindowComponent;\n  /**\n   * Customized element type for item element. This element will get {@link CustomItemComponentProps} as props.\n   * @defaultValue \"div\"\n   */\n  itemElement?: CustomItemComponentOrElement;\n  /**\n   * Callback invoked when scrolling stops.\n   */\n  onScrollStop?: () => void;\n  /**\n   * Callback invoked when visible items range changes.\n   */\n  onRangeChange?: (\n    /**\n     * The start index of viewable items.\n     */\n    startIndex: number,\n    /**\n     * The end index of viewable items.\n     */\n    endIndex: number\n  ) => void;\n}\n\n/**\n * Virtualized list component controlled by the window scrolling. See {@link WVListProps} and {@link WVListHandle}.\n */\nexport const WVList = forwardRef<WVListHandle, WVListProps>(\n  (\n    {\n      children,\n      overscan = 4,\n      initialItemSize,\n      initialItemCount,\n      horizontal: horizontalProp,\n      cache,\n      element: Window = DefaultWindow,\n      itemElement = \"div\",\n      onScrollStop: onScrollStopProp,\n      onRangeChange: onRangeChangeProp,\n      ...windowAttrs\n    },\n    ref\n  ): ReactElement => {\n    // Memoize element array\n    const elements = useMemo(() => flattenChildren(children), [children]);\n    const count = elements.length;\n\n    const onScrollStop = useRefWithUpdate(onScrollStopProp);\n\n    const [store, resizer, scroller, isHorizontal] = useStatic(() => {\n      const _isHorizontal = !!horizontalProp;\n      const _store = createVirtualStore(\n        count,\n        initialItemSize,\n        initialItemCount,\n        false,\n        cache\n      );\n\n      return [\n        _store,\n        createWindowResizer(_store, _isHorizontal),\n        createWindowScroller(_store, _isHorizontal),\n        _isHorizontal,\n      ];\n    });\n    // The elements length and cached items length are different just after element is added/removed.\n    store._updateCacheLength(count);\n\n    const [startIndex, endIndex] = useSelector(\n      store,\n      store._getRange,\n      SELECT_RANGE\n    );\n    const scrolling = useSelector(\n      store,\n      store._getIsScrolling,\n      SELECT_IS_SCROLLING\n    );\n    const jumpCount = useSelector(\n      store,\n      store._getJumpCount,\n      SELECT_JUMP_COUNT\n    );\n    const scrollSize = useSelector(\n      store,\n      store._getCorrectedScrollSize,\n      SELECT_SCROLL_SIZE,\n      true\n    );\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    useIsomorphicLayoutEffect(() => {\n      const root = rootRef[refKey]!;\n      const unobserve = resizer._observeRoot(root);\n      const cleanup = scroller._initRoot(root);\n      return () => {\n        unobserve();\n        cleanup();\n      };\n    }, []);\n\n    useIsomorphicLayoutEffect(() => {\n      const jump = store._flushJump();\n      if (!jump) return;\n\n      scroller._fixScrollJump(jump);\n    }, [jumpCount]);\n\n    useEffect(() => {\n      if (!scrolling) {\n        onScrollStop[refKey] && onScrollStop[refKey]();\n      }\n    }, [scrolling]);\n\n    useEffect(() => {\n      if (!onRangeChangeProp) return;\n\n      onRangeChangeProp(startIndex, endIndex);\n    }, [startIndex, endIndex]);\n\n    useImperativeHandle(\n      ref,\n      () => {\n        return {\n          get cache() {\n            return store._getCache();\n          },\n        };\n      },\n      []\n    );\n\n    const overscanedStartIndex = max(startIndex - overscan, 0);\n    const overscanedEndIndex = min(endIndex + overscan, count - 1);\n    const items = useMemo(() => {\n      const res: ReactElement[] = [];\n      for (let i = overscanedStartIndex; i <= overscanedEndIndex; i++) {\n        const e = elements[i];\n        // This can be undefined when items are removed\n        if (exists(e)) {\n          res.push(\n            <ListItem\n              key={(e as MayHaveKey).key || i}\n              _resizer={resizer}\n              _store={store}\n              _index={i}\n              _element={itemElement as \"div\"}\n              _children={e}\n              _isHorizontal={isHorizontal}\n              _isRtl={false}\n            />\n          );\n        }\n      }\n      return res;\n    }, [elements, overscanedStartIndex, overscanedEndIndex]);\n\n    return (\n      <Window\n        ref={rootRef}\n        width={isHorizontal ? scrollSize : undefined}\n        height={isHorizontal ? undefined : scrollSize}\n        scrolling={scrolling}\n        attrs={useMemo(\n          () => ({\n            ...windowAttrs,\n            style: {\n              overflow: \"visible\",\n              display: isHorizontal ? \"inline-block\" : \"block\",\n              // transform: \"translate3d(0px, 0px, 0px)\",\n              // willChange: \"scroll-position\",\n              // backfaceVisibility: \"hidden\",\n              // https://github.com/bvaughn/react-window/issues/395\n              // willChange: \"transform\",\n              width: isHorizontal ? \"auto\" : \"100%\",\n              height: isHorizontal ? \"100%\" : \"auto\",\n              padding: 0,\n              margin: 0,\n              ...windowAttrs.style,\n            },\n          }),\n          values(windowAttrs)\n        )}\n      >\n        {items}\n      </Window>\n    );\n  }\n);\n"],"names":["WVList","forwardRef","children","overscan","initialItemSize","initialItemCount","horizontalProp","cache","Window","DefaultWindow","itemElement","onScrollStopProp","onRangeChangeProp","windowAttrs","ref","elements","useMemo","flattenChildren","count","onScrollStop","useRefWithUpdate","store","resizer","scroller","isHorizontal","useStatic","_isHorizontal","_store","createVirtualStore","createWindowResizer","createWindowScroller","startIndex","endIndex","useSelector","SELECT_RANGE","scrolling","SELECT_IS_SCROLLING","jumpCount","SELECT_JUMP_COUNT","scrollSize","SELECT_SCROLL_SIZE","rootRef","useRef","useIsomorphicLayoutEffect","root","refKey","unobserve","cleanup","jump","useEffect","useImperativeHandle","overscanedStartIndex","max","overscanedEndIndex","min","items","res","i","e","exists","jsx","ListItem","values"],"mappings":"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"}