{"version":3,"file":"WVList.stories-31b3dcb0.js","sources":["../../src/react/WVList.tsx"],"sourcesContent":["import {\n  useRef,\n  useMemo,\n  ReactElement,\n  ReactNode,\n  useEffect,\n  useState,\n} from \"react\";\nimport { createVirtualStore } from \"../core/store\";\nimport { useIsomorphicLayoutEffect } from \"./useIsomorphicLayoutEffect\";\nimport { useSelector } from \"./useSelector\";\nimport { exists, max, min, values } from \"../core/utils\";\nimport { createWindowScroller } from \"../core/scroller\";\nimport { MayHaveKey, flattenChildren, refKey } from \"./utils\";\nimport { useStatic } from \"./useStatic\";\nimport { useRefWithUpdate } from \"./useRefWithUpdate\";\nimport { createWindowResizer } from \"../core/resizer\";\nimport { WindowComponentAttributes } from \"..\";\nimport {\n  CustomWindowComponent,\n  CustomWindowComponentProps,\n  Window as DefaultWindow,\n} from \"./Window\";\nimport { CustomItemComponent, ListItem } from \"./ListItem\";\n\ntype CustomItemComponentOrElement =\n  | keyof JSX.IntrinsicElements\n  | CustomItemComponent;\n\n/**\n * Props of {@link WVList}.\n */\nexport interface WVListProps extends WindowComponentAttributes {\n  /**\n   * Elements rendered by this component.\n   */\n  children: ReactNode;\n  /**\n   * Number of items to render above/below the visible bounds of the list. You can increase to avoid showing blank items in fast scrolling.\n   * @defaultValue 4\n   */\n  overscan?: number;\n  /**\n   * Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.\n   *\n   * - If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.\n   * - If set, you can opt out estimation and use the value as initial item size.\n   */\n  initialItemSize?: number;\n  /**\n   * If set, the specified amount of items will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.\n   */\n  initialItemCount?: number;\n  /**\n   * If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.\n   */\n  horizontal?: boolean;\n  /**\n   * Customized element type for scrollable element. This element will get {@link CustomWindowComponentProps} as props.\n   * @defaultValue {@link Window}\n   */\n  element?: CustomWindowComponent;\n  /**\n   * Customized element type for item element. This element will get {@link CustomItemComponentProps} as props.\n   * @defaultValue \"div\"\n   */\n  itemElement?: CustomItemComponentOrElement;\n  /**\n   * Callback invoked when scrolling stops.\n   */\n  onScrollStop?: () => void;\n  /**\n   * Callback invoked when visible items range changes.\n   */\n  onRangeChange?: (payload: {\n    /**\n     * The start index of viewable items.\n     */\n    start: number;\n    /**\n     * The end index of viewable items.\n     */\n    end: number;\n    /**\n     * The total count of items.\n     */\n    count: number;\n  }) => void;\n}\n\n/**\n * Virtualized list component controlled by the window scrolling. See {@link WVListProps}.\n */\nexport const WVList = ({\n  children,\n  overscan = 4,\n  initialItemSize,\n  initialItemCount,\n  horizontal: horizontalProp,\n  element: Window = DefaultWindow,\n  itemElement = \"div\",\n  onScrollStop: onScrollStopProp,\n  onRangeChange: onRangeChangeProp,\n  ...windowAttrs\n}: WVListProps): ReactElement => {\n  // Memoize element array\n  const elements = useMemo(() => flattenChildren(children), [children]);\n  const count = elements.length;\n\n  const onScrollStop = useRefWithUpdate(onScrollStopProp);\n\n  const [scrolling, setScrolling] = useState(false);\n  const [store, resizer, scroller, isHorizontal] = useStatic(() => {\n    const _isHorizontal = !!horizontalProp;\n    const _store = createVirtualStore(\n      count,\n      initialItemSize,\n      initialItemCount,\n      false,\n      (isScrolling) => {\n        setScrolling(isScrolling);\n        if (!isScrolling) {\n          onScrollStop[refKey] && onScrollStop[refKey]();\n        }\n      }\n    );\n\n    return [\n      _store,\n      createWindowResizer(_store, _isHorizontal),\n      createWindowScroller(_store, _isHorizontal),\n      _isHorizontal,\n    ];\n  });\n  // The elements length and cached items length are different just after element is added/removed.\n  store._updateCacheLength(count);\n\n  const [startIndex, endIndex] = useSelector(store, store._getRange);\n  const jumpCount = useSelector(store, store._getJumpCount);\n  const scrollSize = useSelector(store, store._getCorrectedScrollSize, true);\n  const rootRef = useRef<HTMLDivElement>(null);\n\n  useIsomorphicLayoutEffect(() => {\n    const root = rootRef[refKey]!;\n    const unobserve = resizer._observeRoot(root);\n    const cleanup = scroller._initRoot(root);\n    return () => {\n      unobserve();\n      cleanup();\n    };\n  }, []);\n\n  useIsomorphicLayoutEffect(() => {\n    const jump = store._flushJump();\n    if (!jump) return;\n\n    scroller._fixScrollJump(jump);\n  }, [jumpCount]);\n\n  useEffect(() => {\n    if (!onRangeChangeProp) return;\n\n    onRangeChangeProp({\n      start: startIndex,\n      end: endIndex,\n      count,\n    });\n  }, [startIndex, endIndex]);\n\n  const startIndexWithMargin = max(startIndex - overscan, 0);\n  const endIndexWithMargin = min(endIndex + overscan, count - 1);\n  const items = useMemo(() => {\n    const res: ReactElement[] = [];\n    for (let i = startIndexWithMargin; i <= endIndexWithMargin; i++) {\n      const e = elements[i];\n      // This can be undefined when items are removed\n      if (exists(e)) {\n        res.push(\n          <ListItem\n            key={(e as MayHaveKey).key || i}\n            _resizer={resizer}\n            _store={store}\n            _index={i}\n            _element={itemElement as \"div\"}\n            _children={e}\n            _isHorizontal={isHorizontal}\n            _isRtl={false}\n          />\n        );\n      }\n    }\n    return res;\n  }, [elements, startIndexWithMargin, endIndexWithMargin]);\n\n  return (\n    <Window\n      ref={rootRef}\n      width={isHorizontal ? scrollSize : undefined}\n      height={isHorizontal ? undefined : scrollSize}\n      scrolling={scrolling}\n      attrs={useMemo(\n        () => ({\n          ...windowAttrs,\n          style: {\n            overflow: \"visible\",\n            display: isHorizontal ? \"inline-block\" : \"block\",\n            // transform: \"translate3d(0px, 0px, 0px)\",\n            // willChange: \"scroll-position\",\n            // backfaceVisibility: \"hidden\",\n            // https://github.com/bvaughn/react-window/issues/395\n            // willChange: \"transform\",\n            width: isHorizontal ? \"auto\" : \"100%\",\n            height: isHorizontal ? \"100%\" : \"auto\",\n            padding: 0,\n            margin: 0,\n            ...windowAttrs.style,\n          },\n        }),\n        values(windowAttrs)\n      )}\n    >\n      {items}\n    </Window>\n  );\n};\n"],"names":["WVList","children","overscan","initialItemSize","initialItemCount","horizontalProp","Window","DefaultWindow","itemElement","onScrollStopProp","onRangeChangeProp","windowAttrs","elements","useMemo","flattenChildren","count","onScrollStop","useRefWithUpdate","scrolling","setScrolling","useState","store","resizer","scroller","isHorizontal","useStatic","_isHorizontal","_store","createVirtualStore","isScrolling","refKey","createWindowResizer","createWindowScroller","startIndex","endIndex","useSelector","jumpCount","scrollSize","rootRef","useRef","useIsomorphicLayoutEffect","root","unobserve","cleanup","jump","useEffect","startIndexWithMargin","max","endIndexWithMargin","min","items","res","i","e","exists","jsx","ListItem","values"],"mappings":"kWA6FO,MAAAA,EAAA,CAAA,CAAgB,SAAAC,EACrB,SAAAC,EAAA,EACW,gBAAAC,EACX,iBAAAC,EACA,WAAAC,EACY,QAAAC,EAAAC,GACM,YAAAC,EAAA,MACJ,aAAAC,EACA,cAAAC,EACC,GAAAC,CAEjB,IAAA,CAEE,MAAAC,EAAAC,EAAAA,QAAA,IAAAC,GAAAb,CAAA,EAAA,CAAAA,CAAA,CAAA,EACAc,EAAAH,EAAA,OAEAI,EAAAC,GAAAR,CAAA,EAEA,CAAAS,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACA,CAAAC,EAAAC,EAAAC,EAAAC,CAAA,EAAAC,GAAA,IAAA,CACE,MAAAC,EAAA,CAAA,CAAArB,EACAsB,EAAAC,GAAeb,EACbZ,EACAC,EACA,GACAyB,GAAA,CAEEV,EAAAU,CAAA,EACAA,GACEb,EAAAc,CAAA,GAAAd,EAAAc,CAAA,EAAA,CACF,CACF,EAGF,MAAA,CAAOH,EACLI,GAAAJ,EAAAD,CAAA,EACyCM,GAAAL,EAAAD,CAAA,EACCA,CAC1C,CACF,CAAA,EAGFL,EAAA,mBAAAN,CAAA,EAEA,KAAA,CAAAkB,EAAAC,CAAA,EAAAC,EAAAd,EAAAA,EAAA,SAAA,EACAe,EAAAD,EAAAd,EAAAA,EAAA,aAAA,EACAgB,EAAAF,EAAAd,EAAAA,EAAA,wBAAA,EAAA,EACAiB,EAAAC,SAAA,IAAA,EAEAC,EAAA,IAAA,CACE,MAAAC,EAAAH,EAAAR,CAAA,EACAY,EAAApB,EAAA,aAAAmB,CAAA,EACAE,EAAApB,EAAA,UAAAkB,CAAA,EACA,MAAA,IAAA,CACEC,IACAC,GAAQ,CACV,EAAA,CAAA,CAAA,EAGFH,EAAA,IAAA,CACE,MAAAI,EAAAvB,EAAA,aACAuB,GAEArB,EAAA,eAAAqB,CAAA,CAA4B,EAAA,CAAAR,CAAA,CAAA,EAG9BS,EAAAA,UAAA,IAAA,CACEnC,GAEAA,EAAA,CAAkB,MAAAuB,EACT,IAAAC,EACF,MAAAnB,CACL,CAAA,CACD,EAAA,CAAAkB,EAAAC,CAAA,CAAA,EAGH,MAAAY,EAAAC,GAAAd,EAAA/B,EAAA,CAAA,EACA8C,EAAAC,GAAAf,EAAAhC,EAAAa,EAAA,CAAA,EACAmC,EAAArC,EAAAA,QAAA,IAAA,CACE,MAAAsC,EAAA,CAAA,EACA,QAAAC,EAAAN,EAAAM,GAAAJ,EAAAI,IAAA,CACE,MAAAC,EAAAzC,EAAAwC,CAAA,EAEAE,GAAAD,CAAA,GACEF,EAAA,KAAII,EACFC,GAAC,CAAA,SAAAlC,EAEW,OAAAD,EACF,OAAA+B,EACA,SAAA5C,EACE,UAAA6C,EACC,cAAA7B,EACI,OAAA,EACP,EAAA6B,EAAA,KAAAD,CAPsB,CAQhC,CAEJ,CAEF,OAAAD,CAAO,EAAA,CAAAvC,EAAAkC,EAAAE,CAAA,CAAA,EAGT,OAAAO,EACEjD,EAAC,CAAA,IAAAgC,EACM,MAAAd,EAAAa,EAAA,OAC8B,OAAAb,EAAA,OAAAa,EACA,UAAAnB,EACnC,MAAAL,EAAA,QACO,KAAA,CACE,GAAAF,EACF,MAAA,CACI,SAAA,UACK,QAAAa,EAAA,eAAA,QAC+B,MAAAA,EAAA,OAAA,OAMV,OAAAA,EAAA,OAAA,OACC,QAAA,EACvB,OAAA,EACD,GAAAb,EAAA,KACO,CACjB,GACF8C,GAAA9C,CAAA,CACkB,EACpB,SAAAuC,CAEC,CAAA,CAGP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}