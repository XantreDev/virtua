import{j as L}from"./jsx-runtime-c3d7f245.js";import{r as s}from"./index-c6dae603.js";import{f as G,u as T,a as W,A as F,b as u,c as x,r as l,q as K,e as Z,v as Q,V as X,d as $,g as ee,s as te,p as oe,U as ne,j as k,k as se,l as re,S as le,m as ie,n as ae}from"./Viewport-578ea796.js";import{L as ce}from"./ListItem-60c2fe4f.js";import{r as ue}from"./index-eb008d06.js";const q=s.forwardRef(({children:d,overscan:g=4,initialItemSize:y,initialItemCount:O,shift:D,horizontal:H,mode:b,cache:N,components:{Root:j=X,Item:A="div"}=$,onScroll:P,onScrollStop:U,onRangeChange:v,...m},M)=>{const f=s.useMemo(()=>G(d),[d]),i=f.length,I=T(P),C=T(U),[e,V,r,a,J]=W(()=>{const t=!!H,o=b==="rtl",n=ee(ue.flushSync,i,y,O,N,b==="reverse",!y);return[n,te(n,t),oe(n,t,o),t,o]});i!==e._getItemsLength()&&e._update(F,[i,D]);const[p,h]=u(e,e._getRange,ne+k),_=u(e,e._getScrollDirection,se),Y=u(e,e._getJumpCount,re),z=u(e,e._getCorrectedScrollSize,k,!0),R=s.useRef(null),S=_!==le;x(()=>{const t=R[l],o=V._observeRoot(t),n=r._initRoot(t),c=e._subscribe(K,()=>{I[l]&&I[l](e._getScrollOffset())});return()=>{o(),n(),c()}},[]),x(()=>{const t=e._flushJump();t&&r._fixScrollJump(t)},[Y]),s.useEffect(()=>{S||C[l]&&C[l]()},[S]),s.useEffect(()=>{v&&v(p,h)},[p,h]),s.useImperativeHandle(M,()=>({get cache(){return e._getCache()},get scrollOffset(){return e._getScrollOffset()},get scrollSize(){return e._getCorrectedScrollSize()},get viewportSize(){return e._getViewportSize()},scrollToIndex:r._scrollToIndex,scrollTo:r._scrollTo,scrollBy:r._scrollBy}),[]);const E=ie(p,g,_),w=ae(h,g,_,i),B=s.useMemo(()=>{const t=[];for(let o=E;o<=w;o++){const n=f[o],c=n.key;t.push(L(ce,{_resizer:V,_store:e,_index:o,_element:A,_children:n,_isHorizontal:a,_isRtl:J},Z(c)?c:"_"+o))}return t},[f,E,w]);return L(j,{ref:R,width:a?z:void 0,height:a?void 0:z,scrolling:S,attrs:s.useMemo(()=>({...m,style:{overflow:"auto",display:a?"inline-block":"block",contain:"strict",width:"100%",height:"100%",...m.style}}),Q(m)),children:B})});try{q.displayName="VList",q.__docgenInfo={description:"Virtualized list component. See {@link VListProps} and {@link VListHandle}.",displayName:"VList",props:{children:{defaultValue:null,description:"Elements rendered by this component.",name:"children",required:!0,type:{name:"ReactNode"}},overscan:{defaultValue:{value:"4"},description:`Number of items to render above/below the visible bounds of the list. You can increase to avoid showing blank items in fast scrolling.
@defaultValue 4`,name:"overscan",required:!1,type:{name:"number"}},initialItemSize:{defaultValue:null,description:`Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.

- If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.
- If set, you can opt out estimation and use the value as initial item size.`,name:"initialItemSize",required:!1,type:{name:"number"}},initialItemCount:{defaultValue:null,description:"If set, the specified amount of items will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.",name:"initialItemCount",required:!1,type:{name:"number"}},shift:{defaultValue:null,description:"While true is set, scroll position will be maintained from the end not usual start when items are shifted/unshifted. It is useful for reverse infinite scrolling.",name:"shift",required:!1,type:{name:"boolean"}},horizontal:{defaultValue:null,description:"If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.",name:"horizontal",required:!1,type:{name:"boolean"}},mode:{defaultValue:null,description:"Scroll modes that should be set in certain situations.\n\n- `reverse`: This mode will adjust some styles to be suitable for bottom-to-top scrolling.\n- `rtl`: You have to set this mode if you use this component under `direction: rtl` style.",name:"mode",required:!1,type:{name:"enum",value:[{value:'"reverse"'},{value:'"rtl"'}]}},cache:{defaultValue:null,description:"You can restore cache by passing a {@link CacheSnapshot} on mount. This is useful when you want to restore scroll position after navigation. The snapshot can be obtained from {@link VListHandle.cache}.",name:"cache",required:!1,type:{name:"CacheSnapshot"}},components:{defaultValue:null,description:"Customized components for advanced usage.",name:"components",required:!1,type:{name:"{ Root?: ForwardRefExoticComponent<CustomViewportComponentProps & RefAttributes<any>>; Item?: CustomItemComponentOrElement; }"}},onScroll:{defaultValue:null,description:`Callback invoked whenever scroll offset changes.
@param offset Current scrollTop or scrollLeft.`,name:"onScroll",required:!1,type:{name:"(offset: number) => void"}},onScrollStop:{defaultValue:null,description:"Callback invoked when scrolling stops.",name:"onScrollStop",required:!1,type:{name:"() => void"}},onRangeChange:{defaultValue:null,description:"Callback invoked when visible items range changes.",name:"onRangeChange",required:!1,type:{name:"(startIndex: number, endIndex: number) => void"}}}}}catch{}export{q as V};
//# sourceMappingURL=VList-1cba3adf.js.map
