import{j as E}from"./jsx-runtime-c3d7f245.js";import{r as s}from"./index-c6dae603.js";import{f as A,u as w,a as G,b as c,c as T,r as a,U as B,e as D,v as F,V as K,d as W,g as Z,s as Q,q as X,S as $,j as ee,k as te,l as oe,m as ne,n as se}from"./Viewport-2be85f8f.js";import{L as re}from"./ListItem-969e51fe.js";const k=s.forwardRef(({children:u,overscan:_=4,initialItemSize:g,initialItemCount:x,horizontal:q,mode:b,cache:O,components:{Root:N=K,Item:j="div"}=W,onScroll:H,onScrollStop:J,onRangeChange:y,...d},M)=>{const m=s.useMemo(()=>A(u),[u]),f=m.length,v=w(H),C=w(J),[e,I,r,l,U]=G(()=>{const t=!!q,o=b==="rtl",n=Z(f,g,x,O,b==="reverse",!g);return[n,Q(n,t),X(n,t,o),t,o]});e._updateCacheLength(f);const[p,h]=c(e,e._getRange,$),S=c(e,e._getIsScrolling,ee),P=c(e,e._getJumpCount,te),V=c(e,e._getCorrectedScrollSize,oe,!0),z=s.useRef(null);T(()=>{const t=z[a],o=I._observeRoot(t),n=r._initRoot(t),i=e._subscribe(B,()=>{v[a]&&v[a](e._getScrollOffset())});return()=>{o(),n(),i()}},[]),T(()=>{const t=e._flushJump();t&&r._fixScrollJump(t)},[P]),s.useEffect(()=>{S||C[a]&&C[a]()},[S]),s.useEffect(()=>{y&&y(p,h)},[p,h]),s.useImperativeHandle(M,()=>({get cache(){return e._getCache()},get scrollOffset(){return e._getScrollOffset()},get scrollSize(){return r._getActualScrollSize()},get viewportSize(){return e._getViewportSize()},scrollToIndex:r._scrollToIndex,scrollTo:r._scrollTo,scrollBy(t){r._scrollTo(e._getScrollOffset()+t)}}),[]);const R=ne(p-_,0),L=se(h+_,f-1),Y=s.useMemo(()=>{const t=[];for(let o=R;o<=L;o++){const n=m[o],i=n.key;t.push(E(re,{_resizer:I,_store:e,_index:o,_element:j,_children:n,_isHorizontal:l,_isRtl:U},D(i)?i:"_"+o))}return t},[m,R,L]);return E(N,{ref:z,width:l?V:void 0,height:l?void 0:V,scrolling:S,attrs:s.useMemo(()=>({...d,style:{overflow:l?"auto hidden":"hidden auto",display:l?"inline-block":"block",contain:"strict",width:"100%",height:"100%",padding:0,margin:0,...d.style}}),F(d)),children:Y})});try{k.displayName="VList",k.__docgenInfo={description:"Virtualized list component. See {@link VListProps} and {@link VListHandle}.",displayName:"VList",props:{children:{defaultValue:null,description:"Elements rendered by this component.",name:"children",required:!0,type:{name:"ReactNode"}},overscan:{defaultValue:{value:"4"},description:`Number of items to render above/below the visible bounds of the list. You can increase to avoid showing blank items in fast scrolling.
@defaultValue 4`,name:"overscan",required:!1,type:{name:"number"}},initialItemSize:{defaultValue:null,description:`Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.

- If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.
- If set, you can opt out estimation and use the value as initial item size.`,name:"initialItemSize",required:!1,type:{name:"number"}},initialItemCount:{defaultValue:null,description:"If set, the specified amount of items will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.",name:"initialItemCount",required:!1,type:{name:"number"}},horizontal:{defaultValue:null,description:"If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.",name:"horizontal",required:!1,type:{name:"boolean"}},mode:{defaultValue:null,description:"Scroll modes that should be set in certain situations.\n\n- `reverse`: This mode will adjust some styles to be suitable for bottom-to-top scrolling.\n- `rtl`: You have to set this mode if you use this component under `direction: rtl` style.",name:"mode",required:!1,type:{name:"enum",value:[{value:'"reverse"'},{value:'"rtl"'}]}},cache:{defaultValue:null,description:"You can restore cache by passing a {@link CacheSnapshot} on mount. This is useful when you want to restore scroll position after navigation. The snapshot can be obtained from {@link VListHandle.cache}.",name:"cache",required:!1,type:{name:"CacheSnapshot"}},components:{defaultValue:null,description:"Customized components for advanced usage.",name:"components",required:!1,type:{name:"{ Root?: ForwardRefExoticComponent<CustomViewportComponentProps & RefAttributes<any>>; Item?: CustomItemComponentOrElement; }"}},onScroll:{defaultValue:null,description:`Callback invoked whenever scroll offset changes.
@param offset Current scrollTop or scrollLeft.`,name:"onScroll",required:!1,type:{name:"(offset: number) => void"}},onScrollStop:{defaultValue:null,description:"Callback invoked when scrolling stops.",name:"onScrollStop",required:!1,type:{name:"() => void"}},onRangeChange:{defaultValue:null,description:"Callback invoked when visible items range changes.",name:"onRangeChange",required:!1,type:{name:"(startIndex: number, endIndex: number) => void"}}}}}catch{}export{k as V};
//# sourceMappingURL=VList-5eaca43a.js.map
