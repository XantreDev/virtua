{"version":3,"file":"Viewport-35aa249e.js","sources":["../../src/core/utils.ts","../../src/core/cache.ts","../../src/core/store.ts","../../src/react/useIsomorphicLayoutEffect.ts","../../src/react/utils.ts","../../src/react/useLatestRef.ts","../../src/react/useSelector.ts","../../src/core/environment.ts","../../src/core/scroller.ts","../../src/react/useStatic.ts","../../src/core/resizer.ts","../../src/react/Viewport.tsx"],"sourcesContent":["export const min = Math.min;\nexport const max = Math.max;\nexport const abs = Math.abs;\nexport const now = Date.now;\nexport const values = Object.values;\nexport const timeout = setTimeout;\n\nexport const clamp = (\n  value: number,\n  minValue: number,\n  maxValue: number\n): number => min(maxValue, max(minValue, value));\n\nexport const exists = <T>(v: T): v is Exclude<T, null | undefined> => v != null;\n\nexport const median = (arr: number[]): number => {\n  const s = [...arr].sort((a, b) => a - b);\n  const mid = (arr.length / 2) | 0;\n  return s.length % 2 === 0 ? (s[mid - 1]! + s[mid]!) / 2 : s[mid]!;\n};\n\nexport const debounce = <T extends (...args: any[]) => void>(\n  fn: T,\n  ms: number\n) => {\n  let id: NodeJS.Timeout | undefined | null;\n\n  const cancel = () => {\n    if (exists(id)) {\n      clearTimeout(id);\n    }\n  };\n  const debouncedFn = () => {\n    cancel();\n    id = timeout(() => {\n      id = null;\n      fn();\n    }, ms);\n  };\n  debouncedFn._cancel = cancel;\n  return debouncedFn;\n};\n\nexport const throttle = <T extends (...args: any[]) => void>(\n  fn: T,\n  ms: number\n) => {\n  let time = now() - ms;\n  return (...args: Parameters<T>) => {\n    const n = now();\n    if (time + ms < n) {\n      time = n;\n      fn(...args);\n    }\n  };\n};\n\nexport const once = <F extends (...args: any[]) => any>(fn: F): F => {\n  let called: undefined | boolean;\n  let cache: ReturnType<F>;\n\n  return ((...args) => {\n    if (!called) {\n      called = true;\n      cache = fn(...args);\n    }\n    return cache;\n  }) as F;\n};\n","import type { DeepReadonly, Writeable } from \"./types\";\nimport { clamp, median, min } from \"./utils\";\n\nexport const UNCACHED = -1;\n\nexport type Cache = DeepReadonly<{\n  _defaultItemSize: number;\n  _length: number;\n  _sizes: number[];\n  _measuredOffsetIndex: number;\n  _offsets: number[];\n}>;\n\nexport const getItemSize = (cache: Cache, index: number): number => {\n  const size = cache._sizes[index]!;\n  return size === UNCACHED ? cache._defaultItemSize : size;\n};\n\nexport const setItemSize = (\n  cache: Writeable<Cache>,\n  index: number,\n  size: number\n): boolean => {\n  const isInitialMeasurement = cache._sizes[index] === UNCACHED;\n  cache._sizes[index] = size;\n  // mark as dirty\n  cache._measuredOffsetIndex = min(index, cache._measuredOffsetIndex);\n  return isInitialMeasurement;\n};\n\nexport const computeOffset = (\n  cache: Writeable<Cache>,\n  index: number\n): number => {\n  if (!cache._length) return 0;\n  if (cache._measuredOffsetIndex >= index) {\n    return cache._offsets[index]!;\n  }\n\n  let i = cache._measuredOffsetIndex;\n  let top = cache._offsets[i]!;\n  while (i < index) {\n    top += getItemSize(cache, i);\n    cache._offsets[++i] = top;\n  }\n  // mark as measured\n  cache._measuredOffsetIndex = index;\n  return top;\n};\n\nexport const computeTotalSize = (cache: Writeable<Cache>): number => {\n  if (!cache._length) return 0;\n  return (\n    computeOffset(cache, cache._length - 1) +\n    getItemSize(cache, cache._length - 1)\n  );\n};\n\nexport const findIndex = (\n  cache: Cache,\n  i: number,\n  distance: number\n): number => {\n  let sum = 0;\n  if (distance >= 0) {\n    // search forward\n    while (i < cache._length - 1) {\n      const h = getItemSize(cache, i++);\n      if ((sum += h) >= distance) {\n        if (sum - h / 2 >= distance) {\n          i--;\n        }\n        break;\n      }\n    }\n  } else {\n    // search backward\n    while (i > 0) {\n      const h = getItemSize(cache, --i);\n      if ((sum -= h) <= distance) {\n        if (sum + h / 2 < distance) {\n          i++;\n        }\n        break;\n      }\n    }\n  }\n\n  return clamp(i, 0, cache._length - 1);\n};\n\nexport const findStartIndexWithOffset = (\n  cache: Writeable<Cache>,\n  offset: number,\n  initialIndex: number\n): number => {\n  return findIndex(\n    cache,\n    initialIndex,\n    offset - computeOffset(cache, initialIndex)\n  );\n};\n\nexport const hasUnmeasuredItemsInRange = (\n  cache: Cache,\n  startIndex: number,\n  endIndex: number\n): boolean => {\n  return cache._sizes.slice(startIndex, endIndex + 1).includes(UNCACHED);\n};\n\nexport const estimateDefaultItemSize = (cache: Writeable<Cache>) => {\n  const measuredSizes = cache._sizes.filter((s) => s !== UNCACHED);\n  // This function will be called after measurement so measured size array must be longer than 0\n  const startItemSize = measuredSizes[0]!;\n\n  cache._defaultItemSize = measuredSizes.every((s) => s === startItemSize)\n    ? // Maybe a fixed size array\n      startItemSize\n    : // Maybe a variable size array\n      median(measuredSizes);\n};\n\nconst appendCache = (\n  cache: Writeable<Cache>,\n  length: number,\n  prepend?: boolean\n) => {\n  const key = prepend ? \"unshift\" : \"push\";\n  for (let i = cache._length; i < length; i++) {\n    cache._sizes[key](UNCACHED);\n    // first offset must be 0\n    cache._offsets.push(i === 0 ? 0 : UNCACHED);\n  }\n  cache._length = length;\n};\n\nexport const initCache = (length: number, itemSize: number): Cache => {\n  const cache: Cache = {\n    _defaultItemSize: itemSize,\n    _length: 0,\n    _measuredOffsetIndex: 0,\n    _sizes: [],\n    _offsets: [],\n  };\n  appendCache(cache as Writeable<Cache>, length);\n  return cache;\n};\n\nexport const updateCacheLength = (\n  cache: Writeable<Cache>,\n  length: number,\n  isShift?: boolean\n): [number, boolean] => {\n  const diff = length - cache._length;\n\n  const isRemove = diff < 0;\n  let shift: number;\n  if (isRemove) {\n    // Removed\n    shift = (\n      isShift ? cache._sizes.splice(0, -diff) : cache._sizes.splice(diff)\n    ).reduce(\n      (acc, removed) =>\n        acc + (removed === UNCACHED ? cache._defaultItemSize : removed),\n      0\n    );\n    cache._offsets.splice(diff);\n  } else {\n    // Added\n    shift = cache._defaultItemSize * diff;\n    appendCache(cache, cache._length + diff, isShift);\n  }\n\n  cache._measuredOffsetIndex = isShift\n    ? // Discard cache for now\n      0\n    : // measuredOffsetIndex shouldn't be less than 0 because it makes scrollSize NaN and cause infinite rerender.\n      // https://github.com/inokawa/virtua/pull/160\n      clamp(length - 1, 0, cache._measuredOffsetIndex);\n  cache._length = length;\n  return [shift, isRemove];\n};\n","import {\n  findStartIndexWithOffset,\n  initCache,\n  getItemSize,\n  computeTotalSize,\n  findIndex as findEndIndex,\n  computeOffset as computeStartOffset,\n  Cache,\n  UNCACHED,\n  setItemSize,\n  hasUnmeasuredItemsInRange,\n  estimateDefaultItemSize,\n  updateCacheLength,\n} from \"./cache\";\nimport type { CacheSnapshot, Writeable } from \"./types\";\nimport { abs, clamp, max, min } from \"./utils\";\n\nexport type ScrollJump = Readonly<number>;\nexport type ItemResize = Readonly<[index: number, size: number]>;\ntype ItemsRange = Readonly<[startIndex: number, endIndex: number]>;\n\nconst calculateJump = (cache: Cache, items: readonly ItemResize[]): number => {\n  return items.reduce((acc, [index, size]) => {\n    return acc + (size - getItemSize(cache, index));\n  }, 0);\n};\n\n// Scroll offset and sizes can have sub-pixel value if window.devicePixelRatio has decimal value\nconst SUBPIXEL_THRESHOLD = 1.5; // 0.5 * 3\n\nexport const SCROLL_IDLE = 0;\nexport const SCROLL_DOWN = 1;\nexport const SCROLL_UP = 2;\ntype ScrollDirection =\n  | typeof SCROLL_IDLE\n  | typeof SCROLL_DOWN\n  | typeof SCROLL_UP;\n\nexport const ACTION_ITEM_RESIZE = 1;\nexport const ACTION_VIEWPORT_RESIZE = 2;\nexport const ACTION_ITEMS_LENGTH_CHANGE = 3;\nexport const ACTION_SCROLL = 4;\nexport const ACTION_BEFORE_MANUAL_SCROLL = 5;\nexport const ACTION_SCROLL_END = 6;\nexport const ACTION_MANUAL_SCROLL = 7;\n\ntype Actions =\n  | [type: typeof ACTION_ITEM_RESIZE, entries: ItemResize[]]\n  | [type: typeof ACTION_VIEWPORT_RESIZE, size: number]\n  | [\n      type: typeof ACTION_ITEMS_LENGTH_CHANGE,\n      arg: [length: number, isShift?: boolean | undefined]\n    ]\n  | [type: typeof ACTION_SCROLL, offset: number]\n  | [type: typeof ACTION_BEFORE_MANUAL_SCROLL, offset: number]\n  | [type: typeof ACTION_SCROLL_END, dummy?: void]\n  | [type: typeof ACTION_MANUAL_SCROLL, dummy?: void];\n\ntype Subscriber = (sync?: boolean) => void;\n\nexport const UPDATE_SCROLL = 0b00001;\nexport const UPDATE_SIZE = 0b00010;\nexport const UPDATE_JUMP = 0b00100;\nexport const UPDATE_IS_SCROLLING = 0b01000;\nexport const UPDATE_SCROLL_WITH_EVENT = 0b10000;\n\nexport type VirtualStore = {\n  _getCache(): CacheSnapshot;\n  _getRange(): ItemsRange;\n  _isUnmeasuredItem(index: number): boolean;\n  _hasUnmeasuredItemsInTargetViewport(offset: number): boolean;\n  _getItemOffset(index: number): number;\n  _getItemSize(index: number): number;\n  _getItemsLength(): number;\n  _getScrollOffset(): number;\n  _getScrollOffsetMax(): number;\n  _getIsScrolling(): boolean;\n  _getViewportSize(): number;\n  _getCorrectedScrollSize(): number;\n  _getJumpCount(): number;\n  _flushJump(): ScrollJump;\n  _subscribe(target: number, cb: Subscriber): () => void;\n  _update(...action: Actions): void;\n};\n\nexport const createVirtualStore = (\n  elementsCount: number,\n  itemSize: number = 40,\n  initialItemCount: number = 0,\n  cache: Cache = initCache(elementsCount, itemSize),\n  isReverse?: boolean,\n  shouldAutoEstimateItemSize?: boolean\n): VirtualStore => {\n  let viewportSize = itemSize * max(initialItemCount - 1, 0);\n  let scrollOffset = 0;\n  let jumpCount = 0;\n  let jump: ScrollJump = 0;\n  let _scrollDirection: ScrollDirection = SCROLL_IDLE;\n  let _isShifting = false;\n  let _isManualScrolling = false;\n  let _resized = false;\n  let _prevRange: ItemsRange = [0, initialItemCount];\n\n  const subscribers = new Set<[number, Subscriber]>();\n  const getScrollSize = (): number =>\n    computeTotalSize(cache as Writeable<Cache>);\n  const getScrollOffsetMax = () => getScrollSize() - viewportSize;\n\n  const clampScrollOffset = (value: number): number => {\n    // Scroll offset may exceed min or max especially in Safari's elastic scrolling.\n    return clamp(value, 0, getScrollOffsetMax());\n  };\n  const updateScrollDirection = (dir: ScrollDirection): boolean => {\n    const prev = _scrollDirection;\n    _scrollDirection = dir;\n\n    // Return true if scrolling is just started or stopped\n    return (\n      _scrollDirection !== prev &&\n      (_scrollDirection === SCROLL_IDLE || prev === SCROLL_IDLE)\n    );\n  };\n\n  return {\n    _getCache() {\n      return JSON.parse(JSON.stringify(cache)) as unknown as CacheSnapshot;\n    },\n    _getRange() {\n      const [prevStartIndex, prevEndIndex] = _prevRange;\n      const start = findStartIndexWithOffset(\n        cache as Writeable<Cache>,\n        scrollOffset,\n        // Clamp because prevStartIndex may exceed the limit when children decreased a lot after scrolling\n        min(prevStartIndex, cache._length - 1)\n      );\n      const end = findEndIndex(cache, start, viewportSize);\n      if (prevStartIndex === start && prevEndIndex === end) {\n        return _prevRange;\n      }\n      return (_prevRange = [start, end]);\n    },\n    _isUnmeasuredItem(index) {\n      return cache._sizes[index] === UNCACHED;\n    },\n    _hasUnmeasuredItemsInTargetViewport(offset) {\n      const startIndex = findStartIndexWithOffset(\n        cache as Writeable<Cache>,\n        offset,\n        _prevRange[0] // TODO binary search may be better here\n      );\n      return hasUnmeasuredItemsInRange(\n        cache,\n        max(0, startIndex - 1),\n        min(\n          cache._length - 1,\n          findEndIndex(cache, startIndex, viewportSize) + 1\n        )\n      );\n    },\n    _getItemOffset(index) {\n      const offset = computeStartOffset(cache as Writeable<Cache>, index);\n      if (isReverse) {\n        return offset + max(0, viewportSize - getScrollSize());\n      }\n      return offset;\n    },\n    _getItemSize(index) {\n      return getItemSize(cache, index);\n    },\n    _getItemsLength() {\n      return cache._length;\n    },\n    _getScrollOffset() {\n      return scrollOffset;\n    },\n    _getScrollOffsetMax: getScrollOffsetMax,\n    _getIsScrolling() {\n      return _scrollDirection !== SCROLL_IDLE;\n    },\n    _getViewportSize() {\n      return viewportSize;\n    },\n    _getCorrectedScrollSize() {\n      return max(getScrollSize(), viewportSize);\n    },\n    _getJumpCount() {\n      return jumpCount;\n    },\n    _flushJump() {\n      const prevJump = jump;\n      jump = 0;\n      return prevJump;\n    },\n    _subscribe(target, cb) {\n      const sub: [number, Subscriber] = [target, cb];\n      subscribers.add(sub);\n      return () => {\n        subscribers.delete(sub);\n      };\n    },\n    _update(type, payload): void {\n      let shouldSync: boolean | undefined;\n      let mutated = 0;\n\n      switch (type) {\n        case ACTION_ITEM_RESIZE: {\n          const updated = payload.filter(\n            ([index, size]) => cache._sizes[index] !== size\n          );\n          // Skip if all items are cached and not updated\n          if (!updated.length) {\n            break;\n          }\n\n          // Calculate jump\n          let diff = 0;\n          if (_isShifting || _isManualScrolling) {\n            // Should maintain visible position under specific situations\n\n            if (scrollOffset === 0) {\n              // Do nothing to stick to the start\n            } else if (\n              scrollOffset >\n              getScrollOffsetMax() - SUBPIXEL_THRESHOLD\n            ) {\n              // Keep end to stick to the end\n              diff = calculateJump(cache, updated);\n            } else {\n              const [startIndex] = _prevRange;\n              // Keep start at mid\n              diff = calculateJump(\n                cache,\n                updated.filter(([index]) => index < startIndex)\n              );\n            }\n          } else if (_scrollDirection === SCROLL_UP) {\n            // We can assume jumps occurred on the upper outside during reverse scrolling\n            diff = calculateJump(cache, updated);\n          } else {\n            // Do nothing\n          }\n          if (diff) {\n            jump = diff;\n            jumpCount++;\n            mutated += UPDATE_JUMP;\n          }\n\n          // Update item sizes\n          let isNewItemMeasured = false;\n          updated.forEach(([index, size]) => {\n            if (setItemSize(cache as Writeable<Cache>, index, size)) {\n              isNewItemMeasured = true;\n            }\n          });\n\n          // Estimate initial item size from measured sizes\n          if (\n            shouldAutoEstimateItemSize &&\n            isNewItemMeasured &&\n            // TODO support reverse scroll also\n            !scrollOffset\n          ) {\n            estimateDefaultItemSize(cache as Writeable<Cache>);\n          }\n          mutated += UPDATE_SIZE;\n          _resized = shouldSync = true;\n          break;\n        }\n        case ACTION_VIEWPORT_RESIZE: {\n          if (viewportSize !== payload) {\n            viewportSize = payload;\n            mutated = UPDATE_SIZE;\n          }\n          break;\n        }\n        case ACTION_ITEMS_LENGTH_CHANGE: {\n          if (payload[1]) {\n            // Calc distance before updating cache\n            const distanceToEnd = getScrollOffsetMax() - scrollOffset;\n\n            const [shift, isRemove] = updateCacheLength(\n              cache as Writeable<Cache>,\n              payload[0],\n              true\n            );\n            const diff = isRemove ? -min(shift, distanceToEnd) : shift;\n            jump += diff;\n            scrollOffset = clampScrollOffset(scrollOffset + diff);\n            jumpCount++;\n\n            mutated = UPDATE_SCROLL + UPDATE_JUMP;\n            _isShifting = true;\n          } else {\n            updateCacheLength(cache as Writeable<Cache>, payload[0]);\n          }\n          break;\n        }\n        case ACTION_SCROLL:\n        case ACTION_BEFORE_MANUAL_SCROLL: {\n          // Skip if offset is not changed\n          if (scrollOffset === payload) {\n            break;\n          }\n\n          if (type === ACTION_SCROLL) {\n            // Scrolling after resizing will be caused by jump compensation\n            const isJustResized = _resized;\n            _resized = false;\n\n            // Skip scroll direction detection just after resizing because it may result in the opposite direction.\n            // Scroll events are dispatched enough so it's ok to skip some of them.\n            if (\n              (_scrollDirection === SCROLL_IDLE || !isJustResized) &&\n              // Ignore until manual scrolling\n              !_isManualScrolling\n            ) {\n              if (\n                updateScrollDirection(\n                  scrollOffset > payload ? SCROLL_UP : SCROLL_DOWN\n                )\n              ) {\n                mutated += UPDATE_IS_SCROLLING;\n              }\n            }\n\n            // Ignore manual scroll because it may be called in useEffect/useLayoutEffect and cause the warn below.\n            // Warning: flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.\n            //\n            // Update synchronously if scrolled a lot\n            shouldSync = abs(scrollOffset - payload) > viewportSize;\n\n            mutated += UPDATE_SCROLL_WITH_EVENT;\n\n            if (!isJustResized) {\n              _isShifting = false;\n            }\n          }\n\n          scrollOffset = clampScrollOffset(payload);\n          mutated += UPDATE_SCROLL;\n          break;\n        }\n        case ACTION_SCROLL_END: {\n          if (updateScrollDirection(SCROLL_IDLE)) {\n            mutated = UPDATE_IS_SCROLLING;\n          }\n          _isShifting = _isManualScrolling = false;\n          break;\n        }\n        case ACTION_MANUAL_SCROLL: {\n          _isManualScrolling = true;\n          break;\n        }\n      }\n\n      if (mutated) {\n        subscribers.forEach(([target, cb]) => {\n          // Early return to skip React's computation\n          if (!(mutated & target)) {\n            return;\n          }\n          cb(shouldSync);\n        });\n      }\n    },\n  };\n};\n","import { useEffect, useLayoutEffect } from \"react\";\n\n// https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\nexport const useIsomorphicLayoutEffect =\n  typeof window !== \"undefined\" ? useLayoutEffect : useEffect;\n","import { ReactElement, ReactFragment, ReactNode } from \"react\";\nimport { exists } from \"../core/utils\";\n\nexport const refKey = \"current\";\n\nexport const emptyComponents = {};\n\ntype ItemElement = ReactElement | ReactFragment | string | number;\n\nconst forEach = (children: ReactNode, elements: ItemElement[]) => {\n  if (Array.isArray(children)) {\n    for (const c of children) {\n      forEach(c, elements);\n    }\n  } else if (!exists(children) || typeof children === \"boolean\") {\n    // filter out, that is the same as React.Children.toArray\n  } else {\n    elements.push(children);\n  }\n};\n\n// Replace React.Children.forEach with our tiny implementation.\n// In our usage, just flatten children array keeping element instances and their keys, React.Children is redundant and slow.\n//\n// - React.Children.toArray is slow because it clones element instance.\n// - React.Children.map is slow because it clones element instance.\n// - React.Children.forEach is slow because it escapes and modifies keys even if they are unused.\n//\n// And React.Children seems to be in maintenance mode so it's unlikely it would be improved and ported to older versions.\n// https://github.com/reactjs/rfcs/pull/61#issuecomment-584402735\nexport const flattenChildren = (children: ReactNode): ItemElement[] => {\n  const elements: ItemElement[] = [];\n  forEach(children, elements);\n  return elements;\n};\n\nexport type MayHaveKey = { key?: React.Key };\n","import { useRef } from \"react\";\nimport { useIsomorphicLayoutEffect } from \"./useIsomorphicLayoutEffect\";\nimport { refKey } from \"./utils\";\n\nexport const useLatestRef = <T>(value: T) => {\n  const ref = useRef<T>(value);\n\n  useIsomorphicLayoutEffect(() => {\n    ref[refKey] = value;\n  }, [value]);\n\n  return ref;\n};\n","import { useLayoutEffect, useState } from \"react\";\nimport { flushSync } from \"react-dom\";\nimport { useLatestRef } from \"./useLatestRef\";\nimport { refKey } from \"./utils\";\nimport {\n  UPDATE_IS_SCROLLING,\n  UPDATE_JUMP,\n  UPDATE_SCROLL,\n  UPDATE_SIZE,\n  VirtualStore,\n} from \"../core/store\";\n\nexport const SELECT_RANGE = UPDATE_SCROLL + UPDATE_SIZE;\nexport const SELECT_SCROLL_SIZE = UPDATE_SIZE;\nexport const SELECT_JUMP_COUNT = UPDATE_JUMP;\nexport const SELECT_IS_SCROLLING = UPDATE_IS_SCROLLING;\nexport const SELECT_ITEM = UPDATE_SIZE;\n\nexport const useSelector = <T>(\n  store: VirtualStore,\n  getSnapShot: () => T,\n  target: number,\n  shouldGetLatest?: boolean\n): T => {\n  const [state, setState] = useState(getSnapShot);\n  const getter = useLatestRef(getSnapShot);\n\n  useLayoutEffect(() => {\n    const update = () => {\n      setState(() => getter[refKey]());\n    };\n    return store._subscribe(target, (sync) => {\n      // TODO batch flushSync to remove shouldGetLatest argument if possible\n      // https://github.com/facebook/react/issues/25191\n      if (sync) {\n        flushSync(update);\n      } else {\n        update();\n      }\n    });\n  }, []);\n\n  // especially for sort of items\n  if (shouldGetLatest) {\n    const snap = getSnapShot();\n    if (state !== snap) {\n      setState(snap);\n    }\n  }\n  return state;\n};\n","import { once } from \"./utils\";\n\n// The scroll position may be negative value in rtl direction.\n//\n// left  right result\n// -100  0     true    spec compliant\n// 0     100   false   probably Chrome earlier than v85\n// https://github.com/othree/jquery.rtl-scroll-type\nexport const hasNegativeOffsetInRtl = /*#__PURE__*/ once(\n  (scrollable: HTMLElement) => {\n    const key = \"scrollLeft\";\n    const prev = scrollable[key];\n    scrollable[key] = 1;\n    // scrollLeft can be positive under some specific situations even if negative mode, so we use `<` for now.\n    const isNegative = scrollable[key] < 1;\n    scrollable[key] = prev;\n    return isNegative;\n  }\n);\n","import { hasNegativeOffsetInRtl } from \"./environment\";\nimport {\n  ACTION_SCROLL,\n  ACTION_BEFORE_MANUAL_SCROLL,\n  ScrollJump,\n  VirtualStore,\n  ACTION_SCROLL_END,\n  UPDATE_SIZE,\n  ACTION_MANUAL_SCROLL,\n} from \"./store\";\nimport { ScrollToIndexAlign } from \"./types\";\nimport { debounce, throttle, timeout, clamp } from \"./utils\";\n\n// Infer scroll state also from wheel events\n// Sometimes scroll events do not fire when frame dropped even if the visual have been already scrolled\nconst createOnWheel = (\n  store: VirtualStore,\n  isHorizontal: boolean,\n  onScrollStopped: () => void\n) => {\n  return throttle((e: WheelEvent) => {\n    if (!store._getIsScrolling()) {\n      // Scroll start should be detected with scroll event\n      return;\n    }\n    if (e.ctrlKey) {\n      // Probably a pinch-to-zoom gesture\n      return;\n    }\n    // Get delta before checking deltaMode for firefox behavior\n    // https://github.com/w3c/uievents/issues/181#issuecomment-392648065\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1392460#c34\n    if (isHorizontal ? e.deltaX : e.deltaY) {\n      const offset = store._getScrollOffset();\n      if (offset > 0 && offset < store._getScrollOffsetMax()) {\n        onScrollStopped();\n      }\n    }\n  }, 50);\n};\n\nexport type Scroller = {\n  _initRoot: (rootElement: HTMLElement) => () => void;\n  _getActualScrollSize: () => number;\n  _scrollTo: (offset: number) => void;\n  _scrollBy: (offset: number) => void;\n  _scrollToIndex: (index: number, align?: ScrollToIndexAlign) => void;\n  _fixScrollJump: (jump: ScrollJump) => void;\n};\n\nexport const createScroller = (\n  store: VirtualStore,\n  isHorizontal: boolean,\n  isRtl: boolean\n): Scroller => {\n  let rootElement: HTMLElement | undefined;\n  let scrollToQueue: [() => void, () => void] | undefined;\n  const scrollToKey = isHorizontal ? \"scrollLeft\" : \"scrollTop\";\n\n  const getActualScrollSize = (): number => {\n    if (!rootElement) return 0;\n    // Use element's scrollHeight/scrollWidth instead of stored scrollSize.\n    // This is because stored size may differ from the actual size, for example when a new item is added and not yet measured.\n    return isHorizontal ? rootElement.scrollWidth : rootElement.scrollHeight;\n  };\n  const normalizeOffset = (offset: number, diff?: boolean): number => {\n    if (isHorizontal && isRtl) {\n      if (hasNegativeOffsetInRtl(rootElement!)) {\n        return -offset;\n      } else {\n        return diff ? -offset : store._getScrollOffsetMax() - offset;\n      }\n    }\n    return offset;\n  };\n\n  const scrollManually = async (getOffset: () => number) => {\n    if (!rootElement) return;\n\n    const getTargetOffset = (): number => {\n      // Adjust if the offset is over the end, to get correct startIndex.\n      return clamp(\n        getOffset(),\n        0,\n        getActualScrollSize() - store._getViewportSize()\n      );\n    };\n\n    while (true) {\n      // Sync viewport to scroll destination\n      // In order to scroll to the correct position, mount the items and measure their sizes before scrolling.\n      const targetOffset = getTargetOffset();\n      store._update(ACTION_BEFORE_MANUAL_SCROLL, targetOffset);\n\n      if (!store._hasUnmeasuredItemsInTargetViewport(targetOffset)) {\n        break;\n      }\n\n      if (scrollToQueue) {\n        // Cancel waiting scrollTo\n        scrollToQueue[1]();\n      }\n\n      // Wait for the scroll destination items to be measured.\n      const unsubscribe = store._subscribe(UPDATE_SIZE, () => {\n        scrollToQueue && scrollToQueue[0]();\n      });\n      try {\n        // The measurement will be done asynchronously and the timing is not predictable so we use promise.\n        // For example, ResizeObserver may not fire when window is not visible.\n        await new Promise<void>((resolve, reject) => {\n          let resolved = false;\n\n          const resolveQueue = () => {\n            if (resolved) return;\n            resolved = true;\n            resolve();\n            scrollToQueue = undefined;\n          };\n          scrollToQueue = [resolveQueue, reject];\n\n          // In some specific situation with VGrid, the promise never resolved so we resolve it if timed out.\n          timeout(resolveQueue, 250);\n        });\n      } catch (e) {\n        // canceled\n        return;\n      } finally {\n        unsubscribe();\n      }\n    }\n\n    // Scroll with the updated value\n    rootElement[scrollToKey] = normalizeOffset(getTargetOffset());\n    store._update(ACTION_MANUAL_SCROLL);\n  };\n\n  return {\n    _initRoot(root) {\n      rootElement = root;\n\n      const syncViewportToScrollPosition = () => {\n        store._update(ACTION_SCROLL, normalizeOffset(root[scrollToKey]));\n      };\n\n      const onScrollStopped = debounce(() => {\n        // Check scroll position once just after scrolling stopped\n        syncViewportToScrollPosition();\n        store._update(ACTION_SCROLL_END);\n      }, 150);\n\n      const onScroll = () => {\n        syncViewportToScrollPosition();\n        onScrollStopped();\n      };\n\n      const onWheel = createOnWheel(store, isHorizontal, onScrollStopped);\n\n      root.addEventListener(\"scroll\", onScroll);\n      root.addEventListener(\"wheel\", onWheel, { passive: true });\n\n      return () => {\n        root.removeEventListener(\"scroll\", onScroll);\n        root.removeEventListener(\"wheel\", onWheel);\n        onScrollStopped._cancel();\n      };\n    },\n    _getActualScrollSize: getActualScrollSize,\n    _scrollTo(offset) {\n      scrollManually(() => offset);\n    },\n    _scrollBy(offset) {\n      offset += store._getScrollOffset();\n      scrollManually(() => offset);\n    },\n    _scrollToIndex(index, align) {\n      index = clamp(index, 0, store._getItemsLength() - 1);\n\n      scrollManually(\n        align === \"end\"\n          ? () =>\n              store._getItemOffset(index) +\n              store._getItemSize(index) -\n              store._getViewportSize()\n          : () => store._getItemOffset(index)\n      );\n    },\n    _fixScrollJump: (jump) => {\n      if (!rootElement) return;\n      rootElement[scrollToKey] += normalizeOffset(jump, true);\n    },\n  };\n};\n\nexport type WindowScroller = {\n  _initRoot: (rootElement: HTMLElement) => () => void;\n  _fixScrollJump: (jump: ScrollJump) => void;\n};\n\nexport const createWindowScroller = (\n  store: VirtualStore,\n  isHorizontal: boolean\n): WindowScroller => {\n  const scrollToKey = isHorizontal ? \"scrollX\" : \"scrollY\";\n  const offsetKey = isHorizontal ? \"offsetLeft\" : \"offsetTop\";\n\n  return {\n    _initRoot(rootElement) {\n      let visible = false;\n\n      const getOffsetToWindow = (node: HTMLElement, offset: number): number => {\n        const nodeOffset = offset + node[offsetKey];\n\n        const parent = node.offsetParent;\n        if (node === document.body || !parent) {\n          return nodeOffset;\n        }\n\n        return getOffsetToWindow(parent as HTMLElement, nodeOffset);\n      };\n\n      const syncViewportToScrollPosition = () => {\n        if (!visible) return;\n        store._update(\n          ACTION_SCROLL,\n          window[scrollToKey] - getOffsetToWindow(rootElement, 0)\n        );\n      };\n\n      const onScrollStopped = debounce(() => {\n        // Check scroll position once just after scrolling stopped\n        syncViewportToScrollPosition();\n        store._update(ACTION_SCROLL_END);\n      }, 150);\n\n      const onScroll = () => {\n        syncViewportToScrollPosition();\n        onScrollStopped();\n      };\n\n      const onWheel = createOnWheel(store, isHorizontal, onScrollStopped);\n\n      const io = new IntersectionObserver(([entry]) => {\n        visible = entry!.isIntersecting;\n      });\n      io.observe(rootElement);\n\n      window.addEventListener(\"scroll\", onScroll);\n      window.addEventListener(\"wheel\", onWheel, { passive: true });\n\n      return () => {\n        io.disconnect();\n        window.removeEventListener(\"scroll\", onScroll);\n        window.removeEventListener(\"wheel\", onWheel);\n        onScrollStopped._cancel();\n      };\n    },\n    _fixScrollJump: (jump) => {\n      // TODO support case two window scrollers exist in the same view\n      window.scrollBy(isHorizontal ? jump : 0, isHorizontal ? 0 : jump);\n    },\n  };\n};\n","import { useRef } from \"react\";\nimport { refKey } from \"./utils\";\n\nexport const useStatic = <T>(init: () => T): T => {\n  const ref = useRef<T>();\n  return ref[refKey] || (ref[refKey] = init());\n};\n","import {\n  ACTION_ITEM_RESIZE,\n  ACTION_VIEWPORT_RESIZE,\n  ItemResize,\n  VirtualStore,\n} from \"./store\";\nimport { exists, max, once } from \"./utils\";\n\nexport interface ListResizer {\n  _observeRoot(root: HTMLElement): () => void;\n  _observeItem(el: HTMLElement, i: number): () => void;\n}\n\nexport const createResizer = (\n  store: VirtualStore,\n  isHorizontal: boolean\n): ListResizer => {\n  let rootElement: HTMLElement | undefined;\n  const sizeKey = isHorizontal ? \"width\" : \"height\";\n  const mountedIndexes = new WeakMap<Element, number>();\n\n  // Initialize ResizeObserver lazily for SSR\n  const getResizeObserver = once(() => {\n    // https://www.w3.org/TR/resize-observer/#intro\n    return new ResizeObserver((entries) => {\n      const resizes: ItemResize[] = [];\n      for (const { target, contentRect } of entries) {\n        if (target === rootElement) {\n          store._update(ACTION_VIEWPORT_RESIZE, contentRect[sizeKey]);\n        } else {\n          const index = mountedIndexes.get(target);\n          if (exists(index)) {\n            resizes.push([index, contentRect[sizeKey]]);\n          }\n        }\n      }\n\n      if (resizes.length) {\n        store._update(ACTION_ITEM_RESIZE, resizes);\n      }\n    });\n  });\n\n  return {\n    _observeRoot(root: HTMLElement) {\n      rootElement = root;\n      const ro = getResizeObserver();\n      ro.observe(root);\n      return () => {\n        ro.disconnect();\n      };\n    },\n    _observeItem(el: HTMLElement, i: number) {\n      const ro = getResizeObserver();\n      mountedIndexes.set(el, i);\n      ro.observe(el);\n      return () => {\n        mountedIndexes.delete(el);\n        ro.unobserve(el);\n      };\n    },\n  };\n};\n\nexport const createWindowResizer = (\n  store: VirtualStore,\n  isHorizontal: boolean\n): ListResizer => {\n  const sizeKey = isHorizontal ? \"width\" : \"height\";\n  const windowSizeKey = isHorizontal ? \"innerWidth\" : \"innerHeight\";\n  const mountedIndexes = new WeakMap<Element, number>();\n\n  // Initialize ResizeObserver lazily for SSR\n  const getResizeObserver = once(() => {\n    // https://www.w3.org/TR/resize-observer/#intro\n    return new ResizeObserver((entries) => {\n      const resizes: ItemResize[] = [];\n      for (const { target, contentRect } of entries) {\n        const index = mountedIndexes.get(target);\n        if (exists(index)) {\n          resizes.push([index, contentRect[sizeKey]]);\n        }\n      }\n\n      if (resizes.length) {\n        store._update(ACTION_ITEM_RESIZE, resizes);\n      }\n    });\n  });\n\n  return {\n    _observeRoot() {\n      const cb = () => {\n        store._update(ACTION_VIEWPORT_RESIZE, window[windowSizeKey]);\n      };\n      window.addEventListener(\"resize\", cb);\n      cb();\n      return () => {\n        window.removeEventListener(\"resize\", cb);\n        getResizeObserver().disconnect();\n      };\n    },\n    _observeItem(el: HTMLElement, i: number) {\n      const ro = getResizeObserver();\n      mountedIndexes.set(el, i);\n      ro.observe(el);\n      return () => {\n        mountedIndexes.delete(el);\n        ro.unobserve(el);\n      };\n    },\n  };\n};\n\nexport const createGridResizer = (\n  vStore: VirtualStore,\n  hStore: VirtualStore\n) => {\n  let rootElement: HTMLElement | undefined;\n\n  const heightKey = \"height\";\n  const widthKey = \"width\";\n  const mountedIndexes = new WeakMap<\n    Element,\n    [rowIndex: number, colIndex: number]\n  >();\n\n  type CellSize = [height: number, width: number];\n  const maybeCachedRowIndexes = new Set<number>();\n  const maybeCachedColIndexes = new Set<number>();\n  const sizeCache = new Map<string, CellSize>();\n  const getKey = (rowIndex: number, colIndex: number): string =>\n    `${rowIndex}-${colIndex}`;\n\n  // Initialize ResizeObserver lazily for SSR\n  const getResizeObserver = once(() => {\n    // https://www.w3.org/TR/resize-observer/#intro\n    return new ResizeObserver((entries) => {\n      const resizedRows = new Set<number>();\n      const resizedCols = new Set<number>();\n      for (const { target, contentRect } of entries) {\n        if (target === rootElement) {\n          vStore._update(ACTION_VIEWPORT_RESIZE, contentRect[heightKey]);\n          hStore._update(ACTION_VIEWPORT_RESIZE, contentRect[widthKey]);\n        } else {\n          const cell = mountedIndexes.get(target);\n          if (cell) {\n            const [rowIndex, colIndex] = cell;\n            const key = getKey(rowIndex, colIndex);\n            const prevSize = sizeCache.get(key);\n            const size: CellSize = [\n              contentRect[heightKey],\n              contentRect[widthKey],\n            ];\n            let rowResized: boolean | undefined;\n            let colResized: boolean | undefined;\n            if (!prevSize) {\n              rowResized = colResized = true;\n            } else {\n              if (prevSize[0] !== size[0]) {\n                rowResized = true;\n              }\n              if (prevSize[1] !== size[1]) {\n                colResized = true;\n              }\n            }\n            if (rowResized) {\n              resizedRows.add(rowIndex);\n            }\n            if (colResized) {\n              resizedCols.add(colIndex);\n            }\n            if (rowResized || colResized) {\n              sizeCache.set(key, size);\n            }\n          }\n        }\n      }\n\n      if (resizedRows.size) {\n        const heightResizes: ItemResize[] = [];\n        resizedRows.forEach((rowIndex) => {\n          let maxHeight = 0;\n          maybeCachedColIndexes.forEach((colIndex) => {\n            const size = sizeCache.get(getKey(rowIndex, colIndex));\n            if (size) {\n              maxHeight = max(maxHeight, size[0]);\n            }\n          });\n          if (maxHeight) {\n            heightResizes.push([rowIndex, maxHeight]);\n          }\n        });\n        vStore._update(ACTION_ITEM_RESIZE, heightResizes);\n      }\n      if (resizedCols.size) {\n        const widthResizes: ItemResize[] = [];\n        resizedCols.forEach((colIndex) => {\n          let maxWidth = 0;\n          maybeCachedRowIndexes.forEach((rowIndex) => {\n            const size = sizeCache.get(getKey(rowIndex, colIndex));\n            if (size) {\n              maxWidth = max(maxWidth, size[1]);\n            }\n          });\n          if (maxWidth) {\n            widthResizes.push([colIndex, maxWidth]);\n          }\n        });\n        hStore._update(ACTION_ITEM_RESIZE, widthResizes);\n      }\n    });\n  });\n\n  return {\n    _observeRoot(root: HTMLElement) {\n      rootElement = root;\n      const ro = getResizeObserver();\n      ro.observe(root);\n      return () => {\n        ro.disconnect();\n      };\n    },\n    _observeItem(el: HTMLElement, rowIndex: number, colIndex: number) {\n      const ro = getResizeObserver();\n      mountedIndexes.set(el, [rowIndex, colIndex]);\n      maybeCachedRowIndexes.add(rowIndex);\n      maybeCachedColIndexes.add(colIndex);\n      ro.observe(el);\n      return () => {\n        mountedIndexes.delete(el);\n        ro.unobserve(el);\n      };\n    },\n  };\n};\n\nexport type GridResizer = ReturnType<typeof createGridResizer>;\n","import {\n  CSSProperties,\n  ReactElement,\n  ReactNode,\n  forwardRef,\n  useMemo,\n} from \"react\";\n\nexport type ViewportComponentAttributes = Pick<\n  React.HTMLAttributes<HTMLElement>,\n  \"className\" | \"style\" | \"id\" | \"role\" | \"tabIndex\"\n> &\n  React.AriaAttributes;\n\n/**\n * Props of customized scrollable component.\n */\nexport interface CustomViewportComponentProps {\n  /**\n   * Renderable item elements.\n   */\n  children: ReactNode;\n  /**\n   * Attributes that should be passed to the scrollable element.\n   */\n  attrs: ViewportComponentAttributes;\n  /**\n   * Total height of items. It's undefined if component is not vertically scrollable.\n   */\n  height: number | undefined;\n  /**\n   * Total width of items. It's undefined if component is not horizontally scrollable.\n   */\n  width: number | undefined;\n  /**\n   * Currently component is scrolling or not.\n   */\n  scrolling: boolean;\n}\n\nexport const Viewport = forwardRef<any, CustomViewportComponentProps>(\n  ({ children, attrs, width, height, scrolling }, ref): ReactElement => {\n    return (\n      <div ref={ref} {...attrs}>\n        <div\n          style={useMemo((): CSSProperties => {\n            return {\n              position: \"relative\",\n              visibility: \"hidden\",\n              width: width ?? \"100%\",\n              height: height ?? \"100%\",\n              pointerEvents: scrolling ? \"none\" : \"auto\",\n            };\n          }, [width, height, scrolling])}\n        >\n          {children}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport type CustomViewportComponent = typeof Viewport;\n"],"names":["min","max","abs","now","values","timeout","clamp","value","minValue","maxValue","exists","v","median","arr","s","a","b","mid","debounce","fn","ms","id","cancel","debouncedFn","throttle","time","args","n","once","called","cache","UNCACHED","getItemSize","index","size","setItemSize","isInitialMeasurement","computeOffset","i","top","computeTotalSize","findIndex","distance","sum","h","findStartIndexWithOffset","offset","initialIndex","hasUnmeasuredItemsInRange","startIndex","endIndex","estimateDefaultItemSize","measuredSizes","startItemSize","appendCache","length","prepend","key","initCache","itemSize","updateCacheLength","isShift","diff","isRemove","shift","acc","removed","calculateJump","items","SUBPIXEL_THRESHOLD","SCROLL_IDLE","SCROLL_DOWN","SCROLL_UP","ACTION_ITEM_RESIZE","ACTION_VIEWPORT_RESIZE","ACTION_ITEMS_LENGTH_CHANGE","ACTION_SCROLL","ACTION_BEFORE_MANUAL_SCROLL","ACTION_SCROLL_END","ACTION_MANUAL_SCROLL","UPDATE_SCROLL","UPDATE_SIZE","UPDATE_JUMP","UPDATE_IS_SCROLLING","UPDATE_SCROLL_WITH_EVENT","createVirtualStore","elementsCount","initialItemCount","isReverse","shouldAutoEstimateItemSize","viewportSize","scrollOffset","jumpCount","jump","_scrollDirection","_isShifting","_isManualScrolling","_resized","_prevRange","subscribers","getScrollSize","getScrollOffsetMax","clampScrollOffset","updateScrollDirection","dir","prev","prevStartIndex","prevEndIndex","start","end","findEndIndex","computeStartOffset","prevJump","target","cb","sub","type","payload","shouldSync","mutated","updated","isNewItemMeasured","distanceToEnd","isJustResized","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","refKey","emptyComponents","forEach","children","elements","c","flattenChildren","useLatestRef","ref","useRef","SELECT_RANGE","SELECT_SCROLL_SIZE","SELECT_JUMP_COUNT","SELECT_IS_SCROLLING","SELECT_ITEM","useSelector","store","getSnapShot","shouldGetLatest","state","setState","useState","getter","update","sync","flushSync","snap","hasNegativeOffsetInRtl","scrollable","isNegative","createOnWheel","isHorizontal","onScrollStopped","e","createScroller","isRtl","rootElement","scrollToQueue","scrollToKey","getActualScrollSize","normalizeOffset","scrollManually","getOffset","getTargetOffset","targetOffset","unsubscribe","resolve","reject","resolved","resolveQueue","root","syncViewportToScrollPosition","onScroll","onWheel","align","createWindowScroller","offsetKey","visible","getOffsetToWindow","node","nodeOffset","parent","io","entry","useStatic","init","createResizer","sizeKey","mountedIndexes","getResizeObserver","entries","resizes","contentRect","ro","el","createWindowResizer","windowSizeKey","createGridResizer","vStore","hStore","heightKey","widthKey","maybeCachedRowIndexes","maybeCachedColIndexes","sizeCache","getKey","rowIndex","colIndex","resizedRows","resizedCols","cell","prevSize","rowResized","colResized","heightResizes","maxHeight","widthResizes","maxWidth","Viewport","forwardRef","attrs","width","height","scrolling","jsx","useMemo"],"mappings":"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"}