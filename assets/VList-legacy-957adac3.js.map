{"version":3,"file":"VList-legacy-957adac3.js","sources":["../../src/core/utils.ts","../../src/core/cache.ts","../../src/core/store.ts","../../src/react/useIsomorphicLayoutEffect.ts","../../src/react/useSyncExternalStore.ts","../../src/core/scroller.ts","../../src/react/utils.ts","../../src/react/useRefWithUpdate.ts","../../src/react/VList.tsx","../../src/react/useStatic.ts"],"sourcesContent":["export const min = Math.min;\nexport const max = Math.max;\nexport const now = Date.now;\n\nexport const exists = <T>(v: T): v is Exclude<T, null | undefined> => v != null;\n\nexport const range = <T>(length: number, cb: (i: number) => T): T[] =>\n  Array.from({ length }, (_, i) => cb(i));\n\nexport const debounce = <T extends (...args: any[]) => void>(\n  fn: T,\n  ms: number\n) => {\n  let id: NodeJS.Timeout | undefined | null;\n\n  const cancel = () => {\n    if (exists(id)) {\n      clearTimeout(id);\n    }\n  };\n  const debouncedFn = () => {\n    cancel();\n    id = setTimeout(() => {\n      id = null;\n      fn();\n    }, ms);\n  };\n  debouncedFn._cancel = cancel;\n  return debouncedFn;\n};\n\nexport const throttle = <T extends (...args: any[]) => void>(\n  fn: T,\n  ms: number\n) => {\n  let time = now() - ms;\n  return (...args: Parameters<T>) => {\n    const n = now();\n    if (time + ms < n) {\n      time = n;\n      fn(...args);\n    }\n  };\n};\n\nexport const memoizeOnce = <F extends (...args: any[]) => any>(fn: F): F => {\n  let called: undefined | boolean;\n  let cache: ReturnType<F>;\n\n  return ((...args) => {\n    if (!called) {\n      called = true;\n      cache = fn(...args);\n    }\n    return cache;\n  }) as F;\n};\n","import type { DeepReadonly, Writeable } from \"./types\";\nimport { exists, max, min, range } from \"./utils\";\n\nexport const UNCACHED = -1;\n\nexport type Cache = DeepReadonly<{\n  _defaultItemSize: number;\n  _length: number;\n  _sizes: number[];\n  _measuredOffsetIndex: number;\n  _offsets: number[];\n}>;\n\nexport const getItemSize = (cache: Cache, index: number): number => {\n  const size = cache._sizes[index]!;\n  return size === UNCACHED ? cache._defaultItemSize : size;\n};\n\nexport const setItemSize = (\n  cache: Writeable<Cache>,\n  index: number,\n  size: number\n) => {\n  cache._sizes[index] = size;\n  // mark as dirty\n  cache._measuredOffsetIndex = min(index, cache._measuredOffsetIndex);\n};\n\nconst computeOffset = (\n  cache: Writeable<Cache>,\n  index: number,\n  isTotal?: boolean\n): number => {\n  if (!cache._length) return 0;\n  if (cache._measuredOffsetIndex >= index) {\n    if (isTotal) {\n      return cache._offsets[index]! + getItemSize(cache, index);\n    } else {\n      return cache._offsets[index]!;\n    }\n  }\n\n  let i = cache._measuredOffsetIndex;\n  let top = cache._offsets[i]!;\n  while (i <= index) {\n    cache._offsets[i] = top;\n    if (i === index && !isTotal) {\n      break;\n    }\n    top += getItemSize(cache, i);\n    i++;\n  }\n  // mark as measured\n  cache._measuredOffsetIndex = index;\n  return top;\n};\n\nexport const computeTotalSize = (cache: Writeable<Cache>): number => {\n  return computeOffset(cache, cache._length - 1, true);\n};\n\nexport const computeStartOffset = (\n  cache: Writeable<Cache>,\n  index: number\n): number => {\n  return computeOffset(cache, index);\n};\n\nconst findIndex = (cache: Cache, i: number, distance: number): number => {\n  let sum = 0;\n  if (distance >= 0) {\n    // search forward\n    while (i < cache._length - 1) {\n      const h = getItemSize(cache, i++);\n      if ((sum += h) >= distance) {\n        if (sum - h / 2 >= distance) {\n          i--;\n        }\n        break;\n      }\n    }\n  } else {\n    // search backward\n    while (i > 0) {\n      const h = getItemSize(cache, --i);\n      if ((sum -= h) <= distance) {\n        if (sum + h / 2 < distance) {\n          i++;\n        }\n        break;\n      }\n    }\n  }\n\n  return min(max(i, 0), cache._length - 1);\n};\n\nexport const findStartIndexWithOffset = (\n  cache: Cache,\n  offset: number,\n  prevStartIndex: number,\n  prevOffset: number\n): number => {\n  return findIndex(cache, prevStartIndex, offset - prevOffset);\n};\n\nexport const findEndIndex = findIndex;\n\nexport const hasUnmeasuredItemsInRange = (\n  cache: Cache,\n  startIndex: number,\n  endIndex: number\n): boolean => {\n  for (let i = startIndex; i <= endIndex; i++) {\n    if (cache._sizes[i] === UNCACHED) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport const resetCache = (\n  length: number,\n  itemSize: number,\n  cache?: Cache\n): Cache => {\n  return {\n    _defaultItemSize: itemSize,\n    _length: length,\n    _measuredOffsetIndex: cache\n      ? min(cache._measuredOffsetIndex, length - 1)\n      : 0,\n    _sizes: range(length, (i) => {\n      const size = cache && cache._sizes[i];\n      if (exists(size)) {\n        return size;\n      }\n      return UNCACHED;\n    }),\n    _offsets: range(length, (i) => {\n      if (i === 0) {\n        // first offset must be 0\n        return 0;\n      }\n      const offset = cache && cache._offsets[i];\n      if (exists(offset)) {\n        return offset;\n      }\n      return UNCACHED;\n    }),\n  };\n};\n","import {\n  findStartIndexWithOffset,\n  resetCache,\n  getItemSize,\n  computeTotalSize,\n  findEndIndex,\n  computeStartOffset,\n  Cache,\n  UNCACHED,\n  setItemSize,\n  hasUnmeasuredItemsInRange,\n} from \"./cache\";\nimport type { Writeable } from \"./types\";\nimport { max } from \"./utils\";\n\nexport type ScrollJump = Readonly<[index: number, sizeDiff: number][]>;\nexport type ItemResize = [index: number, size: number];\ntype ItemsRange = [startIndex: number, endIndex: number];\n\nexport const SCROLL_STOP = 0;\nexport const SCROLL_DOWN = 1;\nexport const SCROLL_UP = 2;\nexport const SCROLL_MANUAL = 3;\ntype ScrollDirection =\n  | typeof SCROLL_STOP\n  | typeof SCROLL_DOWN\n  | typeof SCROLL_UP\n  | typeof SCROLL_MANUAL;\n\nexport const ACTION_ITEM_RESIZE = 1;\nexport const ACTION_WINDOW_RESIZE = 2;\nexport const ACTION_SCROLL = 3;\nexport const ACTION_MANUAL_SCROLL = 4;\n\ntype Actions =\n  | [type: typeof ACTION_ITEM_RESIZE, entries: ItemResize[]]\n  | [type: typeof ACTION_WINDOW_RESIZE, size: number]\n  | [type: typeof ACTION_SCROLL, offset: number]\n  | [type: typeof ACTION_MANUAL_SCROLL, offset: number];\n\nexport type VirtualStore = {\n  _getRange(): ItemsRange;\n  _isUnmeasuredItem(index: number): boolean;\n  _hasUnmeasuredItemsInRange(startIndex: number): boolean;\n  _getItemOffset(index: number): number;\n  _getScrollOffset(): number;\n  _getViewportSize(): number;\n  _getScrollSize(): number;\n  _getJump(): ScrollJump;\n  _isHorizontal(): boolean;\n  _isRtl(): boolean;\n  _getItemIndexForScrollTo(offset: number): number;\n  _waitForScrollDestinationItemsMeasured(): Promise<void>;\n  _subscribe(cb: () => void): () => void;\n  _update(...action: Actions): void;\n  _getScrollDirection(): ScrollDirection;\n  _setScrollDirection(direction: ScrollDirection): void;\n  _updateIsScrolling(scrolling: boolean): void;\n  _updateCacheLength(length: number): void;\n};\n\nexport const createVirtualStore = (\n  itemCount: number,\n  itemSize: number,\n  isHorizontal: boolean,\n  isRtl: boolean,\n  initialItemCount: number = 0,\n  onScrollStateChange: (scrolling: boolean) => void,\n  onScrollOffsetChange: (offset: number) => void\n): VirtualStore => {\n  let viewportSize = itemSize * max(initialItemCount - 1, 0);\n  let scrollOffset = 0;\n  let jump: ScrollJump = [];\n  let cache = resetCache(itemCount, itemSize);\n  let _scrollDirection: ScrollDirection = SCROLL_STOP;\n  let _prevRange: ItemsRange = [0, initialItemCount];\n  let _scrollToQueue: [() => void, () => void] | undefined;\n\n  const subscribers = new Set<() => void>();\n\n  return {\n    _getRange() {\n      const [prevStartIndex, prevEndIndex] = _prevRange;\n      const prevOffset = computeStartOffset(\n        cache as Writeable<Cache>,\n        prevStartIndex\n      );\n      const start = findStartIndexWithOffset(\n        cache,\n        scrollOffset,\n        prevStartIndex,\n        prevOffset\n      );\n      const end = findEndIndex(cache, start, viewportSize);\n      if (prevStartIndex === start && prevEndIndex === end) {\n        return _prevRange;\n      }\n      return (_prevRange = [start, end]);\n    },\n    _isUnmeasuredItem(index) {\n      return cache._sizes[index] === UNCACHED;\n    },\n    _hasUnmeasuredItemsInRange(startIndex) {\n      return hasUnmeasuredItemsInRange(\n        cache,\n        startIndex,\n        findEndIndex(cache, startIndex, viewportSize)\n      );\n    },\n    _getItemOffset(index) {\n      return computeStartOffset(cache as Writeable<Cache>, index);\n    },\n    _getScrollOffset() {\n      return scrollOffset;\n    },\n    _getViewportSize() {\n      return viewportSize;\n    },\n    _getScrollSize() {\n      return computeTotalSize(cache as Writeable<Cache>);\n    },\n    _getJump() {\n      return jump;\n    },\n    _isHorizontal() {\n      return isHorizontal;\n    },\n    _isRtl() {\n      return isRtl;\n    },\n    _getItemIndexForScrollTo(offset) {\n      return findStartIndexWithOffset(cache, offset, 0, 0);\n    },\n    _waitForScrollDestinationItemsMeasured() {\n      if (_scrollToQueue) {\n        // Cancel waiting scrollTo\n        _scrollToQueue[1]();\n      }\n      // The measurement will be done asynchronously and the timing is not predictable so we use promise.\n      // For example, ResizeObserver may not fire when window is not visible.\n      return new Promise((resolve, reject) => {\n        _scrollToQueue = [\n          () => {\n            // HACK: It should be resolved in the next microtask that is after React's render\n            Promise.resolve().then(() => {\n              resolve();\n              _scrollToQueue = undefined;\n            });\n          },\n          reject,\n        ];\n      });\n    },\n    _subscribe(cb) {\n      subscribers.add(cb);\n      return () => {\n        subscribers.delete(cb);\n      };\n    },\n    _update(type, payload) {\n      const mutated = ((): boolean => {\n        switch (type) {\n          case ACTION_ITEM_RESIZE: {\n            const updated = payload.filter(\n              ([index, size]) => cache._sizes[index] !== size\n            );\n            // Skip if all items are cached and not updated\n            if (!updated.length) {\n              return false;\n            }\n\n            const updatedJump: [index: number, sizeDiff: number][] = [];\n            updated.forEach(([index, size]) => {\n              updatedJump.push([index, size - getItemSize(cache, index)]);\n              setItemSize(cache as Writeable<Cache>, index, size);\n            });\n            jump = updatedJump;\n            return true;\n          }\n          case ACTION_WINDOW_RESIZE: {\n            if (viewportSize === payload) {\n              return false;\n            }\n            viewportSize = payload;\n            return true;\n          }\n          case ACTION_SCROLL:\n          case ACTION_MANUAL_SCROLL: {\n            const prevOffset = scrollOffset;\n            return (scrollOffset = payload) !== prevOffset;\n          }\n        }\n      })();\n\n      if (mutated) {\n        subscribers.forEach((cb) => {\n          cb();\n        });\n\n        if (type === ACTION_SCROLL) {\n          onScrollOffsetChange(scrollOffset);\n        } else if (_scrollToQueue && type === ACTION_ITEM_RESIZE) {\n          _scrollToQueue[0]();\n        }\n      }\n    },\n    _getScrollDirection() {\n      return _scrollDirection;\n    },\n    _setScrollDirection(dir) {\n      _scrollDirection = dir;\n    },\n    _updateIsScrolling(scrolling) {\n      onScrollStateChange(scrolling);\n    },\n    _updateCacheLength(length) {\n      // It's ok to be updated in render because states should be calculated consistently regardless cache length\n      if (cache._length === length) return;\n      cache = resetCache(length, itemSize, cache);\n    },\n  };\n};\n","import { useEffect, useLayoutEffect } from \"react\";\n\n// https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\nexport const useIsomorphicLayoutEffect =\n  typeof window !== \"undefined\" ? useLayoutEffect : useEffect;\n","import { useSyncExternalStore as _useSyncExternalStore } from \"use-sync-external-store/shim/index.js\";\n\nexport const useSyncExternalStore = <T>(\n  subscibe: (onStoreChange: () => void) => () => void,\n  getSnapShot: () => T\n): T => {\n  return _useSyncExternalStore(subscibe, getSnapShot, getSnapShot);\n};\n","import {\n  ACTION_SCROLL,\n  ACTION_MANUAL_SCROLL,\n  ACTION_ITEM_RESIZE,\n  ACTION_WINDOW_RESIZE,\n  ItemResize,\n  ScrollJump,\n  VirtualStore,\n  SCROLL_MANUAL,\n  SCROLL_STOP,\n  SCROLL_UP,\n  SCROLL_DOWN,\n} from \"./store\";\nimport { debounce, throttle, exists, max, min, memoizeOnce } from \"./utils\";\n\n// The scroll position may be negative value in rtl direction.\n// https://github.com/othree/jquery.rtl-scroll-type\nconst hasNegativeOffsetInRtl = memoizeOnce(\n  (scrollable: HTMLElement, key: \"scrollTop\" | \"scrollLeft\") => {\n    const prev = scrollable[key];\n    scrollable[key] = 1;\n    const isNegative = scrollable[key] === 0;\n    scrollable[key] = prev;\n    return isNegative;\n  }\n);\n\nexport type Scroller = {\n  _initRoot: (rootElement: HTMLElement) => () => void;\n  _initItem: (itemElement: HTMLElement, index: number) => () => void;\n  _getActualScrollSize: () => number;\n  _scrollTo: (offset: number) => void;\n  _scrollToIndex: (index: number, count: number) => void;\n  _fixScrollJump: (jump: ScrollJump, startIndex: number) => void;\n};\n\nexport const createScroller = (store: VirtualStore): Scroller => {\n  let resized = false;\n  let rootElement: HTMLElement | undefined;\n  const isHorizontal = store._isHorizontal();\n  const isRtl = store._isRtl();\n  const scrollToKey = isHorizontal ? \"scrollLeft\" : \"scrollTop\";\n  const sizeKey = isHorizontal ? \"width\" : \"height\";\n  const mountedIndexes = new WeakMap<Element, number>();\n\n  // Initialize ResizeObserver lazily for SSR\n  const getResizeObserver = memoizeOnce(() => {\n    return new ResizeObserver((entries) => {\n      // https://www.w3.org/TR/resize-observer/#intro\n      const resizes: ItemResize[] = [];\n      for (const { target, contentRect } of entries) {\n        if (target === rootElement) {\n          store._update(ACTION_WINDOW_RESIZE, contentRect[sizeKey]);\n        } else {\n          const index = mountedIndexes.get(target);\n          if (exists(index)) {\n            resizes.push([index, contentRect[sizeKey]]);\n          }\n        }\n      }\n\n      if (resizes.length) {\n        store._update(ACTION_ITEM_RESIZE, resizes);\n        resized = true;\n      }\n    });\n  });\n  const getActualScrollSize = (): number => {\n    if (!rootElement) return 0;\n    // Use element's scrollHeight/scrollWidth instead of stored scrollSize.\n    // This is because stored size may differ from the actual size, for example when a new item is added and not yet measured.\n    return isHorizontal ? rootElement.scrollWidth : rootElement.scrollHeight;\n  };\n  const updateScrollPosition = (offset: number, diff?: boolean) => {\n    if (!rootElement) return;\n    if (isRtl) {\n      if (hasNegativeOffsetInRtl(rootElement, scrollToKey)) {\n        offset *= -1;\n      }\n    }\n    if (diff) {\n      rootElement[scrollToKey] += offset;\n    } else {\n      rootElement[scrollToKey] = offset;\n      store._setScrollDirection(SCROLL_MANUAL);\n    }\n  };\n  const scrollTo = async (index: number, getCurrentOffset: () => number) => {\n    const getOffset = (): number => {\n      let offset = getCurrentOffset();\n      const scrollSize = getActualScrollSize();\n      const viewportSize = store._getViewportSize();\n      if (scrollSize - (offset + viewportSize) <= 0) {\n        // Adjust if the offset is over the end, to get correct startIndex.\n        offset = scrollSize - viewportSize;\n      }\n      return offset;\n    };\n\n    if (store._hasUnmeasuredItemsInRange(index)) {\n      do {\n        // In order to scroll to the correct position, mount the items and measure their sizes before scrolling.\n        store._update(ACTION_MANUAL_SCROLL, getOffset());\n        try {\n          // Wait for the scroll destination items to be measured.\n          await store._waitForScrollDestinationItemsMeasured();\n        } catch (e) {\n          // canceled\n          return;\n        }\n      } while (store._hasUnmeasuredItemsInRange(index));\n\n      // Scroll with the updated value\n      updateScrollPosition(getOffset());\n    } else {\n      const offset = getOffset();\n      updateScrollPosition(offset);\n      // Sync viewport to scroll destination\n      store._update(ACTION_MANUAL_SCROLL, offset);\n    }\n  };\n\n  const calcTotalJump = (jump: ScrollJump): number =>\n    jump.reduce((acc, [, j]) => acc + j, 0);\n\n  return {\n    _initRoot(root) {\n      rootElement = root;\n      const ro = getResizeObserver();\n\n      const syncViewportToScrollPosition = () => {\n        let offset = root[scrollToKey];\n        if (isRtl) {\n          if (hasNegativeOffsetInRtl(root, scrollToKey)) {\n            offset *= -1;\n          }\n        }\n        const prevOffset = store._getScrollOffset();\n        if (prevOffset === offset) {\n          return;\n        }\n        const scrollDirection = store._getScrollDirection();\n        // Skip scroll direction detection just after resizing because it may result in the opposite direction.\n        // Scroll events are dispatched enough so it's ok to skip some of them.\n        if (\n          (scrollDirection === SCROLL_STOP || !resized) &&\n          // Ignore until manual scrolling\n          scrollDirection !== SCROLL_MANUAL\n        ) {\n          store._setScrollDirection(\n            prevOffset > offset ? SCROLL_UP : SCROLL_DOWN\n          );\n        }\n        resized = false;\n        store._update(ACTION_SCROLL, offset);\n      };\n\n      const onScrollStopped = debounce(() => {\n        // Check scroll position once just after scrolling stopped\n        syncViewportToScrollPosition();\n        store._setScrollDirection(SCROLL_STOP);\n        store._updateIsScrolling(false);\n      }, 150);\n\n      const onScroll = () => {\n        const isScrollStart = store._getScrollDirection() === SCROLL_STOP;\n        syncViewportToScrollPosition();\n        if (isScrollStart) {\n          store._updateIsScrolling(true);\n        }\n        onScrollStopped();\n      };\n\n      // Infer scroll state also from wheel events\n      // Sometimes scroll events do not fire when frame dropped even if the visual have been already scrolled\n      const onWheel = throttle((e: WheelEvent) => {\n        if (store._getScrollDirection() === SCROLL_STOP) {\n          // Scroll start should be detected with scroll event\n          return;\n        }\n        if (e.ctrlKey) {\n          // Probably a pinch-to-zoom gesture\n          return;\n        }\n        // Get delta before checking deltaMode for firefox behavior\n        // https://github.com/w3c/uievents/issues/181#issuecomment-392648065\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1392460#c34\n        if (isHorizontal ? e.deltaX : e.deltaY) {\n          const offset = store._getScrollOffset();\n          if (\n            offset > 0 &&\n            offset < store._getScrollSize() - store._getViewportSize()\n          ) {\n            onScrollStopped();\n          }\n        }\n      }, 50);\n\n      ro.observe(root);\n      root.addEventListener(\"scroll\", onScroll);\n      root.addEventListener(\"wheel\", onWheel, { passive: true });\n\n      return () => {\n        ro.disconnect();\n        root.removeEventListener(\"scroll\", onScroll);\n        root.removeEventListener(\"wheel\", onWheel);\n        onScrollStopped._cancel();\n      };\n    },\n    _initItem(el, i) {\n      const ro = getResizeObserver();\n      mountedIndexes.set(el, i);\n      ro.observe(el);\n      return () => {\n        mountedIndexes.delete(el);\n        ro.unobserve(el);\n      };\n    },\n    _getActualScrollSize: getActualScrollSize,\n    _scrollTo(offset) {\n      offset = max(offset, 0);\n\n      scrollTo(store._getItemIndexForScrollTo(offset), () => offset);\n    },\n    _scrollToIndex(index, count) {\n      index = max(min(index, count - 1), 0);\n\n      scrollTo(index, () => store._getItemOffset(index));\n    },\n    _fixScrollJump: (jump, startIndex) => {\n      const scrollDirection = store._getScrollDirection();\n      // Compensate scroll jump\n      if (scrollDirection === SCROLL_UP) {\n        const diff = calcTotalJump(jump);\n        if (diff) {\n          updateScrollPosition(diff, true);\n        }\n      } else if (scrollDirection === SCROLL_MANUAL) {\n        const offset = store._getScrollOffset();\n        if (offset === 0) {\n          // Do nothing to stick to the start\n        } else {\n          const allDiff = calcTotalJump(jump);\n          if (\n            store._getScrollSize() -\n              (offset + store._getViewportSize() + allDiff) <=\n            0\n          ) {\n            // Keep end to stick to the end\n            if (allDiff) {\n              updateScrollPosition(offset + allDiff);\n            }\n          } else {\n            // Keep start at mid\n            const diff = jump.reduce((acc, [index, j]) => {\n              if (index < startIndex) {\n                acc += j;\n              }\n              return acc;\n            }, 0);\n            if (diff) {\n              updateScrollPosition(diff, true);\n            }\n          }\n        }\n      } else {\n        // NOP\n      }\n    },\n  };\n};\n","export const refKey = \"current\";\n","import { useRef } from \"react\";\nimport { useIsomorphicLayoutEffect } from \"./useIsomorphicLayoutEffect\";\nimport { refKey } from \"./utils\";\n\nexport const useRefWithUpdate = <T>(value: T) => {\n  const ref = useRef<T>(value);\n\n  useIsomorphicLayoutEffect(() => {\n    ref[refKey] = value;\n  }, [value]);\n\n  return ref;\n};\n","import {\n  Children,\n  memo,\n  useRef,\n  useMemo,\n  CSSProperties,\n  ReactElement,\n  forwardRef,\n  useImperativeHandle,\n  ReactNode,\n  useEffect,\n  RefObject,\n  useState,\n  ReactFragment,\n} from \"react\";\nimport { VirtualStore, createVirtualStore } from \"../core/store\";\nimport { useIsomorphicLayoutEffect } from \"./useIsomorphicLayoutEffect\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore\";\nimport { exists, max, min } from \"../core/utils\";\nimport { createScroller, Scroller } from \"../core/scroller\";\nimport { refKey } from \"./utils\";\nimport { useStatic } from \"./useStatic\";\nimport { useRefWithUpdate } from \"./useRefWithUpdate\";\n\ntype ItemProps = {\n  _children: ReactNode;\n  _scroller: Scroller;\n  _store: VirtualStore;\n  _index: number;\n  _element: \"div\";\n};\n\nconst Item = memo(\n  ({\n    _children: children,\n    _scroller: scroller,\n    _store: store,\n    _index: index,\n    _element: Element,\n  }: ItemProps): ReactElement => {\n    const ref = useRef<HTMLDivElement>(null);\n\n    const offset = useSyncExternalStore(store._subscribe, () =>\n      store._getItemOffset(index)\n    );\n    const hide = useSyncExternalStore(store._subscribe, () =>\n      store._isUnmeasuredItem(index)\n    );\n\n    // The index may be changed if elements are inserted to or removed from the start of props.children\n    useIsomorphicLayoutEffect(\n      () => scroller._initItem(ref[refKey]!, index),\n      [index]\n    );\n\n    return (\n      <Element\n        ref={ref}\n        style={useMemo((): CSSProperties => {\n          const isHorizontal = store._isHorizontal();\n          const leftOrRightKey = store._isRtl() ? \"right\" : \"left\";\n          const style: CSSProperties = {\n            margin: 0,\n            padding: 0,\n            position: \"absolute\",\n            [isHorizontal ? \"height\" : \"width\"]: \"100%\",\n            [isHorizontal ? \"top\" : leftOrRightKey]: 0,\n            [isHorizontal ? leftOrRightKey : \"top\"]: offset,\n            visibility: hide ? \"hidden\" : \"visible\",\n            // willChange: \"transform\",\n          };\n          if (isHorizontal) {\n            style.display = \"flex\";\n          }\n          return style;\n        }, [offset, hide])}\n      >\n        {children}\n      </Element>\n    );\n  }\n);\n\nconst isInvalidElement = <T extends ReactNode>(\n  e: T\n): e is Extract<T, null | undefined | boolean> =>\n  !exists(e) || typeof e === \"boolean\";\n\nexport type WindowComponentAttributes = Pick<\n  React.HTMLAttributes<HTMLElement>,\n  \"className\" | \"style\" | \"id\" | \"role\" | \"tabIndex\"\n> &\n  React.AriaAttributes;\n\n/**\n * Props of customized scrollable component.\n */\nexport interface CustomWindowComponentProps {\n  children: ReactNode;\n  scrollSize: number;\n  scrolling: boolean;\n  horizontal: boolean;\n  attrs: WindowComponentAttributes;\n}\n\nconst DefaultWindow = forwardRef<any, CustomWindowComponentProps>(\n  (\n    { children, scrollSize, scrolling, horizontal, attrs },\n    ref\n  ): ReactElement => {\n    return (\n      <div ref={ref} {...attrs}>\n        <div\n          style={useMemo((): CSSProperties => {\n            return {\n              position: \"relative\",\n              visibility: \"hidden\",\n              width: horizontal ? scrollSize : \"100%\",\n              height: horizontal ? \"100%\" : scrollSize,\n              pointerEvents: scrolling ? \"none\" : \"auto\",\n            };\n          }, [scrollSize, scrolling])}\n        >\n          {children}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport type CustomWindowComponent = typeof DefaultWindow;\n\nconst Window = ({\n  _children: children,\n  _ref: ref,\n  _store: store,\n  _element: Element,\n  _scrolling: scrolling,\n  _attrs: attrs,\n}: {\n  _children: ReactNode;\n  _ref: RefObject<HTMLDivElement>;\n  _store: VirtualStore;\n  _element: CustomWindowComponent;\n  _scrolling: boolean;\n  _attrs: WindowComponentAttributes;\n}) => {\n  const scrollSize = useSyncExternalStore(\n    store._subscribe,\n    store._getScrollSize\n  );\n\n  const horizontal = store._isHorizontal();\n\n  return (\n    <Element\n      ref={ref}\n      scrollSize={scrollSize}\n      scrolling={scrolling}\n      horizontal={horizontal}\n      attrs={useMemo(\n        () => ({\n          ...attrs,\n          style: {\n            overflow: horizontal ? \"auto hidden\" : \"hidden auto\",\n            contain: \"strict\",\n            // transform: \"translate3d(0px, 0px, 0px)\",\n            // willChange: \"scroll-position\",\n            // backfaceVisibility: \"hidden\",\n            width: \"100%\",\n            height: \"100%\",\n            padding: 0,\n            margin: 0,\n            ...attrs.style,\n          },\n        }),\n        [attrs]\n      )}\n    >\n      {children}\n    </Element>\n  );\n};\n\n/**\n * Props of customized item component.\n */\nexport interface CustomItemComponentProps {\n  style: CSSProperties;\n  children: ReactNode;\n}\n\nexport type CustomItemComponent = React.ForwardRefExoticComponent<\n  React.PropsWithoutRef<CustomItemComponentProps> & React.RefAttributes<any>\n>;\n\ntype CustomItemComponentOrElement =\n  | keyof JSX.IntrinsicElements\n  | CustomItemComponent;\n\n/**\n * Methods of {@link VList}.\n */\nexport interface VListHandle {\n  /**\n   * Get current scrollTop or scrollLeft.\n   */\n  readonly scrollOffset: number;\n  /**\n   * Get current scrollHeight or scrollWidth.\n   */\n  readonly scrollSize: number;\n  /**\n   * Get current offsetHeight or offsetWidth.\n   */\n  readonly viewportSize: number;\n  /**\n   * Scroll to the item specified by index.\n   * @param index index of item\n   */\n  scrollToIndex(index: number): void;\n  /**\n   * Scroll to the given offset.\n   * @param offset offset from start\n   */\n  scrollTo(offset: number): void;\n  /**\n   * Scroll by the given offset.\n   * @param offset offset from current position\n   */\n  scrollBy(offset: number): void;\n}\n\n/**\n * Props of {@link VList}.\n */\nexport interface VListProps extends WindowComponentAttributes {\n  /**\n   * Elements rendered by this component.\n   */\n  children: ReactNode;\n  /**\n   * Item size hint for unmeasured items. It's recommended to specify this prop if item sizes are fixed and known, or much larger than the defaultValue. It will help to reduce scroll jump when items are measured.\n   * @defaultValue 40\n   */\n  itemSize?: number;\n  /**\n   * Number of items to render above/below the visible bounds of the list. You can increase to avoid showing blank items in fast scrolling.\n   * @defaultValue 4\n   */\n  overscan?: number;\n  /**\n   * If set, the specified amount of items will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.\n   */\n  initialItemCount?: number;\n  /**\n   * If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.\n   */\n  horizontal?: boolean;\n  /**\n   * You have to set true if you use this component under `direction: rtl` style.\n   */\n  rtl?: boolean;\n  /**\n   * Customized element type for scrollable element. This element will get {@link CustomWindowComponentProps} as props.\n   * @defaultValue {@link DefaultWindow}\n   */\n  element?: CustomWindowComponent;\n  /**\n   * Customized element type for item element. This element will get {@link CustomItemComponentProps} as props.\n   * @defaultValue \"div\"\n   */\n  itemElement?: CustomItemComponentOrElement;\n  /**\n   * Callback invoked whenever scroll offset changes.\n   * @param offset Current scrollTop or scrollLeft.\n   */\n  onScroll?: (offset: number) => void;\n  /**\n   * Callback invoked when scrolling stops.\n   */\n  onScrollStop?: () => void;\n  /**\n   * Callback invoked when visible items range changes.\n   */\n  onRangeChange?: (payload: {\n    /**\n     * The start index of viewable items.\n     */\n    start: number;\n    /**\n     * The end index of viewable items.\n     */\n    end: number;\n    /**\n     * The total count of items.\n     */\n    count: number;\n  }) => void;\n}\n\n/**\n * Virtualized list component. See {@link VListProps} and {@link VListHandle}.\n */\nexport const VList = forwardRef<VListHandle, VListProps>(\n  (\n    {\n      children,\n      itemSize: itemSizeProp = 40,\n      overscan = 4,\n      initialItemCount,\n      horizontal: horizontalProp,\n      rtl: rtlProp,\n      element = DefaultWindow,\n      itemElement = \"div\",\n      onScroll: onScrollProp,\n      onScrollStop: onScrollStopProp,\n      onRangeChange: onRangeChangeProp,\n      ...windowAttrs\n    },\n    ref\n  ): ReactElement => {\n    // Memoize element array\n    const elements = useMemo(() => {\n      const arr: (ReactElement | ReactFragment | string | number)[] = [];\n      Children.forEach(children, (e) => {\n        if (isInvalidElement(e)) {\n          return;\n        }\n        arr.push(e);\n      });\n      return arr;\n    }, [children]);\n    const count = elements.length;\n\n    const onScroll = useRefWithUpdate(onScrollProp);\n    const onScrollStop = useRefWithUpdate(onScrollStopProp);\n\n    const [mountedIndexes, reset] = useState<Set<number>>(new Set<number>());\n    const [scrolling, setScrolling] = useState(false);\n    // https://github.com/facebook/react/issues/25191#issuecomment-1237456448\n    const [store, scroller] = useStatic(() => {\n      const _store = createVirtualStore(\n        count,\n        itemSizeProp,\n        !!horizontalProp,\n        !!rtlProp,\n        initialItemCount,\n        (isScrolling) => {\n          setScrolling(isScrolling);\n          if (!isScrolling) {\n            reset(new Set());\n            onScrollStop[refKey] && onScrollStop[refKey]();\n          }\n        },\n        (offset) => {\n          onScroll[refKey] && onScroll[refKey](offset);\n        }\n      );\n      return [_store, createScroller(_store)];\n    });\n    // The elements length and cached items length are different just after element is added/removed.\n    store._updateCacheLength(count);\n\n    const [startIndex, endIndex] = useSyncExternalStore(\n      store._subscribe,\n      store._getRange\n    );\n    const jump = useSyncExternalStore(store._subscribe, store._getJump);\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    useIsomorphicLayoutEffect(() => scroller._initRoot(rootRef[refKey]!), []);\n\n    useIsomorphicLayoutEffect(() => {\n      if (!jump.length) return;\n\n      scroller._fixScrollJump(jump, startIndex);\n    }, [jump]);\n\n    useEffect(() => {\n      if (!onRangeChangeProp) return;\n\n      onRangeChangeProp({\n        start: startIndex,\n        end: endIndex,\n        count,\n      });\n    }, [startIndex, endIndex]);\n\n    useImperativeHandle(\n      ref,\n      () => {\n        return {\n          get scrollOffset() {\n            return store._getScrollOffset();\n          },\n          get scrollSize() {\n            return scroller._getActualScrollSize();\n          },\n          get viewportSize() {\n            return store._getViewportSize();\n          },\n          scrollToIndex(index) {\n            scroller._scrollToIndex(index, count);\n          },\n          scrollTo: scroller._scrollTo,\n          scrollBy(offset) {\n            scroller._scrollTo(store._getScrollOffset() + offset);\n          },\n        };\n      },\n      [count]\n    );\n\n    const startIndexWithMargin = max(startIndex - overscan, 0);\n    const endIndexWithMargin = min(endIndex + overscan, count - 1);\n    const items = useMemo(() => {\n      const res: ReactElement[] = [];\n      for (let i = startIndexWithMargin; i <= endIndexWithMargin; i++) {\n        // https://github.com/sergi/virtual-list/commit/8e7e06dc63568334c1ab809ea83c1be36572e9ed\n        mountedIndexes.add(i);\n      }\n      mountedIndexes.forEach((i) => {\n        const e = elements[i];\n        // This can be undefined when items are removed\n        if (exists(e)) {\n          res.push(\n            <Item\n              key={(e as { key?: ReactElement[\"key\"] })?.key || i}\n              _scroller={scroller}\n              _store={store}\n              _index={i}\n              _element={itemElement as \"div\"}\n              _children={e}\n            />\n          );\n        }\n      });\n      return res;\n    }, [elements, mountedIndexes, startIndexWithMargin, endIndexWithMargin]);\n\n    return (\n      <Window\n        _ref={rootRef}\n        _store={store}\n        _element={element}\n        _scrolling={scrolling}\n        _children={items}\n        _attrs={windowAttrs}\n      />\n    );\n  }\n);\n","import { useRef } from \"react\";\nimport { refKey } from \"./utils\";\n\nexport const useStatic = <T>(init: () => T): T => {\n  const ref = useRef<T>();\n  return ref[refKey] || (ref[refKey] = init());\n};\n"],"names":["min","Math","max","now","Date","exists","v","range","length","cb","Array","from","_","i","memoizeOnce","fn","called","cache","args","getItemSize","index","size","_sizes","_defaultItemSize","computeOffset","isTotal","_length","_measuredOffsetIndex","_offsets","top","computeStartOffset","findIndex","distance","sum","h","findStartIndexWithOffset","offset","prevStartIndex","prevOffset","findEndIndex","resetCache","itemSize","createVirtualStore","itemCount","isHorizontal","isRtl","initialItemCount","onScrollStateChange","onScrollOffsetChange","_scrollToQueue","viewportSize","scrollOffset","jump","_scrollDirection","_prevRange","subscribers","Set","_getRange","prevEndIndex","start","end","_isUnmeasuredItem","_hasUnmeasuredItemsInRange","startIndex","hasUnmeasuredItemsInRange","endIndex","_getItemOffset","_getScrollOffset","_getViewportSize","_getScrollSize","computeTotalSize","_getJump","_isHorizontal","_isRtl","_getItemIndexForScrollTo","_waitForScrollDestinationItemsMeasured","Promise","resolve","reject","then","_subscribe","add","delete","_update","type","payload","mutated","updated","filter","updatedJump","forEach","push","setItemSize","_getScrollDirection","_setScrollDirection","dir","_updateIsScrolling","scrolling","_updateCacheLength","useIsomorphicLayoutEffect","window","useLayoutEffect","useEffect","useSyncExternalStore","subscibe","getSnapShot","_useSyncExternalStore","hasNegativeOffsetInRtl","scrollable","key","prev","isNegative","createScroller","store","rootElement","resized","scrollToKey","sizeKey","mountedIndexes","WeakMap","getResizeObserver","ResizeObserver","entries","resizes","target","contentRect","get","getActualScrollSize","scrollWidth","scrollHeight","updateScrollPosition","diff","scrollTo","async","getCurrentOffset","getOffset","scrollSize","e","calcTotalJump","reduce","acc","j","_initRoot","root","ro","syncViewportToScrollPosition","scrollDirection","onScrollStopped","debounce","ms","id","cancel","clearTimeout","debouncedFn","setTimeout","_cancel","onScroll","isScrollStart","onWheel","throttle","time","n","ctrlKey","deltaX","deltaY","observe","addEventListener","passive","disconnect","removeEventListener","_initItem","el","set","unobserve","_getActualScrollSize","_scrollTo","_scrollToIndex","count","_fixScrollJump","allDiff","refKey","useRefWithUpdate","value","ref","useRef","Item","memo","_children","children","_scroller","scroller","_store","_index","_element","Element","hide","jsx","style","useMemo","leftOrRightKey","margin","padding","position","visibility","display","DefaultWindow","forwardRef","horizontal","attrs","_objectSpread","width","height","pointerEvents","Window","_ref","_scrolling","_attrs","overflow","contain","VList","itemSizeProp","overscan","horizontalProp","rtl","rtlProp","element","itemElement","onScrollProp","onScrollStop","onScrollStopProp","onRangeChange","onRangeChangeProp","windowAttrs","_objectWithoutProperties","_excluded","elements","arr","Children","isInvalidElement","reset","useState","setScrolling","init","useStatic","isScrolling","rootRef","useImperativeHandle","scrollToIndex","scrollBy","startIndexWithMargin","endIndexWithMargin","items","res"],"mappings":"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"}