import{j as w}from"./jsx-runtime-f8a6c6ea.js";import{r as l}from"./index-5284b0bf.js";import{f as B,u as R,a as F,b as h,c as k,r as i,e as K,v as U,W as A,d as D,g as G,h as Q,m as X,i as Z}from"./Window-7059aaa9.js";import{L as $}from"./ListItem-0c170596.js";const x=l.forwardRef(({children:m,overscan:g=4,initialItemSize:q,initialItemCount:T,horizontal:L,mode:y,element:E=A,itemElement:W="div",onScroll:j,onScrollStop:H,onRangeChange:v,...c},M)=>{const d=l.useMemo(()=>B(m),[m]),a=d.length,b=R(j),S=R(H),[O,N]=l.useState(!1),[t,_,r,s,J]=F(()=>{const e=!!L,o=y==="rtl",n=D(a,q,T,y==="reverse",u=>{N(u),u||S[i]&&S[i]()},u=>{b[i]&&b[i](u)});return[n,G(n,e),Q(n,e,o),e,o]});t._updateCacheLength(a);const[f,p]=h(t,t._getRange),P=h(t,t._getJumpCount),z=h(t,t._getCorrectedScrollSize,!0),C=l.useRef(null);k(()=>{const e=C[i],o=_._observeRoot(e),n=r._initRoot(e);return()=>{o(),n()}},[]),k(()=>{const e=t._flushJump();e&&r._fixScrollJump(e)},[P]),l.useEffect(()=>{v&&v({start:f,end:p,count:a})},[f,p]),l.useImperativeHandle(M,()=>({get scrollOffset(){return t._getScrollOffset()},get scrollSize(){return r._getActualScrollSize()},get viewportSize(){return t._getViewportSize()},scrollToIndex:r._scrollToIndex,scrollTo:r._scrollTo,scrollBy(e){r._scrollTo(t._getScrollOffset()+e)}}),[]);const V=X(f-g,0),I=Z(p+g,a-1),Y=l.useMemo(()=>{const e=[];for(let o=V;o<=I;o++){const n=d[o];K(n)&&e.push(w($,{_resizer:_,_store:t,_index:o,_element:W,_children:n,_isHorizontal:s,_isRtl:J},n.key||o))}return e},[d,V,I]);return w(E,{ref:C,width:s?z:void 0,height:s?void 0:z,scrolling:O,attrs:l.useMemo(()=>({...c,style:{overflow:s?"auto hidden":"hidden auto",display:s?"inline-block":"block",contain:"strict",width:"100%",height:"100%",padding:0,margin:0,...c.style}}),U(c)),children:Y})});try{x.displayName="VList",x.__docgenInfo={description:"Virtualized list component. See {@link VListProps} and {@link VListHandle}.",displayName:"VList",props:{children:{defaultValue:null,description:"Elements rendered by this component.",name:"children",required:!0,type:{name:"ReactNode"}},overscan:{defaultValue:{value:"4"},description:`Number of items to render above/below the visible bounds of the list. You can increase to avoid showing blank items in fast scrolling.
@defaultValue 4`,name:"overscan",required:!1,type:{name:"number"}},initialItemSize:{defaultValue:null,description:`Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.

- If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.
- If set, you can opt out estimation and use the value as initial item size.`,name:"initialItemSize",required:!1,type:{name:"number"}},initialItemCount:{defaultValue:null,description:"If set, the specified amount of items will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.",name:"initialItemCount",required:!1,type:{name:"number"}},horizontal:{defaultValue:null,description:"If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.",name:"horizontal",required:!1,type:{name:"boolean"}},mode:{defaultValue:null,description:"Scroll modes that should be set in certain situations.\n\n- `reverse`: This mode will adjust some styles to be suitable for bottom-to-top scrolling.\n- `rtl`: You have to set this mode if you use this component under `direction: rtl` style.",name:"mode",required:!1,type:{name:"enum",value:[{value:'"reverse"'},{value:'"rtl"'}]}},element:{defaultValue:null,description:`Customized element type for scrollable element. This element will get {@link CustomWindowComponentProps} as props.
@defaultValue {@link Window }`,name:"element",required:!1,type:{name:"ForwardRefExoticComponent<CustomWindowComponentProps & RefAttributes<any>>"}},itemElement:{defaultValue:{value:"div"},description:`Customized element type for item element. This element will get {@link CustomItemComponentProps } as props.
@defaultValue "div"`,name:"itemElement",required:!1,type:{name:"CustomItemComponentOrElement"}},onScroll:{defaultValue:null,description:`Callback invoked whenever scroll offset changes.
@param offset Current scrollTop or scrollLeft.`,name:"onScroll",required:!1,type:{name:"(offset: number) => void"}},onScrollStop:{defaultValue:null,description:"Callback invoked when scrolling stops.",name:"onScrollStop",required:!1,type:{name:"() => void"}},onRangeChange:{defaultValue:null,description:"Callback invoked when visible items range changes.",name:"onRangeChange",required:!1,type:{name:"(payload: { start: number; end: number; count: number; }) => void"}}}}}catch{}export{x as V};
//# sourceMappingURL=VList-7b5cc2ca.js.map
