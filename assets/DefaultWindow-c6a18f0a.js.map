{"version":3,"file":"DefaultWindow-c6a18f0a.js","sources":["../../src/core/utils.ts","../../src/core/cache.ts","../../src/core/store.ts","../../src/react/useIsomorphicLayoutEffect.ts","../../src/react/utils.ts","../../src/react/useRefWithUpdate.ts","../../src/react/useStore.ts","../../src/core/dom.ts","../../src/core/scroller.ts","../../src/react/useStatic.ts","../../src/core/resizer.ts","../../src/react/DefaultWindow.tsx"],"sourcesContent":["export const min = Math.min;\nexport const max = Math.max;\nexport const abs = Math.abs;\nexport const now = Date.now;\nexport const timeout = setTimeout;\n\nexport const exists = <T>(v: T): v is Exclude<T, null | undefined> => v != null;\n\nexport const range = <T>(length: number, cb: (i: number) => T): T[] =>\n  Array.from({ length }, (_, i) => cb(i));\n\nexport const median = (arr: number[]): number => {\n  const s = [...arr].sort((a, b) => a - b);\n  const mid = (arr.length / 2) | 0;\n  return s.length % 2 === 0 ? (s[mid - 1]! + s[mid]!) / 2 : s[mid]!;\n};\n\nexport const debounce = <T extends (...args: any[]) => void>(\n  fn: T,\n  ms: number\n) => {\n  let id: NodeJS.Timeout | undefined | null;\n\n  const cancel = () => {\n    if (exists(id)) {\n      clearTimeout(id);\n    }\n  };\n  const debouncedFn = () => {\n    cancel();\n    id = timeout(() => {\n      id = null;\n      fn();\n    }, ms);\n  };\n  debouncedFn._cancel = cancel;\n  return debouncedFn;\n};\n\nexport const throttle = <T extends (...args: any[]) => void>(\n  fn: T,\n  ms: number\n) => {\n  let time = now() - ms;\n  return (...args: Parameters<T>) => {\n    const n = now();\n    if (time + ms < n) {\n      time = n;\n      fn(...args);\n    }\n  };\n};\n\nexport const once = <F extends (...args: any[]) => any>(fn: F): F => {\n  let called: undefined | boolean;\n  let cache: ReturnType<F>;\n\n  return ((...args) => {\n    if (!called) {\n      called = true;\n      cache = fn(...args);\n    }\n    return cache;\n  }) as F;\n};\n","import type { DeepReadonly, Writeable } from \"./types\";\nimport { exists, max, median, min, range } from \"./utils\";\n\nexport const UNCACHED = -1;\n\nexport type Cache = DeepReadonly<{\n  _defaultItemSize: number;\n  _length: number;\n  _sizes: number[];\n  _measuredOffsetIndex: number;\n  _offsets: number[];\n}>;\n\nexport const getItemSize = (cache: Cache, index: number): number => {\n  const size = cache._sizes[index]!;\n  return size === UNCACHED ? cache._defaultItemSize : size;\n};\n\nexport const setItemSize = (\n  cache: Writeable<Cache>,\n  index: number,\n  size: number\n): boolean => {\n  const isInitialMeasurement = cache._sizes[index] === UNCACHED;\n  cache._sizes[index] = size;\n  // mark as dirty\n  cache._measuredOffsetIndex = min(index, cache._measuredOffsetIndex);\n  return isInitialMeasurement;\n};\n\nconst computeOffset = (\n  cache: Writeable<Cache>,\n  index: number,\n  isTotal?: boolean\n): number => {\n  if (!cache._length) return 0;\n  if (cache._measuredOffsetIndex >= index) {\n    if (isTotal) {\n      return cache._offsets[index]! + getItemSize(cache, index);\n    } else {\n      return cache._offsets[index]!;\n    }\n  }\n\n  let i = cache._measuredOffsetIndex;\n  let top = cache._offsets[i]!;\n  while (i <= index) {\n    cache._offsets[i] = top;\n    if (i === index && !isTotal) {\n      break;\n    }\n    top += getItemSize(cache, i);\n    i++;\n  }\n  // mark as measured\n  cache._measuredOffsetIndex = index;\n  return top;\n};\n\nexport const computeTotalSize = (cache: Writeable<Cache>): number => {\n  return computeOffset(cache, cache._length - 1, true);\n};\n\nexport const computeStartOffset = (\n  cache: Writeable<Cache>,\n  index: number\n): number => {\n  return computeOffset(cache, index);\n};\n\nconst findIndex = (cache: Cache, i: number, distance: number): number => {\n  let sum = 0;\n  if (distance >= 0) {\n    // search forward\n    while (i < cache._length - 1) {\n      const h = getItemSize(cache, i++);\n      if ((sum += h) >= distance) {\n        if (sum - h / 2 >= distance) {\n          i--;\n        }\n        break;\n      }\n    }\n  } else {\n    // search backward\n    while (i > 0) {\n      const h = getItemSize(cache, --i);\n      if ((sum -= h) <= distance) {\n        if (sum + h / 2 < distance) {\n          i++;\n        }\n        break;\n      }\n    }\n  }\n\n  return min(max(i, 0), cache._length - 1);\n};\n\nexport const findStartIndexWithOffset = (\n  cache: Cache,\n  offset: number,\n  prevStartIndex: number,\n  prevOffset: number\n): number => {\n  return findIndex(cache, prevStartIndex, offset - prevOffset);\n};\n\nexport { findIndex as findEndIndex };\n\nexport const hasUnmeasuredItemsInRange = (\n  cache: Cache,\n  startIndex: number,\n  endIndex: number\n): boolean => {\n  for (let i = startIndex; i <= endIndex; i++) {\n    if (cache._sizes[i] === UNCACHED) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport const estimateDefaultItemSize = (cache: Writeable<Cache>) => {\n  const measuredSizes = cache._sizes.filter((s) => s !== UNCACHED);\n  // This function will be called after measurement so measured size array must be longer than 0\n  const startItemSize = measuredSizes[0]!;\n\n  cache._defaultItemSize = measuredSizes.every((s) => s === startItemSize)\n    ? // Maybe a fixed size array\n      startItemSize\n    : // Maybe a variable size array\n      median(measuredSizes);\n};\n\nexport const resetCache = (\n  length: number,\n  itemSize: number,\n  cache?: Cache\n): Cache => {\n  return {\n    _defaultItemSize: cache ? cache._defaultItemSize : itemSize,\n    _length: length,\n    _measuredOffsetIndex: cache\n      ? min(cache._measuredOffsetIndex, length - 1)\n      : 0,\n    _sizes: range(length, (i) => {\n      const size = cache && cache._sizes[i];\n      if (exists(size)) {\n        return size;\n      }\n      return UNCACHED;\n    }),\n    _offsets: range(length, (i) => {\n      if (i === 0) {\n        // first offset must be 0\n        return 0;\n      }\n      const offset = cache && cache._offsets[i];\n      if (exists(offset)) {\n        return offset;\n      }\n      return UNCACHED;\n    }),\n  };\n};\n","import {\n  findStartIndexWithOffset,\n  resetCache,\n  getItemSize,\n  computeTotalSize,\n  findEndIndex,\n  computeStartOffset,\n  Cache,\n  UNCACHED,\n  setItemSize,\n  hasUnmeasuredItemsInRange,\n  estimateDefaultItemSize,\n} from \"./cache\";\nimport type { Writeable } from \"./types\";\nimport { abs, exists, max, min, timeout } from \"./utils\";\n\ntype ItemJump = Readonly<[sizeDiff: number, index: number]>;\nexport type ScrollJump = Readonly<number>;\nexport type ItemResize = Readonly<[index: number, size: number]>;\ntype ItemsRange = Readonly<[startIndex: number, endIndex: number]>;\n\nconst sumJumps = (jump: readonly ItemJump[]): number =>\n  jump.reduce((acc, [j]) => acc + j, 0);\nconst calculateJumps = (cache: Cache, items: ItemResize[]): ItemJump[] => {\n  return items.map(([index, size]) => {\n    return [size - getItemSize(cache, index), index];\n  });\n};\n\nexport const SCROLL_STOP = 0;\nexport const SCROLL_DOWN = 1;\nexport const SCROLL_UP = 2;\nexport const SCROLL_MANUAL = 3;\ntype ScrollDirection =\n  | typeof SCROLL_STOP\n  | typeof SCROLL_DOWN\n  | typeof SCROLL_UP\n  | typeof SCROLL_MANUAL;\n\nexport const ACTION_ITEM_RESIZE = 1;\nexport const ACTION_WINDOW_RESIZE = 2;\nexport const ACTION_SCROLL = 3;\nexport const ACTION_MANUAL_SCROLL = 4;\nexport const ACTION_SCROLL_DIRECTION_CHANGE = 5;\n\ntype Actions =\n  | [type: typeof ACTION_ITEM_RESIZE, entries: ItemResize[]]\n  | [type: typeof ACTION_WINDOW_RESIZE, size: number]\n  | [type: typeof ACTION_SCROLL, offset: number]\n  | [type: typeof ACTION_MANUAL_SCROLL, offset: number]\n  | [type: typeof ACTION_SCROLL_DIRECTION_CHANGE, direction: ScrollDirection];\n\ntype Subscriber = (sync?: boolean) => void;\n\nexport type VirtualStore = {\n  _getRange(): ItemsRange;\n  _isUnmeasuredItem(index: number): boolean;\n  _hasUnmeasuredItemsInRange(startIndex: number): boolean;\n  _getItemOffset(index: number): number;\n  _getItemSize(index: number): number;\n  _getScrollOffset(): number;\n  _getViewportSize(): number;\n  _getScrollSize(): number;\n  _getScrollableDomSize(): number;\n  _getJumpCount(): number;\n  _flushJump(): ScrollJump | undefined;\n  _getItemIndexForScrollTo(offset: number): number;\n  _waitForScrollDestinationItemsMeasured(): Promise<void>;\n  _subscribe(cb: Subscriber): () => void;\n  _update(...action: Actions): void;\n  _getScrollDirection(): ScrollDirection;\n  _updateCacheLength(length: number): void;\n};\n\nexport const createVirtualStore = (\n  elementsCount: number,\n  itemSize: number | undefined,\n  initialItemCount: number = 0,\n  isReverse: boolean,\n  onScrollStateChange: (scrolling: boolean) => void,\n  onScrollOffsetChange: (offset: number) => void\n): VirtualStore => {\n  const shouldAutoEstimateItemSize = !itemSize;\n  const initialItemSize = itemSize || 40;\n  let viewportSize = initialItemSize * max(initialItemCount - 1, 0);\n  let scrollOffset = 0;\n  let jumpCount = 0;\n  let jump: ScrollJump | undefined;\n  let cache = resetCache(elementsCount, initialItemSize);\n  let _scrollDirection: ScrollDirection = SCROLL_STOP;\n  let _resized = false;\n  let _prevRange: ItemsRange = [0, initialItemCount];\n  let _scrollToQueue: [() => void, () => void] | undefined;\n\n  const subscribers = new Set<Subscriber>();\n  const getScrollSize = (): number =>\n    computeTotalSize(cache as Writeable<Cache>);\n  const flushIsJustResized = (): boolean => {\n    const prev = _resized;\n    _resized = false;\n    return prev;\n  };\n  const updateScrollDirection = (dir: ScrollDirection): boolean | undefined => {\n    const prev = _scrollDirection;\n    _scrollDirection = dir;\n    if (_scrollDirection === SCROLL_STOP) {\n      return false;\n    } else if (\n      prev === SCROLL_STOP &&\n      (_scrollDirection === SCROLL_DOWN || _scrollDirection === SCROLL_UP)\n    ) {\n      return true;\n    }\n    return;\n  };\n\n  return {\n    _getRange() {\n      const [prevStartIndex, prevEndIndex] = _prevRange;\n      const prevOffset = computeStartOffset(\n        cache as Writeable<Cache>,\n        prevStartIndex\n      );\n      const start = findStartIndexWithOffset(\n        cache,\n        scrollOffset,\n        prevStartIndex,\n        prevOffset\n      );\n      const end = findEndIndex(cache, start, viewportSize);\n      if (prevStartIndex === start && prevEndIndex === end) {\n        return _prevRange;\n      }\n      return (_prevRange = [start, end]);\n    },\n    _isUnmeasuredItem(index) {\n      return cache._sizes[index] === UNCACHED;\n    },\n    _hasUnmeasuredItemsInRange(startIndex) {\n      return hasUnmeasuredItemsInRange(\n        cache,\n        max(0, startIndex - 2),\n        min(cache._length - 1, startIndex + 2)\n      );\n    },\n    _getItemOffset(index) {\n      const offset = computeStartOffset(cache as Writeable<Cache>, index);\n      if (isReverse) {\n        return offset + max(0, viewportSize - getScrollSize());\n      }\n      return offset;\n    },\n    _getItemSize(index) {\n      return getItemSize(cache, index);\n    },\n    _getScrollOffset() {\n      return scrollOffset;\n    },\n    _getViewportSize() {\n      return viewportSize;\n    },\n    _getScrollSize() {\n      return getScrollSize();\n    },\n    _getScrollableDomSize() {\n      return max(getScrollSize(), viewportSize);\n    },\n    _getJumpCount() {\n      return jumpCount;\n    },\n    _flushJump() {\n      const prevJump = jump;\n      jump = undefined;\n      return prevJump;\n    },\n    _getItemIndexForScrollTo(offset) {\n      return findStartIndexWithOffset(cache, offset, 0, 0);\n    },\n    _waitForScrollDestinationItemsMeasured() {\n      if (_scrollToQueue) {\n        // Cancel waiting scrollTo\n        _scrollToQueue[1]();\n      }\n      // The measurement will be done asynchronously and the timing is not predictable so we use promise.\n      // For example, ResizeObserver may not fire when window is not visible.\n      return new Promise((resolve, reject) => {\n        let resolved: boolean | undefined = false;\n\n        const resolveQueue = () => {\n          if (resolved) return;\n          resolved = true;\n          resolve();\n          _scrollToQueue = undefined;\n        };\n        _scrollToQueue = [resolveQueue, reject];\n\n        // In some specific situation with VGrid, the promise never resolved so we cancel it if timed out. \n        timeout(resolveQueue, 250);\n      });\n    },\n    _subscribe(cb) {\n      subscribers.add(cb);\n      return () => {\n        subscribers.delete(cb);\n      };\n    },\n    _update(type, payload): void {\n      let shouldSync: boolean | undefined;\n      let updatedScrollState: boolean | undefined;\n      let mutated = false;\n\n      switch (type) {\n        case ACTION_ITEM_RESIZE: {\n          const updated = payload.filter(\n            ([index, size]) => cache._sizes[index] !== size\n          );\n          // Skip if all items are cached and not updated\n          if (!updated.length) {\n            break;\n          }\n\n          let diff = 0;\n          // Calculate jump\n          if (_scrollDirection === SCROLL_UP) {\n            diff = sumJumps(calculateJumps(cache, updated));\n          } else if (_scrollDirection === SCROLL_MANUAL) {\n            const allJumps = calculateJumps(cache, updated);\n            const [startIndex] = _prevRange;\n\n            if (scrollOffset === 0) {\n              // Do nothing to stick to the start\n            } else if (getScrollSize() <= scrollOffset + viewportSize) {\n              // Keep end to stick to the end\n              diff = sumJumps(allJumps);\n            } else {\n              // Keep start at mid\n              diff = sumJumps(\n                allJumps.filter(([, index]) => index < startIndex)\n              );\n            }\n          } else {\n            // Do nothing\n          }\n\n          if (diff) {\n            jump = diff;\n            jumpCount++;\n          }\n\n          // Update item sizes\n          let isNewItemMeasured = false;\n          updated.forEach(([index, size]) => {\n            if (setItemSize(cache as Writeable<Cache>, index, size)) {\n              isNewItemMeasured = true;\n            }\n          });\n\n          // Estimate initial item size from measured sizes\n          if (\n            shouldAutoEstimateItemSize &&\n            isNewItemMeasured &&\n            // TODO support reverse scroll also\n            !scrollOffset\n          ) {\n            estimateDefaultItemSize(cache as Writeable<Cache>);\n          }\n\n          _resized = shouldSync = mutated = true;\n          break;\n        }\n        case ACTION_WINDOW_RESIZE: {\n          mutated = viewportSize !== payload;\n          viewportSize = payload;\n          break;\n        }\n        case ACTION_SCROLL:\n        case ACTION_MANUAL_SCROLL: {\n          // Skip if offset is not changed\n          if (scrollOffset === payload) {\n            break;\n          }\n\n          if (type === ACTION_SCROLL) {\n            // Skip scroll direction detection just after resizing because it may result in the opposite direction.\n            // Scroll events are dispatched enough so it's ok to skip some of them.\n            const isJustResized = flushIsJustResized();\n            if (\n              (_scrollDirection === SCROLL_STOP || !isJustResized) &&\n              // Ignore until manual scrolling\n              _scrollDirection !== SCROLL_MANUAL\n            ) {\n              updatedScrollState = updateScrollDirection(\n                scrollOffset > payload ? SCROLL_UP : SCROLL_DOWN\n              );\n            }\n\n            // Ignore manual scroll because it may be called in useEffect/useLayoutEffect and cause the warn below.\n            // Warning: flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.\n            //\n            // Update synchronously if scrolled a lot\n            shouldSync = abs(scrollOffset - payload) > viewportSize;\n          }\n\n          scrollOffset = payload;\n          mutated = true;\n          break;\n        }\n        case ACTION_SCROLL_DIRECTION_CHANGE: {\n          updatedScrollState = updateScrollDirection(payload);\n          break;\n        }\n      }\n\n      if (mutated) {\n        subscribers.forEach((cb) => {\n          cb(shouldSync);\n        });\n\n        if (type === ACTION_SCROLL) {\n          onScrollOffsetChange(scrollOffset);\n        }\n      }\n      if (_scrollToQueue) {\n        if (type === ACTION_ITEM_RESIZE) {\n          _scrollToQueue[0]();\n        }\n      }\n      if (exists(updatedScrollState)) {\n        onScrollStateChange(updatedScrollState);\n      }\n    },\n    _getScrollDirection() {\n      return _scrollDirection;\n    },\n    _updateCacheLength(length) {\n      // It's ok to be updated in render because states should be calculated consistently regardless cache length\n      if (cache._length === length) return;\n      cache = resetCache(length, initialItemSize, cache);\n    },\n  };\n};\n","import { useEffect, useLayoutEffect } from \"react\";\n\n// https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\nexport const useIsomorphicLayoutEffect =\n  typeof window !== \"undefined\" ? useLayoutEffect : useEffect;\n","import { ReactNode } from \"react\";\nimport { exists } from \"../core/utils\";\n\nexport const refKey = \"current\";\n\nexport const isInvalidElement = <T extends ReactNode>(\n  e: T\n): e is Extract<T, null | undefined | boolean> =>\n  !exists(e) || typeof e === \"boolean\";\n","import { useRef } from \"react\";\nimport { useIsomorphicLayoutEffect } from \"./useIsomorphicLayoutEffect\";\nimport { refKey } from \"./utils\";\n\nexport const useRefWithUpdate = <T>(value: T) => {\n  const ref = useRef<T>(value);\n\n  useIsomorphicLayoutEffect(() => {\n    ref[refKey] = value;\n  }, [value]);\n\n  return ref;\n};\n","import { useLayoutEffect, useState } from \"react\";\nimport { flushSync } from \"react-dom\";\nimport { useRefWithUpdate } from \"./useRefWithUpdate\";\nimport { refKey } from \"./utils\";\nimport { VirtualStore } from \"../core/store\";\n\nexport const useStore = <T>(\n  store: VirtualStore,\n  getSnapShot: () => T,\n  shouldGetLatest?: boolean\n): T => {\n  const [state, setState] = useState(getSnapShot);\n  const getter = useRefWithUpdate(getSnapShot);\n\n  useLayoutEffect(() => {\n    const update = () => {\n      setState(() => getter[refKey]());\n    };\n    return store._subscribe((sync) => {\n      if (sync) {\n        flushSync(update);\n      } else {\n        update();\n      }\n    });\n  }, []);\n\n  // especially for sort of items\n  if (shouldGetLatest) {\n    const snap = getSnapShot();\n    if (state !== snap) {\n      setState(snap);\n    }\n  }\n  return state;\n};\n","import { once } from \"./utils\";\n\n// The scroll position may be negative value in rtl direction.\n//\n// left  right result\n// -100  0     true    spec compliant\n// 0     100   false   probably Chrome earlier than v85\n// https://github.com/othree/jquery.rtl-scroll-type\nexport const hasNegativeOffsetInRtl = once((scrollable: HTMLElement) => {\n  const key = \"scrollLeft\";\n  const prev = scrollable[key];\n  scrollable[key] = 1;\n  // scrollLeft can be positive under some specific situations even if negative mode, so we use `<` for now.\n  const isNegative = scrollable[key] < 1;\n  scrollable[key] = prev;\n  return isNegative;\n});\n","import { hasNegativeOffsetInRtl } from \"./dom\";\nimport {\n  ACTION_SCROLL,\n  ACTION_MANUAL_SCROLL,\n  ScrollJump,\n  VirtualStore,\n  SCROLL_STOP,\n  ACTION_SCROLL_DIRECTION_CHANGE,\n  SCROLL_MANUAL,\n} from \"./store\";\nimport { debounce, throttle, max, min } from \"./utils\";\n\nexport type Scroller = {\n  _initRoot: (rootElement: HTMLElement) => () => void;\n  _getActualScrollSize: () => number;\n  _scrollTo: (offset: number) => void;\n  _scrollToIndex: (index: number, count: number) => void;\n  _fixScrollJump: (jump: ScrollJump) => void;\n};\n\nexport const createScroller = (\n  store: VirtualStore,\n  isHorizontal: boolean,\n  isRtl: boolean\n): Scroller => {\n  let rootElement: HTMLElement | undefined;\n  const scrollToKey = isHorizontal ? \"scrollLeft\" : \"scrollTop\";\n\n  const getActualScrollSize = (): number => {\n    if (!rootElement) return 0;\n    // Use element's scrollHeight/scrollWidth instead of stored scrollSize.\n    // This is because stored size may differ from the actual size, for example when a new item is added and not yet measured.\n    return isHorizontal ? rootElement.scrollWidth : rootElement.scrollHeight;\n  };\n  const normalizeRtlOffset = (offset: number, diff?: boolean): number => {\n    if (hasNegativeOffsetInRtl(rootElement!)) {\n      return -offset;\n    } else {\n      return diff\n        ? -offset\n        : store._getScrollSize() - store._getViewportSize() - offset;\n    }\n  };\n  const scrollTo = (offset: number, diff?: boolean) => {\n    if (!rootElement) return;\n    if (isHorizontal && isRtl) {\n      offset = normalizeRtlOffset(offset, diff);\n    }\n    if (diff) {\n      rootElement[scrollToKey] += offset;\n    } else {\n      rootElement[scrollToKey] = offset;\n    }\n  };\n  const scrollManually = async (\n    index: number,\n    getCurrentOffset: () => number\n  ) => {\n    const getOffset = (): number => {\n      let offset = getCurrentOffset();\n      const scrollSize = getActualScrollSize();\n      const viewportSize = store._getViewportSize();\n      if (scrollSize - (offset + viewportSize) <= 0) {\n        // Adjust if the offset is over the end, to get correct startIndex.\n        offset = scrollSize - viewportSize;\n      }\n      return offset;\n    };\n\n    while (true) {\n      // Sync viewport to scroll destination\n      // In order to scroll to the correct position, mount the items and measure their sizes before scrolling.\n      store._update(ACTION_MANUAL_SCROLL, getOffset());\n\n      if (!store._hasUnmeasuredItemsInRange(index)) {\n        break;\n      }\n\n      try {\n        // Wait for the scroll destination items to be measured.\n        await store._waitForScrollDestinationItemsMeasured();\n      } catch (e) {\n        // canceled\n        return;\n      }\n    }\n\n    // Scroll with the updated value\n    scrollTo(getOffset());\n    store._update(ACTION_SCROLL_DIRECTION_CHANGE, SCROLL_MANUAL);\n  };\n\n  return {\n    _initRoot(root) {\n      rootElement = root;\n\n      const syncViewportToScrollPosition = () => {\n        let offset = root[scrollToKey];\n        if (isHorizontal && isRtl) {\n          offset = normalizeRtlOffset(offset);\n        }\n        store._update(ACTION_SCROLL, offset);\n      };\n\n      const onScrollStopped = debounce(() => {\n        // Check scroll position once just after scrolling stopped\n        syncViewportToScrollPosition();\n        store._update(ACTION_SCROLL_DIRECTION_CHANGE, SCROLL_STOP);\n      }, 150);\n\n      const onScroll = () => {\n        syncViewportToScrollPosition();\n        onScrollStopped();\n      };\n\n      // Infer scroll state also from wheel events\n      // Sometimes scroll events do not fire when frame dropped even if the visual have been already scrolled\n      const onWheel = throttle((e: WheelEvent) => {\n        if (store._getScrollDirection() === SCROLL_STOP) {\n          // Scroll start should be detected with scroll event\n          return;\n        }\n        if (e.ctrlKey) {\n          // Probably a pinch-to-zoom gesture\n          return;\n        }\n        // Get delta before checking deltaMode for firefox behavior\n        // https://github.com/w3c/uievents/issues/181#issuecomment-392648065\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1392460#c34\n        if (isHorizontal ? e.deltaX : e.deltaY) {\n          const offset = store._getScrollOffset();\n          if (\n            offset > 0 &&\n            offset < store._getScrollSize() - store._getViewportSize()\n          ) {\n            onScrollStopped();\n          }\n        }\n      }, 50);\n\n      root.addEventListener(\"scroll\", onScroll);\n      root.addEventListener(\"wheel\", onWheel, { passive: true });\n\n      return () => {\n        root.removeEventListener(\"scroll\", onScroll);\n        root.removeEventListener(\"wheel\", onWheel);\n        onScrollStopped._cancel();\n      };\n    },\n    _getActualScrollSize: getActualScrollSize,\n    _scrollTo(offset) {\n      offset = max(offset, 0);\n\n      scrollManually(store._getItemIndexForScrollTo(offset), () => offset);\n    },\n    _scrollToIndex(index, count) {\n      index = max(min(index, count - 1), 0);\n\n      scrollManually(index, () => store._getItemOffset(index));\n    },\n    _fixScrollJump: (jump) => {\n      scrollTo(jump, true);\n    },\n  };\n};\n","import { useRef } from \"react\";\nimport { refKey } from \"./utils\";\n\nexport const useStatic = <T>(init: () => T): T => {\n  const ref = useRef<T>();\n  return ref[refKey] || (ref[refKey] = init());\n};\n","import {\n  ACTION_ITEM_RESIZE,\n  ACTION_WINDOW_RESIZE,\n  ItemResize,\n  VirtualStore,\n} from \"./store\";\nimport { exists, max, once } from \"./utils\";\n\nexport const createResizer = (store: VirtualStore, isHorizontal: boolean) => {\n  let rootElement: HTMLElement | undefined;\n  const sizeKey = isHorizontal ? \"width\" : \"height\";\n  const mountedIndexes = new WeakMap<Element, number>();\n\n  // Initialize ResizeObserver lazily for SSR\n  const getResizeObserver = once(() => {\n    // https://www.w3.org/TR/resize-observer/#intro\n    return new ResizeObserver((entries) => {\n      const resizes: ItemResize[] = [];\n      for (const { target, contentRect } of entries) {\n        if (target === rootElement) {\n          store._update(ACTION_WINDOW_RESIZE, contentRect[sizeKey]);\n        } else {\n          const index = mountedIndexes.get(target);\n          if (exists(index)) {\n            resizes.push([index, contentRect[sizeKey]]);\n          }\n        }\n      }\n\n      if (resizes.length) {\n        store._update(ACTION_ITEM_RESIZE, resizes);\n      }\n    });\n  });\n\n  return {\n    _observeRoot(root: HTMLElement) {\n      rootElement = root;\n      const ro = getResizeObserver();\n      ro.observe(root);\n      return () => {\n        ro.disconnect();\n      };\n    },\n    _observeItem(el: HTMLElement, i: number) {\n      const ro = getResizeObserver();\n      mountedIndexes.set(el, i);\n      ro.observe(el);\n      return () => {\n        mountedIndexes.delete(el);\n        ro.unobserve(el);\n      };\n    },\n  };\n};\n\nexport type Resizer = ReturnType<typeof createResizer>;\n\nexport const createGridResizer = (\n  vStore: VirtualStore,\n  hStore: VirtualStore\n) => {\n  let rootElement: HTMLElement | undefined;\n\n  const heightKey = \"height\";\n  const widthKey = \"width\";\n  const mountedIndexes = new WeakMap<\n    Element,\n    [rowIndex: number, colIndex: number]\n  >();\n\n  type CellSize = [height: number, width: number];\n  const maybeCachedRowIndexes = new Set<number>();\n  const maybeCachedColIndexes = new Set<number>();\n  const sizeCache = new Map<string, CellSize>();\n  const getKey = (rowIndex: number, colIndex: number): string =>\n    `${rowIndex}-${colIndex}`;\n\n  // Initialize ResizeObserver lazily for SSR\n  const getResizeObserver = once(() => {\n    // https://www.w3.org/TR/resize-observer/#intro\n    return new ResizeObserver((entries) => {\n      const resizedRows = new Set<number>();\n      const resizedCols = new Set<number>();\n      for (const { target, contentRect } of entries) {\n        if (target === rootElement) {\n          vStore._update(ACTION_WINDOW_RESIZE, contentRect[heightKey]);\n          hStore._update(ACTION_WINDOW_RESIZE, contentRect[widthKey]);\n        } else {\n          const cell = mountedIndexes.get(target);\n          if (cell) {\n            const [rowIndex, colIndex] = cell;\n            const key = getKey(rowIndex, colIndex);\n            const prevSize = sizeCache.get(key);\n            const size: CellSize = [\n              contentRect[heightKey],\n              contentRect[widthKey],\n            ];\n            let rowResized: boolean | undefined;\n            let colResized: boolean | undefined;\n            if (!prevSize) {\n              rowResized = colResized = true;\n            } else {\n              if (prevSize[0] !== size[0]) {\n                rowResized = true;\n              }\n              if (prevSize[1] !== size[1]) {\n                colResized = true;\n              }\n            }\n            if (rowResized) {\n              resizedRows.add(rowIndex);\n            }\n            if (colResized) {\n              resizedCols.add(colIndex);\n            }\n            if (rowResized || colResized) {\n              sizeCache.set(key, size);\n            }\n          }\n        }\n      }\n\n      if (resizedRows.size) {\n        const heightResizes: ItemResize[] = [];\n        resizedRows.forEach((rowIndex) => {\n          let maxHeight = 0;\n          maybeCachedColIndexes.forEach((colIndex) => {\n            const size = sizeCache.get(getKey(rowIndex, colIndex));\n            if (size) {\n              maxHeight = max(maxHeight, size[0]);\n            }\n          });\n          if (maxHeight) {\n            heightResizes.push([rowIndex, maxHeight]);\n          }\n        });\n        vStore._update(ACTION_ITEM_RESIZE, heightResizes);\n      }\n      if (resizedCols.size) {\n        const widthResizes: ItemResize[] = [];\n        resizedCols.forEach((colIndex) => {\n          let maxWidth = 0;\n          maybeCachedRowIndexes.forEach((rowIndex) => {\n            const size = sizeCache.get(getKey(rowIndex, colIndex));\n            if (size) {\n              maxWidth = max(maxWidth, size[1]);\n            }\n          });\n          if (maxWidth) {\n            widthResizes.push([colIndex, maxWidth]);\n          }\n        });\n        hStore._update(ACTION_ITEM_RESIZE, widthResizes);\n      }\n    });\n  });\n\n  return {\n    _observeRoot(root: HTMLElement) {\n      rootElement = root;\n      const ro = getResizeObserver();\n      ro.observe(root);\n      return () => {\n        ro.disconnect();\n      };\n    },\n    _observeItem(el: HTMLElement, rowIndex: number, colIndex: number) {\n      const ro = getResizeObserver();\n      mountedIndexes.set(el, [rowIndex, colIndex]);\n      maybeCachedRowIndexes.add(rowIndex);\n      maybeCachedColIndexes.add(colIndex);\n      ro.observe(el);\n      return () => {\n        mountedIndexes.delete(el);\n        ro.unobserve(el);\n      };\n    },\n  };\n};\n\nexport type GridResizer = ReturnType<typeof createGridResizer>;\n","import {\n  CSSProperties,\n  ReactElement,\n  ReactNode,\n  forwardRef,\n  useMemo,\n} from \"react\";\n\nexport type WindowComponentAttributes = Pick<\n  React.HTMLAttributes<HTMLElement>,\n  \"className\" | \"style\" | \"id\" | \"role\" | \"tabIndex\"\n> &\n  React.AriaAttributes;\n\n/**\n * Props of customized scrollable component.\n */\nexport interface CustomWindowComponentProps {\n  /**\n   * Renderable item elements.\n   */\n  children: ReactNode;\n  /**\n   * Attributes that should be passed to the scrollable element.\n   */\n  attrs: WindowComponentAttributes;\n  /**\n   * Total height of items. It's undefined if component is not vertically scrollable.\n   */\n  height: number | undefined;\n  /**\n   * Total width of items. It's undefined if component is not horizontally scrollable.\n   */\n  width: number | undefined;\n  /**\n   * Currently component is scrolling or not.\n   */\n  scrolling: boolean;\n}\n\nexport const DefaultWindow = forwardRef<any, CustomWindowComponentProps>(\n  ({ children, attrs, width, height, scrolling }, ref): ReactElement => {\n    return (\n      <div ref={ref} {...attrs}>\n        <div\n          style={useMemo((): CSSProperties => {\n            return {\n              position: \"relative\",\n              visibility: \"hidden\",\n              width: width ?? \"100%\",\n              height: height ?? \"100%\",\n              pointerEvents: scrolling ? \"none\" : \"auto\",\n            };\n          }, [width, height, scrolling])}\n        >\n          {children}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport type CustomWindowComponent = typeof DefaultWindow;\n"],"names":["min","max","abs","now","timeout","exists","v","range","length","cb","_","i","median","arr","s","a","b","mid","debounce","fn","ms","id","cancel","debouncedFn","throttle","time","args","n","once","called","cache","UNCACHED","getItemSize","index","size","setItemSize","isInitialMeasurement","computeOffset","isTotal","top","computeTotalSize","computeStartOffset","findIndex","distance","sum","h","findStartIndexWithOffset","offset","prevStartIndex","prevOffset","hasUnmeasuredItemsInRange","startIndex","endIndex","estimateDefaultItemSize","measuredSizes","startItemSize","resetCache","itemSize","sumJumps","jump","acc","j","calculateJumps","items","SCROLL_STOP","SCROLL_DOWN","SCROLL_UP","SCROLL_MANUAL","ACTION_ITEM_RESIZE","ACTION_WINDOW_RESIZE","ACTION_SCROLL","ACTION_MANUAL_SCROLL","ACTION_SCROLL_DIRECTION_CHANGE","createVirtualStore","elementsCount","initialItemCount","isReverse","onScrollStateChange","onScrollOffsetChange","shouldAutoEstimateItemSize","initialItemSize","viewportSize","scrollOffset","jumpCount","_scrollDirection","_resized","_prevRange","_scrollToQueue","subscribers","getScrollSize","flushIsJustResized","prev","updateScrollDirection","dir","prevEndIndex","start","end","findEndIndex","prevJump","resolve","reject","resolved","resolveQueue","type","payload","shouldSync","updatedScrollState","mutated","updated","diff","allJumps","isNewItemMeasured","isJustResized","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","refKey","isInvalidElement","useRefWithUpdate","value","ref","useRef","useStore","store","getSnapShot","shouldGetLatest","state","setState","useState","getter","update","sync","flushSync","snap","hasNegativeOffsetInRtl","scrollable","key","isNegative","createScroller","isHorizontal","isRtl","rootElement","scrollToKey","getActualScrollSize","normalizeRtlOffset","scrollTo","scrollManually","getCurrentOffset","getOffset","scrollSize","root","syncViewportToScrollPosition","onScrollStopped","onScroll","onWheel","e","count","useStatic","init","createResizer","sizeKey","mountedIndexes","getResizeObserver","entries","resizes","target","contentRect","ro","el","createGridResizer","vStore","hStore","heightKey","widthKey","maybeCachedRowIndexes","maybeCachedColIndexes","sizeCache","getKey","rowIndex","colIndex","resizedRows","resizedCols","cell","prevSize","rowResized","colResized","heightResizes","maxHeight","widthResizes","maxWidth","DefaultWindow","forwardRef","children","attrs","width","height","scrolling","jsx","useMemo"],"mappings":"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"}