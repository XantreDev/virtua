{"version":3,"file":"VList-d5ac24d1.js","sources":["../../src/react/VList.tsx"],"sourcesContent":["import {\n  useRef,\n  useMemo,\n  ReactElement,\n  forwardRef,\n  useImperativeHandle,\n  ReactNode,\n  useEffect,\n} from \"react\";\nimport {\n  UPDATE_SCROLL_WITH_EVENT,\n  ACTION_ITEMS_LENGTH_CHANGE,\n  createVirtualStore,\n} from \"../core/store\";\nimport { useIsomorphicLayoutEffect } from \"./useIsomorphicLayoutEffect\";\nimport {\n  SELECT_IS_SCROLLING,\n  SELECT_JUMP_COUNT,\n  SELECT_RANGE,\n  SELECT_SCROLL_SIZE,\n  useSelector,\n} from \"./useSelector\";\nimport { exists, max, min, values } from \"../core/utils\";\nimport { createScroller } from \"../core/scroller\";\nimport { MayHaveKey, emptyComponents, flattenChildren, refKey } from \"./utils\";\nimport { useStatic } from \"./useStatic\";\nimport { useLatestRef } from \"./useLatestRef\";\nimport { createResizer } from \"../core/resizer\";\nimport { ViewportComponentAttributes } from \"..\";\nimport {\n  CustomViewportComponent,\n  CustomViewportComponentProps,\n  Viewport as DefaultViewport,\n} from \"./Viewport\";\nimport { CustomItemComponent, ListItem } from \"./ListItem\";\nimport { CacheSnapshot, ScrollToIndexAlign } from \"../core/types\";\nimport { Cache } from \"../core/cache\";\n\nexport type ScrollMode = \"reverse\" | \"rtl\";\n\ntype CustomItemComponentOrElement =\n  | keyof JSX.IntrinsicElements\n  | CustomItemComponent;\n\n/**\n * Methods of {@link VList}.\n */\nexport interface VListHandle {\n  /**\n   * Get current {@link CacheSnapshot}.\n   */\n  readonly cache: CacheSnapshot;\n  /**\n   * Get current scrollTop or scrollLeft.\n   */\n  readonly scrollOffset: number;\n  /**\n   * Get current scrollHeight or scrollWidth.\n   */\n  readonly scrollSize: number;\n  /**\n   * Get current offsetHeight or offsetWidth.\n   */\n  readonly viewportSize: number;\n  /**\n   * Scroll to the item specified by index.\n   * @param index index of item\n   * @param align alignment of item\n   */\n  scrollToIndex(index: number, align?: ScrollToIndexAlign): void;\n  /**\n   * Scroll to the given offset.\n   * @param offset offset from start\n   */\n  scrollTo(offset: number): void;\n  /**\n   * Scroll by the given offset.\n   * @param offset offset from current position\n   */\n  scrollBy(offset: number): void;\n}\n\n/**\n * Props of {@link VList}.\n */\nexport interface VListProps extends ViewportComponentAttributes {\n  /**\n   * Elements rendered by this component.\n   */\n  children: ReactNode;\n  /**\n   * Number of items to render above/below the visible bounds of the list. You can increase to avoid showing blank items in fast scrolling.\n   * @defaultValue 4\n   */\n  overscan?: number;\n  /**\n   * Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.\n   *\n   * - If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.\n   * - If set, you can opt out estimation and use the value as initial item size.\n   */\n  initialItemSize?: number;\n  /**\n   * If set, the specified amount of items will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.\n   */\n  initialItemCount?: number;\n  /**\n   * While true is set, scroll position will be maintained from the end not usual start when items are shifted/unshifted. It is useful for reverse infinite scrolling.\n   */\n  shift?: boolean;\n  /**\n   * If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.\n   */\n  horizontal?: boolean;\n  /**\n   * Scroll modes that should be set in certain situations.\n   *\n   * - `reverse`: This mode will adjust some styles to be suitable for bottom-to-top scrolling.\n   * - `rtl`: You have to set this mode if you use this component under `direction: rtl` style.\n   */\n  mode?: ScrollMode;\n  /**\n   * You can restore cache by passing a {@link CacheSnapshot} on mount. This is useful when you want to restore scroll position after navigation. The snapshot can be obtained from {@link VListHandle.cache}.\n   */\n  cache?: CacheSnapshot;\n  /**\n   * Customized components for advanced usage.\n   */\n  components?: {\n    /**\n     * Component for scrollable element. This component will get {@link CustomViewportComponentProps} as props.\n     * @defaultValue {@link DefaultViewport}\n     */\n    Root?: CustomViewportComponent;\n    /**\n     * Component or element type for item element. This component will get {@link CustomItemComponentProps} as props.\n     * @defaultValue \"div\"\n     */\n    Item?: CustomItemComponentOrElement;\n  };\n  /**\n   * Callback invoked whenever scroll offset changes.\n   * @param offset Current scrollTop or scrollLeft.\n   */\n  onScroll?: (offset: number) => void;\n  /**\n   * Callback invoked when scrolling stops.\n   */\n  onScrollStop?: () => void;\n  /**\n   * Callback invoked when visible items range changes.\n   */\n  onRangeChange?: (\n    /**\n     * The start index of viewable items.\n     */\n    startIndex: number,\n    /**\n     * The end index of viewable items.\n     */\n    endIndex: number\n  ) => void;\n}\n\n/**\n * Virtualized list component. See {@link VListProps} and {@link VListHandle}.\n */\nexport const VList = forwardRef<VListHandle, VListProps>(\n  (\n    {\n      children,\n      overscan = 4,\n      initialItemSize,\n      initialItemCount,\n      shift,\n      horizontal: horizontalProp,\n      mode,\n      cache,\n      components: {\n        Root: Viewport = DefaultViewport,\n        Item: ItemElement = \"div\",\n      } = emptyComponents as {\n        Root?: undefined;\n        Item?: undefined;\n      },\n      onScroll: onScrollProp,\n      onScrollStop: onScrollStopProp,\n      onRangeChange: onRangeChangeProp,\n      ...viewportAttrs\n    },\n    ref\n  ): ReactElement => {\n    // Memoize element array\n    const elements = useMemo(() => flattenChildren(children), [children]);\n    const count = elements.length;\n\n    const onScroll = useLatestRef(onScrollProp);\n    const onScrollStop = useLatestRef(onScrollStopProp);\n\n    const [store, resizer, scroller, isHorizontal, isRtl] = useStatic(() => {\n      const _isHorizontal = !!horizontalProp;\n      const _isRtl = mode === \"rtl\";\n      const _store = createVirtualStore(\n        count,\n        initialItemSize,\n        initialItemCount,\n        cache as unknown as Cache | undefined,\n        mode === \"reverse\",\n        !initialItemSize\n      );\n      return [\n        _store,\n        createResizer(_store, _isHorizontal),\n        createScroller(_store, _isHorizontal, _isRtl),\n        _isHorizontal,\n        _isRtl,\n      ];\n    });\n\n    // The elements length and cached items length are different just after element is added/removed.\n    if (count !== store._getItemsLength()) {\n      store._update(ACTION_ITEMS_LENGTH_CHANGE, [count, shift]);\n    }\n\n    const [startIndex, endIndex] = useSelector(\n      store,\n      store._getRange,\n      SELECT_RANGE\n    );\n    const scrolling = useSelector(\n      store,\n      store._getIsScrolling,\n      SELECT_IS_SCROLLING\n    );\n    const jumpCount = useSelector(\n      store,\n      store._getJumpCount,\n      SELECT_JUMP_COUNT\n    );\n    const scrollSize = useSelector(\n      store,\n      store._getCorrectedScrollSize,\n      SELECT_SCROLL_SIZE,\n      true\n    );\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    useIsomorphicLayoutEffect(() => {\n      const root = rootRef[refKey]!;\n      const unobserve = resizer._observeRoot(root);\n      const cleanup = scroller._initRoot(root);\n      const cleanupOnScroll = store._subscribe(UPDATE_SCROLL_WITH_EVENT, () => {\n        onScroll[refKey] && onScroll[refKey](store._getScrollOffset());\n      });\n      return () => {\n        unobserve();\n        cleanup();\n        cleanupOnScroll();\n      };\n    }, []);\n\n    useIsomorphicLayoutEffect(() => {\n      const jump = store._flushJump();\n      if (!jump) return;\n\n      scroller._fixScrollJump(jump);\n    }, [jumpCount]);\n\n    useEffect(() => {\n      if (!scrolling) {\n        onScrollStop[refKey] && onScrollStop[refKey]();\n      }\n    }, [scrolling]);\n\n    useEffect(() => {\n      if (!onRangeChangeProp) return;\n\n      onRangeChangeProp(startIndex, endIndex);\n    }, [startIndex, endIndex]);\n\n    useImperativeHandle(\n      ref,\n      () => {\n        return {\n          get cache() {\n            return store._getCache();\n          },\n          get scrollOffset() {\n            return store._getScrollOffset();\n          },\n          get scrollSize() {\n            return scroller._getActualScrollSize();\n          },\n          get viewportSize() {\n            return store._getViewportSize();\n          },\n          scrollToIndex: scroller._scrollToIndex,\n          scrollTo: scroller._scrollTo,\n          scrollBy: scroller._scrollBy,\n        };\n      },\n      []\n    );\n\n    const overscanedStartIndex = max(startIndex - overscan, 0);\n    const overscanedEndIndex = min(endIndex + overscan, count - 1);\n    const items = useMemo(() => {\n      const res: ReactElement[] = [];\n      for (let i = overscanedStartIndex; i <= overscanedEndIndex; i++) {\n        const e = elements[i]!;\n        const key = (e as MayHaveKey).key;\n        res.push(\n          <ListItem\n            key={exists(key) ? key : \"_\" + i}\n            _resizer={resizer}\n            _store={store}\n            _index={i}\n            _element={ItemElement as \"div\"}\n            _children={e}\n            _isHorizontal={isHorizontal}\n            _isRtl={isRtl}\n          />\n        );\n      }\n      return res;\n    }, [elements, overscanedStartIndex, overscanedEndIndex]);\n\n    return (\n      <Viewport\n        ref={rootRef}\n        width={isHorizontal ? scrollSize : undefined}\n        height={isHorizontal ? undefined : scrollSize}\n        scrolling={scrolling}\n        attrs={useMemo(\n          () => ({\n            ...viewportAttrs,\n            style: {\n              overflow: isHorizontal ? \"auto hidden\" : \"hidden auto\",\n              display: isHorizontal ? \"inline-block\" : \"block\",\n              contain: \"strict\",\n              // transform: \"translate3d(0px, 0px, 0px)\",\n              // willChange: \"scroll-position\",\n              // backfaceVisibility: \"hidden\",\n              // https://github.com/bvaughn/react-window/issues/395\n              // willChange: \"transform\",\n              width: \"100%\",\n              height: \"100%\",\n              padding: 0,\n              margin: 0,\n              ...viewportAttrs.style,\n            },\n          }),\n          values(viewportAttrs)\n        )}\n      >\n        {items}\n      </Viewport>\n    );\n  }\n);\n"],"names":["VList","forwardRef","children","overscan","initialItemSize","initialItemCount","shift","horizontalProp","mode","cache","Viewport","DefaultViewport","ItemElement","emptyComponents","onScrollProp","onScrollStopProp","onRangeChangeProp","viewportAttrs","ref","elements","useMemo","flattenChildren","count","onScroll","useLatestRef","onScrollStop","store","resizer","scroller","isHorizontal","isRtl","useStatic","_isHorizontal","_isRtl","_store","createVirtualStore","createResizer","createScroller","ACTION_ITEMS_LENGTH_CHANGE","startIndex","endIndex","useSelector","SELECT_RANGE","scrolling","SELECT_IS_SCROLLING","jumpCount","SELECT_JUMP_COUNT","scrollSize","SELECT_SCROLL_SIZE","rootRef","useRef","useIsomorphicLayoutEffect","root","refKey","unobserve","cleanup","cleanupOnScroll","UPDATE_SCROLL_WITH_EVENT","jump","useEffect","useImperativeHandle","overscanedStartIndex","max","overscanedEndIndex","min","items","res","i","e","key","jsx","ListItem","exists","values"],"mappings":"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"}