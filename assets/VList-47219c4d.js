import{j as w}from"./jsx-runtime-c3d7f245.js";import{r as n}from"./index-c6dae603.js";import{f as W,u as X,A as F,a as K,b as E,r as a,U as Z,c as Q,o as $,e as ee,v as te,V as oe,d as ne,g as se,p as re,n as le,S as ae,j as ie,k as ce}from"./useRerender-d153835b.js";import{u as L,L as ue}from"./ListItem-2787ef02.js";import{r as me}from"./index-eb008d06.js";const T=n.forwardRef(({children:s,count:h,overscan:_=4,initialItemSize:b,initialItemCount:R,shift:x,horizontal:k,reverse:q,cache:O,components:{Root:H=oe,Item:N="div"}=ne,onScroll:j,onScrollStop:A,onRangeChange:y,...u},D)=>{const[P,i]=n.useMemo(()=>{if(typeof s=="function")return[s,h||0];const e=W(s);return[o=>e[o],e.length]},[s,h]),S=L(j),g=L(A),[t,I,r,l]=X(()=>{const e=!!k,o=se(i,b,R,O,!!q,!b);return[o,re(o,e),le(o,e),e]});i!==t._getItemsLength()&&t._update(F,[i,x]);const v=K(),[m,d]=t._getRange(),f=t._getScrollDirection(),U=t._getJumpCount(),V=t._getTotalSize(),z=n.useRef(null),p=f!==ae;E(()=>{const e=z[a],o=t._subscribe(Z+Q,G=>{G?me.flushSync(v):v()}),c=t._subscribe($,()=>{S[a]&&S[a](t._getScrollOffset())}),Y=I._observeRoot(e),B=r._observe(e);return()=>{o(),c(),Y(),B()}},[]),E(()=>{const e=t._flushJump();e&&r._fixScrollJump(e)},[U]),n.useEffect(()=>{p||g[a]&&g[a]()},[p]),n.useEffect(()=>{y&&y(m,d)},[m,d]),n.useImperativeHandle(D,()=>({get cache(){return t._getCache()},get scrollOffset(){return t._getScrollOffset()},get scrollSize(){return t._getTotalSize()},get viewportSize(){return t._getViewportSize()},scrollToIndex:r._scrollToIndex,scrollTo:r._scrollTo,scrollBy:r._scrollBy}),[]);const J=ce(m,_,f),M=ie(d,_,f,i),C=[];for(let e=J;e<=M;e++){const o=P(e),c=o.key;C.push(w(ue,{_resizer:I,_index:e,_offset:t._getItemOffset(e),_hide:t._isUnmeasuredItem(e),_element:N,_children:o,_isHorizontal:l},ee(c)?c:"_"+e))}return w(H,{ref:z,width:l?V:void 0,height:l?void 0:V,scrolling:p,attrs:n.useMemo(()=>({...u,style:{[l?"overflowX":"overflowY"]:"auto",display:l?"inline-block":"block",contain:"strict",width:"100%",height:"100%",...u.style}}),te(u)),children:C})});try{T.displayName="VList",T.__docgenInfo={description:"Virtualized list component. See {@link VListProps} and {@link VListHandle}.",displayName:"VList",props:{children:{defaultValue:null,description:`Elements rendered by this component.

You can also pass a function and set {@link VListProps.count} to create elements lazily.`,name:"children",required:!0,type:{name:"ReactNode | ((index: number) => ReactElement<any, string | JSXElementConstructor<any>>)"}},count:{defaultValue:null,description:"If you set a function to {@link VListProps.children}, you have to set total number of items to this prop.",name:"count",required:!1,type:{name:"number"}},overscan:{defaultValue:{value:"4"},description:`Number of items to render above/below the visible bounds of the list. Lower value will have better performance but you can increase to avoid showing blank items in fast scrolling.
@defaultValue 4`,name:"overscan",required:!1,type:{name:"number"}},initialItemSize:{defaultValue:null,description:`Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.

- If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.
- If set, you can opt out estimation and use the value as initial item size.`,name:"initialItemSize",required:!1,type:{name:"number"}},initialItemCount:{defaultValue:null,description:"If set, the specified amount of items will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.",name:"initialItemCount",required:!1,type:{name:"number"}},shift:{defaultValue:null,description:"While true is set, scroll position will be maintained from the end not usual start when items are shifted/unshifted. It is useful for reverse infinite scrolling.",name:"shift",required:!1,type:{name:"boolean"}},horizontal:{defaultValue:null,description:"If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.",name:"horizontal",required:!1,type:{name:"boolean"}},reverse:{defaultValue:null,description:"If true, some styles will be adjusted to be suitable for bottom-to-top scrolling.",name:"reverse",required:!1,type:{name:"boolean"}},cache:{defaultValue:null,description:"You can restore cache by passing a {@link CacheSnapshot} on mount. This is useful when you want to restore scroll position after navigation. The snapshot can be obtained from {@link VListHandle.cache}.",name:"cache",required:!1,type:{name:"CacheSnapshot"}},components:{defaultValue:null,description:"Customized components for advanced usage.",name:"components",required:!1,type:{name:"{ Root?: ForwardRefExoticComponent<CustomViewportComponentProps & RefAttributes<any>>; Item?: CustomItemComponentOrElement; }"}},onScroll:{defaultValue:null,description:`Callback invoked whenever scroll offset changes.
@param offset Current scrollTop or scrollLeft.`,name:"onScroll",required:!1,type:{name:"(offset: number) => void"}},onScrollStop:{defaultValue:null,description:"Callback invoked when scrolling stops.",name:"onScrollStop",required:!1,type:{name:"() => void"}},onRangeChange:{defaultValue:null,description:"Callback invoked when visible items range changes.",name:"onRangeChange",required:!1,type:{name:"(startIndex: number, endIndex: number) => void"}}}}}catch{}export{T as V};
//# sourceMappingURL=VList-47219c4d.js.map
