{"version":3,"file":"react-virtualized.stories-794ccb85.js","sources":["../../node_modules/react-virtualized/dist/es/CellMeasurer/CellMeasurer.js","../../node_modules/react-virtualized/dist/es/CellMeasurer/CellMeasurerCache.js","../../node_modules/react-virtualized/dist/es/Grid/utils/calculateSizeAndPositionDataAndUpdateScrollOffset.js","../../node_modules/react-virtualized/dist/es/Grid/utils/CellSizeAndPositionManager.js","../../node_modules/react-virtualized/dist/es/Grid/utils/maxElementSize.js","../../node_modules/react-virtualized/dist/es/Grid/utils/ScalingCellSizeAndPositionManager.js","../../node_modules/react-virtualized/dist/es/utils/createCallbackMemoizer.js","../../node_modules/react-virtualized/dist/es/Grid/defaultOverscanIndicesGetter.js","../../node_modules/react-virtualized/dist/es/Grid/utils/updateScrollIndexHelper.js","../../node_modules/react-virtualized/dist/es/Grid/defaultCellRangeRenderer.js","../../node_modules/dom-helpers/esm/canUseDOM.js","../../node_modules/dom-helpers/esm/scrollbarSize.js","../../node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js","../../node_modules/react-virtualized/dist/es/utils/animationFrame.js","../../node_modules/react-virtualized/dist/es/utils/requestAnimationTimeout.js","../../node_modules/react-virtualized/dist/es/Grid/Grid.js","../../node_modules/react-virtualized/dist/es/Grid/accessibilityOverscanIndicesGetter.js","../../node_modules/react-virtualized/dist/es/List/List.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _class, _temp;\n\nimport * as React from 'react';\nimport { findDOMNode } from 'react-dom';\n\n/**\n * Wraps a cell and measures its rendered content.\n * Measurements are stored in a per-cell cache.\n * Cached-content is not be re-measured.\n */\nvar CellMeasurer = (_temp = _class =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(CellMeasurer, _React$PureComponent);\n\n  function CellMeasurer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CellMeasurer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CellMeasurer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"_child\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_measure\", function () {\n      var _this$props = _this.props,\n          cache = _this$props.cache,\n          _this$props$columnInd = _this$props.columnIndex,\n          columnIndex = _this$props$columnInd === void 0 ? 0 : _this$props$columnInd,\n          parent = _this$props.parent,\n          _this$props$rowIndex = _this$props.rowIndex,\n          rowIndex = _this$props$rowIndex === void 0 ? _this.props.index || 0 : _this$props$rowIndex;\n\n      var _this$_getCellMeasure = _this._getCellMeasurements(),\n          height = _this$_getCellMeasure.height,\n          width = _this$_getCellMeasure.width;\n\n      if (height !== cache.getHeight(rowIndex, columnIndex) || width !== cache.getWidth(rowIndex, columnIndex)) {\n        cache.set(rowIndex, columnIndex, width, height);\n\n        if (parent && typeof parent.recomputeGridSize === 'function') {\n          parent.recomputeGridSize({\n            columnIndex: columnIndex,\n            rowIndex: rowIndex\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_registerChild\", function (element) {\n      if (element && !(element instanceof Element)) {\n        console.warn('CellMeasurer registerChild expects to be passed Element or null');\n      }\n\n      _this._child = element;\n\n      if (element) {\n        _this._maybeMeasureCell();\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(CellMeasurer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._maybeMeasureCell();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this._maybeMeasureCell();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      return typeof children === 'function' ? children({\n        measure: this._measure,\n        registerChild: this._registerChild\n      }) : children;\n    }\n  }, {\n    key: \"_getCellMeasurements\",\n    value: function _getCellMeasurements() {\n      var cache = this.props.cache;\n      var node = this._child || findDOMNode(this); // TODO Check for a bad combination of fixedWidth and missing numeric width or vice versa with height\n\n      if (node && node.ownerDocument && node.ownerDocument.defaultView && node instanceof node.ownerDocument.defaultView.HTMLElement) {\n        var styleWidth = node.style.width;\n        var styleHeight = node.style.height; // If we are re-measuring a cell that has already been measured,\n        // It will have a hard-coded width/height from the previous measurement.\n        // The fact that we are measuring indicates this measurement is probably stale,\n        // So explicitly clear it out (eg set to \"auto\") so we can recalculate.\n        // See issue #593 for more info.\n        // Even if we are measuring initially- if we're inside of a MultiGrid component,\n        // Explicitly clear width/height before measuring to avoid being tainted by another Grid.\n        // eg top/left Grid renders before bottom/right Grid\n        // Since the CellMeasurerCache is shared between them this taints derived cell size values.\n\n        if (!cache.hasFixedWidth()) {\n          node.style.width = 'auto';\n        }\n\n        if (!cache.hasFixedHeight()) {\n          node.style.height = 'auto';\n        }\n\n        var height = Math.ceil(node.offsetHeight);\n        var width = Math.ceil(node.offsetWidth); // Reset after measuring to avoid breaking styles; see #660\n\n        if (styleWidth) {\n          node.style.width = styleWidth;\n        }\n\n        if (styleHeight) {\n          node.style.height = styleHeight;\n        }\n\n        return {\n          height: height,\n          width: width\n        };\n      } else {\n        return {\n          height: 0,\n          width: 0\n        };\n      }\n    }\n  }, {\n    key: \"_maybeMeasureCell\",\n    value: function _maybeMeasureCell() {\n      var _this$props2 = this.props,\n          cache = _this$props2.cache,\n          _this$props2$columnIn = _this$props2.columnIndex,\n          columnIndex = _this$props2$columnIn === void 0 ? 0 : _this$props2$columnIn,\n          parent = _this$props2.parent,\n          _this$props2$rowIndex = _this$props2.rowIndex,\n          rowIndex = _this$props2$rowIndex === void 0 ? this.props.index || 0 : _this$props2$rowIndex;\n\n      if (!cache.has(rowIndex, columnIndex)) {\n        var _this$_getCellMeasure2 = this._getCellMeasurements(),\n            height = _this$_getCellMeasure2.height,\n            width = _this$_getCellMeasure2.width;\n\n        cache.set(rowIndex, columnIndex, width, height); // If size has changed, let Grid know to re-render.\n\n        if (parent && typeof parent.invalidateCellSizeAfterRender === 'function') {\n          parent.invalidateCellSizeAfterRender({\n            columnIndex: columnIndex,\n            rowIndex: rowIndex\n          });\n        }\n      }\n    }\n  }]);\n\n  return CellMeasurer;\n}(React.PureComponent), _defineProperty(_class, \"propTypes\", process.env.NODE_ENV === 'production' ? null : {\n  \"cache\": function cache() {\n    return (typeof bpfrpt_proptype_CellMeasureCache === \"function\" ? bpfrpt_proptype_CellMeasureCache.isRequired ? bpfrpt_proptype_CellMeasureCache.isRequired : bpfrpt_proptype_CellMeasureCache : PropTypes.shape(bpfrpt_proptype_CellMeasureCache).isRequired).apply(this, arguments);\n  },\n  \"children\": PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n  \"columnIndex\": PropTypes.number,\n  \"index\": PropTypes.number,\n  \"parent\": PropTypes.shape({\n    invalidateCellSizeAfterRender: PropTypes.func,\n    recomputeGridSize: PropTypes.func\n  }).isRequired,\n  \"rowIndex\": PropTypes.number\n}), _temp); // Used for DEV mode warning check\n\n_defineProperty(CellMeasurer, \"__internalCellMeasurerFlag\", false);\n\nexport { CellMeasurer as default };\n\nif (process.env.NODE_ENV !== 'production') {\n  CellMeasurer.__internalCellMeasurerFlag = true;\n}\n\nimport { bpfrpt_proptype_CellMeasureCache } from \"./types\";\nimport PropTypes from \"prop-types\";","import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nexport var DEFAULT_HEIGHT = 30;\nexport var DEFAULT_WIDTH = 100; // Enables more intelligent mapping of a given column and row index to an item ID.\n// This prevents a cell cache from being invalidated when its parent collection is modified.\n\n/**\n * Caches measurements for a given cell.\n */\nvar CellMeasurerCache =\n/*#__PURE__*/\nfunction () {\n  function CellMeasurerCache() {\n    var _this = this;\n\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, CellMeasurerCache);\n\n    _defineProperty(this, \"_cellHeightCache\", {});\n\n    _defineProperty(this, \"_cellWidthCache\", {});\n\n    _defineProperty(this, \"_columnWidthCache\", {});\n\n    _defineProperty(this, \"_rowHeightCache\", {});\n\n    _defineProperty(this, \"_defaultHeight\", void 0);\n\n    _defineProperty(this, \"_defaultWidth\", void 0);\n\n    _defineProperty(this, \"_minHeight\", void 0);\n\n    _defineProperty(this, \"_minWidth\", void 0);\n\n    _defineProperty(this, \"_keyMapper\", void 0);\n\n    _defineProperty(this, \"_hasFixedHeight\", void 0);\n\n    _defineProperty(this, \"_hasFixedWidth\", void 0);\n\n    _defineProperty(this, \"_columnCount\", 0);\n\n    _defineProperty(this, \"_rowCount\", 0);\n\n    _defineProperty(this, \"columnWidth\", function (_ref) {\n      var index = _ref.index;\n\n      var key = _this._keyMapper(0, index);\n\n      return _this._columnWidthCache[key] !== undefined ? _this._columnWidthCache[key] : _this._defaultWidth;\n    });\n\n    _defineProperty(this, \"rowHeight\", function (_ref2) {\n      var index = _ref2.index;\n\n      var key = _this._keyMapper(index, 0);\n\n      return _this._rowHeightCache[key] !== undefined ? _this._rowHeightCache[key] : _this._defaultHeight;\n    });\n\n    var defaultHeight = params.defaultHeight,\n        defaultWidth = params.defaultWidth,\n        fixedHeight = params.fixedHeight,\n        fixedWidth = params.fixedWidth,\n        keyMapper = params.keyMapper,\n        minHeight = params.minHeight,\n        minWidth = params.minWidth;\n    this._hasFixedHeight = fixedHeight === true;\n    this._hasFixedWidth = fixedWidth === true;\n    this._minHeight = minHeight || 0;\n    this._minWidth = minWidth || 0;\n    this._keyMapper = keyMapper || defaultKeyMapper;\n    this._defaultHeight = Math.max(this._minHeight, typeof defaultHeight === 'number' ? defaultHeight : DEFAULT_HEIGHT);\n    this._defaultWidth = Math.max(this._minWidth, typeof defaultWidth === 'number' ? defaultWidth : DEFAULT_WIDTH);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (this._hasFixedHeight === false && this._hasFixedWidth === false) {\n        console.warn(\"CellMeasurerCache should only measure a cell's width or height. \" + 'You have configured CellMeasurerCache to measure both. ' + 'This will result in poor performance.');\n      }\n\n      if (this._hasFixedHeight === false && this._defaultHeight === 0) {\n        console.warn('Fixed height CellMeasurerCache should specify a :defaultHeight greater than 0. ' + 'Failing to do so will lead to unnecessary layout and poor performance.');\n      }\n\n      if (this._hasFixedWidth === false && this._defaultWidth === 0) {\n        console.warn('Fixed width CellMeasurerCache should specify a :defaultWidth greater than 0. ' + 'Failing to do so will lead to unnecessary layout and poor performance.');\n      }\n    }\n  }\n\n  _createClass(CellMeasurerCache, [{\n    key: \"clear\",\n    value: function clear(rowIndex) {\n      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var key = this._keyMapper(rowIndex, columnIndex);\n\n      delete this._cellHeightCache[key];\n      delete this._cellWidthCache[key];\n\n      this._updateCachedColumnAndRowSizes(rowIndex, columnIndex);\n    }\n  }, {\n    key: \"clearAll\",\n    value: function clearAll() {\n      this._cellHeightCache = {};\n      this._cellWidthCache = {};\n      this._columnWidthCache = {};\n      this._rowHeightCache = {};\n      this._rowCount = 0;\n      this._columnCount = 0;\n    }\n  }, {\n    key: \"hasFixedHeight\",\n    value: function hasFixedHeight() {\n      return this._hasFixedHeight;\n    }\n  }, {\n    key: \"hasFixedWidth\",\n    value: function hasFixedWidth() {\n      return this._hasFixedWidth;\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight(rowIndex) {\n      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (this._hasFixedHeight) {\n        return this._defaultHeight;\n      } else {\n        var _key = this._keyMapper(rowIndex, columnIndex);\n\n        return this._cellHeightCache[_key] !== undefined ? Math.max(this._minHeight, this._cellHeightCache[_key]) : this._defaultHeight;\n      }\n    }\n  }, {\n    key: \"getWidth\",\n    value: function getWidth(rowIndex) {\n      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (this._hasFixedWidth) {\n        return this._defaultWidth;\n      } else {\n        var _key2 = this._keyMapper(rowIndex, columnIndex);\n\n        return this._cellWidthCache[_key2] !== undefined ? Math.max(this._minWidth, this._cellWidthCache[_key2]) : this._defaultWidth;\n      }\n    }\n  }, {\n    key: \"has\",\n    value: function has(rowIndex) {\n      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var key = this._keyMapper(rowIndex, columnIndex);\n\n      return this._cellHeightCache[key] !== undefined;\n    }\n  }, {\n    key: \"set\",\n    value: function set(rowIndex, columnIndex, width, height) {\n      var key = this._keyMapper(rowIndex, columnIndex);\n\n      if (columnIndex >= this._columnCount) {\n        this._columnCount = columnIndex + 1;\n      }\n\n      if (rowIndex >= this._rowCount) {\n        this._rowCount = rowIndex + 1;\n      } // Size is cached per cell so we don't have to re-measure if cells are re-ordered.\n\n\n      this._cellHeightCache[key] = height;\n      this._cellWidthCache[key] = width;\n\n      this._updateCachedColumnAndRowSizes(rowIndex, columnIndex);\n    }\n  }, {\n    key: \"_updateCachedColumnAndRowSizes\",\n    value: function _updateCachedColumnAndRowSizes(rowIndex, columnIndex) {\n      // :columnWidth and :rowHeight are derived based on all cells in a column/row.\n      // Pre-cache these derived values for faster lookup later.\n      // Reads are expected to occur more frequently than writes in this case.\n      // Only update non-fixed dimensions though to avoid doing unnecessary work.\n      if (!this._hasFixedWidth) {\n        var columnWidth = 0;\n\n        for (var i = 0; i < this._rowCount; i++) {\n          columnWidth = Math.max(columnWidth, this.getWidth(i, columnIndex));\n        }\n\n        var columnKey = this._keyMapper(0, columnIndex);\n\n        this._columnWidthCache[columnKey] = columnWidth;\n      }\n\n      if (!this._hasFixedHeight) {\n        var rowHeight = 0;\n\n        for (var _i = 0; _i < this._columnCount; _i++) {\n          rowHeight = Math.max(rowHeight, this.getHeight(rowIndex, _i));\n        }\n\n        var rowKey = this._keyMapper(rowIndex, 0);\n\n        this._rowHeightCache[rowKey] = rowHeight;\n      }\n    }\n  }, {\n    key: \"defaultHeight\",\n    get: function get() {\n      return this._defaultHeight;\n    }\n  }, {\n    key: \"defaultWidth\",\n    get: function get() {\n      return this._defaultWidth;\n    }\n  }]);\n\n  return CellMeasurerCache;\n}();\n\nexport { CellMeasurerCache as default };\n\nfunction defaultKeyMapper(rowIndex, columnIndex) {\n  return \"\".concat(rowIndex, \"-\").concat(columnIndex);\n}\n\nimport { bpfrpt_proptype_CellMeasureCache } from \"./types\";","/**\n * Helper method that determines when to recalculate row or column metadata.\n */\nexport default function calculateSizeAndPositionDataAndUpdateScrollOffset(_ref) {\n  var cellCount = _ref.cellCount,\n      cellSize = _ref.cellSize,\n      computeMetadataCallback = _ref.computeMetadataCallback,\n      computeMetadataCallbackProps = _ref.computeMetadataCallbackProps,\n      nextCellsCount = _ref.nextCellsCount,\n      nextCellSize = _ref.nextCellSize,\n      nextScrollToIndex = _ref.nextScrollToIndex,\n      scrollToIndex = _ref.scrollToIndex,\n      updateScrollOffsetForScrollToIndex = _ref.updateScrollOffsetForScrollToIndex;\n\n  // Don't compare cell sizes if they are functions because inline functions would cause infinite loops.\n  // In that event users should use the manual recompute methods to inform of changes.\n  if (cellCount !== nextCellsCount || (typeof cellSize === 'number' || typeof nextCellSize === 'number') && cellSize !== nextCellSize) {\n    computeMetadataCallback(computeMetadataCallbackProps); // Updated cell metadata may have hidden the previous scrolled-to item.\n    // In this case we should also update the scrollTop to ensure it stays visible.\n\n    if (scrollToIndex >= 0 && scrollToIndex === nextScrollToIndex) {\n      updateScrollOffsetForScrollToIndex();\n    }\n  }\n}","import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\n/**\n * Just-in-time calculates and caches size and position information for a collection of cells.\n */\nvar CellSizeAndPositionManager =\n/*#__PURE__*/\nfunction () {\n  // Cache of size and position data for cells, mapped by cell index.\n  // Note that invalid values may exist in this map so only rely on cells up to this._lastMeasuredIndex\n  // Measurements for cells up to this index can be trusted; cells afterward should be estimated.\n  // Used in deferred mode to track which cells have been queued for measurement.\n  function CellSizeAndPositionManager(_ref) {\n    var cellCount = _ref.cellCount,\n        cellSizeGetter = _ref.cellSizeGetter,\n        estimatedCellSize = _ref.estimatedCellSize;\n\n    _classCallCheck(this, CellSizeAndPositionManager);\n\n    _defineProperty(this, \"_cellSizeAndPositionData\", {});\n\n    _defineProperty(this, \"_lastMeasuredIndex\", -1);\n\n    _defineProperty(this, \"_lastBatchedIndex\", -1);\n\n    _defineProperty(this, \"_cellCount\", void 0);\n\n    _defineProperty(this, \"_cellSizeGetter\", void 0);\n\n    _defineProperty(this, \"_estimatedCellSize\", void 0);\n\n    this._cellSizeGetter = cellSizeGetter;\n    this._cellCount = cellCount;\n    this._estimatedCellSize = estimatedCellSize;\n  }\n\n  _createClass(CellSizeAndPositionManager, [{\n    key: \"areOffsetsAdjusted\",\n    value: function areOffsetsAdjusted() {\n      return false;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(_ref2) {\n      var cellCount = _ref2.cellCount,\n          estimatedCellSize = _ref2.estimatedCellSize,\n          cellSizeGetter = _ref2.cellSizeGetter;\n      this._cellCount = cellCount;\n      this._estimatedCellSize = estimatedCellSize;\n      this._cellSizeGetter = cellSizeGetter;\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return this._cellCount;\n    }\n  }, {\n    key: \"getEstimatedCellSize\",\n    value: function getEstimatedCellSize() {\n      return this._estimatedCellSize;\n    }\n  }, {\n    key: \"getLastMeasuredIndex\",\n    value: function getLastMeasuredIndex() {\n      return this._lastMeasuredIndex;\n    }\n  }, {\n    key: \"getOffsetAdjustment\",\n    value: function getOffsetAdjustment() {\n      return 0;\n    }\n    /**\n     * This method returns the size and position for the cell at the specified index.\n     * It just-in-time calculates (or used cached values) for cells leading up to the index.\n     */\n\n  }, {\n    key: \"getSizeAndPositionOfCell\",\n    value: function getSizeAndPositionOfCell(index) {\n      if (index < 0 || index >= this._cellCount) {\n        throw Error(\"Requested index \".concat(index, \" is outside of range 0..\").concat(this._cellCount));\n      }\n\n      if (index > this._lastMeasuredIndex) {\n        var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n        var offset = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n\n        for (var i = this._lastMeasuredIndex + 1; i <= index; i++) {\n          var size = this._cellSizeGetter({\n            index: i\n          }); // undefined or NaN probably means a logic error in the size getter.\n          // null means we're using CellMeasurer and haven't yet measured a given index.\n\n\n          if (size === undefined || isNaN(size)) {\n            throw Error(\"Invalid size returned for cell \".concat(i, \" of value \").concat(size));\n          } else if (size === null) {\n            this._cellSizeAndPositionData[i] = {\n              offset: offset,\n              size: 0\n            };\n            this._lastBatchedIndex = index;\n          } else {\n            this._cellSizeAndPositionData[i] = {\n              offset: offset,\n              size: size\n            };\n            offset += size;\n            this._lastMeasuredIndex = index;\n          }\n        }\n      }\n\n      return this._cellSizeAndPositionData[index];\n    }\n  }, {\n    key: \"getSizeAndPositionOfLastMeasuredCell\",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._lastMeasuredIndex >= 0 ? this._cellSizeAndPositionData[this._lastMeasuredIndex] : {\n        offset: 0,\n        size: 0\n      };\n    }\n    /**\n     * Total size of all cells being measured.\n     * This value will be completely estimated initially.\n     * As cells are measured, the estimate will be updated.\n     */\n\n  }, {\n    key: \"getTotalSize\",\n    value: function getTotalSize() {\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var totalSizeOfMeasuredCells = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n      var numUnmeasuredCells = this._cellCount - this._lastMeasuredIndex - 1;\n      var totalSizeOfUnmeasuredCells = numUnmeasuredCells * this._estimatedCellSize;\n      return totalSizeOfMeasuredCells + totalSizeOfUnmeasuredCells;\n    }\n    /**\n     * Determines a new offset that ensures a certain cell is visible, given the current offset.\n     * If the cell is already visible then the current offset will be returned.\n     * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.\n     *\n     * @param align Desired alignment within container; one of \"auto\" (default), \"start\", or \"end\"\n     * @param containerSize Size (width or height) of the container viewport\n     * @param currentOffset Container's current (x or y) offset\n     * @param totalSize Total size (width or height) of all cells\n     * @return Offset to use to ensure the specified cell is visible\n     */\n\n  }, {\n    key: \"getUpdatedOffsetForIndex\",\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === void 0 ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n\n      if (containerSize <= 0) {\n        return 0;\n      }\n\n      var datum = this.getSizeAndPositionOfCell(targetIndex);\n      var maxOffset = datum.offset;\n      var minOffset = maxOffset - containerSize + datum.size;\n      var idealOffset;\n\n      switch (align) {\n        case 'start':\n          idealOffset = maxOffset;\n          break;\n\n        case 'end':\n          idealOffset = minOffset;\n          break;\n\n        case 'center':\n          idealOffset = maxOffset - (containerSize - datum.size) / 2;\n          break;\n\n        default:\n          idealOffset = Math.max(minOffset, Math.min(maxOffset, currentOffset));\n          break;\n      }\n\n      var totalSize = this.getTotalSize();\n      return Math.max(0, Math.min(totalSize - containerSize, idealOffset));\n    }\n  }, {\n    key: \"getVisibleCellRange\",\n    value: function getVisibleCellRange(params) {\n      var containerSize = params.containerSize,\n          offset = params.offset;\n      var totalSize = this.getTotalSize();\n\n      if (totalSize === 0) {\n        return {};\n      }\n\n      var maxOffset = offset + containerSize;\n\n      var start = this._findNearestCell(offset);\n\n      var datum = this.getSizeAndPositionOfCell(start);\n      offset = datum.offset + datum.size;\n      var stop = start;\n\n      while (offset < maxOffset && stop < this._cellCount - 1) {\n        stop++;\n        offset += this.getSizeAndPositionOfCell(stop).size;\n      }\n\n      return {\n        start: start,\n        stop: stop\n      };\n    }\n    /**\n     * Clear all cached values for cells after the specified index.\n     * This method should be called for any cell that has changed its size.\n     * It will not immediately perform any calculations; they'll be performed the next time getSizeAndPositionOfCell() is called.\n     */\n\n  }, {\n    key: \"resetCell\",\n    value: function resetCell(index) {\n      this._lastMeasuredIndex = Math.min(this._lastMeasuredIndex, index - 1);\n    }\n  }, {\n    key: \"_binarySearch\",\n    value: function _binarySearch(high, low, offset) {\n      while (low <= high) {\n        var middle = low + Math.floor((high - low) / 2);\n        var currentOffset = this.getSizeAndPositionOfCell(middle).offset;\n\n        if (currentOffset === offset) {\n          return middle;\n        } else if (currentOffset < offset) {\n          low = middle + 1;\n        } else if (currentOffset > offset) {\n          high = middle - 1;\n        }\n      }\n\n      if (low > 0) {\n        return low - 1;\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: \"_exponentialSearch\",\n    value: function _exponentialSearch(index, offset) {\n      var interval = 1;\n\n      while (index < this._cellCount && this.getSizeAndPositionOfCell(index).offset < offset) {\n        index += interval;\n        interval *= 2;\n      }\n\n      return this._binarySearch(Math.min(index, this._cellCount - 1), Math.floor(index / 2), offset);\n    }\n    /**\n     * Searches for the cell (index) nearest the specified offset.\n     *\n     * If no exact match is found the next lowest cell index will be returned.\n     * This allows partially visible cells (with offsets just before/above the fold) to be visible.\n     */\n\n  }, {\n    key: \"_findNearestCell\",\n    value: function _findNearestCell(offset) {\n      if (isNaN(offset)) {\n        throw Error(\"Invalid offset \".concat(offset, \" specified\"));\n      } // Our search algorithms find the nearest match at or below the specified offset.\n      // So make sure the offset is at least 0 or no match will be found.\n\n\n      offset = Math.max(0, offset);\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var lastMeasuredIndex = Math.max(0, this._lastMeasuredIndex);\n\n      if (lastMeasuredCellSizeAndPosition.offset >= offset) {\n        // If we've already measured cells within this range just use a binary search as it's faster.\n        return this._binarySearch(lastMeasuredIndex, 0, offset);\n      } else {\n        // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n        // The exponential search avoids pre-computing sizes for the full set of cells as a binary search would.\n        // The overall complexity for this approach is O(log n).\n        return this._exponentialSearch(lastMeasuredIndex, offset);\n      }\n    }\n  }]);\n\n  return CellSizeAndPositionManager;\n}();\n\nexport { CellSizeAndPositionManager as default };\nimport { bpfrpt_proptype_Alignment } from \"../types\";\nimport { bpfrpt_proptype_CellSizeGetter } from \"../types\";\nimport { bpfrpt_proptype_VisibleCellRange } from \"../types\";","var DEFAULT_MAX_ELEMENT_SIZE = 1500000;\nvar CHROME_MAX_ELEMENT_SIZE = 1.67771e7;\n\nvar isBrowser = function isBrowser() {\n  return typeof window !== 'undefined';\n};\n\nvar isChrome = function isChrome() {\n  return !!window.chrome;\n};\n\nexport var getMaxElementSize = function getMaxElementSize() {\n  if (isBrowser()) {\n    if (isChrome()) {\n      return CHROME_MAX_ELEMENT_SIZE;\n    }\n  }\n\n  return DEFAULT_MAX_ELEMENT_SIZE;\n};","import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport CellSizeAndPositionManager from './CellSizeAndPositionManager';\nimport { getMaxElementSize } from './maxElementSize.js';\n\n/**\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.\n */\nvar ScalingCellSizeAndPositionManager =\n/*#__PURE__*/\nfunction () {\n  function ScalingCellSizeAndPositionManager(_ref) {\n    var _ref$maxScrollSize = _ref.maxScrollSize,\n        maxScrollSize = _ref$maxScrollSize === void 0 ? getMaxElementSize() : _ref$maxScrollSize,\n        params = _objectWithoutProperties(_ref, [\"maxScrollSize\"]);\n\n    _classCallCheck(this, ScalingCellSizeAndPositionManager);\n\n    _defineProperty(this, \"_cellSizeAndPositionManager\", void 0);\n\n    _defineProperty(this, \"_maxScrollSize\", void 0);\n\n    // Favor composition over inheritance to simplify IE10 support\n    this._cellSizeAndPositionManager = new CellSizeAndPositionManager(params);\n    this._maxScrollSize = maxScrollSize;\n  }\n\n  _createClass(ScalingCellSizeAndPositionManager, [{\n    key: \"areOffsetsAdjusted\",\n    value: function areOffsetsAdjusted() {\n      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(params) {\n      this._cellSizeAndPositionManager.configure(params);\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return this._cellSizeAndPositionManager.getCellCount();\n    }\n  }, {\n    key: \"getEstimatedCellSize\",\n    value: function getEstimatedCellSize() {\n      return this._cellSizeAndPositionManager.getEstimatedCellSize();\n    }\n  }, {\n    key: \"getLastMeasuredIndex\",\n    value: function getLastMeasuredIndex() {\n      return this._cellSizeAndPositionManager.getLastMeasuredIndex();\n    }\n    /**\n     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\n     * The offset passed to this function is scaled (safe) as well.\n     */\n\n  }, {\n    key: \"getOffsetAdjustment\",\n    value: function getOffsetAdjustment(_ref2) {\n      var containerSize = _ref2.containerSize,\n          offset = _ref2.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      var offsetPercentage = this._getOffsetPercentage({\n        containerSize: containerSize,\n        offset: offset,\n        totalSize: safeTotalSize\n      });\n\n      return Math.round(offsetPercentage * (safeTotalSize - totalSize));\n    }\n  }, {\n    key: \"getSizeAndPositionOfCell\",\n    value: function getSizeAndPositionOfCell(index) {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\n    }\n  }, {\n    key: \"getSizeAndPositionOfLastMeasuredCell\",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\n    }\n    /** See CellSizeAndPositionManager#getTotalSize */\n\n  }, {\n    key: \"getTotalSize\",\n    value: function getTotalSize() {\n      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\n    }\n    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\n\n  }, {\n    key: \"getUpdatedOffsetForIndex\",\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === void 0 ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n      currentOffset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: currentOffset\n      });\n\n      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: align,\n        containerSize: containerSize,\n        currentOffset: currentOffset,\n        targetIndex: targetIndex\n      });\n\n      return this._offsetToSafeOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n    /** See CellSizeAndPositionManager#getVisibleCellRange */\n\n  }, {\n    key: \"getVisibleCellRange\",\n    value: function getVisibleCellRange(_ref4) {\n      var containerSize = _ref4.containerSize,\n          offset = _ref4.offset;\n      offset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n      return this._cellSizeAndPositionManager.getVisibleCellRange({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n  }, {\n    key: \"resetCell\",\n    value: function resetCell(index) {\n      this._cellSizeAndPositionManager.resetCell(index);\n    }\n  }, {\n    key: \"_getOffsetPercentage\",\n    value: function _getOffsetPercentage(_ref5) {\n      var containerSize = _ref5.containerSize,\n          offset = _ref5.offset,\n          totalSize = _ref5.totalSize;\n      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\n    }\n  }, {\n    key: \"_offsetToSafeOffset\",\n    value: function _offsetToSafeOffset(_ref6) {\n      var containerSize = _ref6.containerSize,\n          offset = _ref6.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: totalSize\n        });\n\n        return Math.round(offsetPercentage * (safeTotalSize - containerSize));\n      }\n    }\n  }, {\n    key: \"_safeOffsetToOffset\",\n    value: function _safeOffsetToOffset(_ref7) {\n      var containerSize = _ref7.containerSize,\n          offset = _ref7.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: safeTotalSize\n        });\n\n        return Math.round(offsetPercentage * (totalSize - containerSize));\n      }\n    }\n  }]);\n\n  return ScalingCellSizeAndPositionManager;\n}();\n\nexport { ScalingCellSizeAndPositionManager as default };\nimport { bpfrpt_proptype_Alignment } from \"../types\";\nimport { bpfrpt_proptype_CellSizeGetter } from \"../types\";\nimport { bpfrpt_proptype_VisibleCellRange } from \"../types\";","/**\n * Helper utility that updates the specified callback whenever any of the specified indices have changed.\n */\nexport default function createCallbackMemoizer() {\n  var requireAllKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var cachedIndices = {};\n  return function (_ref) {\n    var callback = _ref.callback,\n        indices = _ref.indices;\n    var keys = Object.keys(indices);\n    var allInitialized = !requireAllKeys || keys.every(function (key) {\n      var value = indices[key];\n      return Array.isArray(value) ? value.length > 0 : value >= 0;\n    });\n    var indexChanged = keys.length !== Object.keys(cachedIndices).length || keys.some(function (key) {\n      var cachedValue = cachedIndices[key];\n      var value = indices[key];\n      return Array.isArray(value) ? cachedValue.join(',') !== value.join(',') : cachedValue !== value;\n    });\n    cachedIndices = indices;\n\n    if (allInitialized && indexChanged) {\n      callback(indices);\n    }\n  };\n}","export var SCROLL_DIRECTION_BACKWARD = -1;\nexport var SCROLL_DIRECTION_FORWARD = 1;\nexport var SCROLL_DIRECTION_HORIZONTAL = 'horizontal';\nexport var SCROLL_DIRECTION_VERTICAL = 'vertical';\n/**\n * Calculates the number of cells to overscan before and after a specified range.\n * This function ensures that overscanning doesn't exceed the available cells.\n */\n\nexport default function defaultOverscanIndicesGetter(_ref) {\n  var cellCount = _ref.cellCount,\n      overscanCellsCount = _ref.overscanCellsCount,\n      scrollDirection = _ref.scrollDirection,\n      startIndex = _ref.startIndex,\n      stopIndex = _ref.stopIndex;\n\n  if (scrollDirection === SCROLL_DIRECTION_FORWARD) {\n    return {\n      overscanStartIndex: Math.max(0, startIndex),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)\n    };\n  } else {\n    return {\n      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex)\n    };\n  }\n}\nimport { bpfrpt_proptype_OverscanIndicesGetterParams } from \"./types\";\nimport { bpfrpt_proptype_OverscanIndices } from \"./types\";","import ScalingCellSizeAndPositionManager from './ScalingCellSizeAndPositionManager.js';\n/**\n * Helper function that determines when to update scroll offsets to ensure that a scroll-to-index remains visible.\n * This function also ensures that the scroll ofset isn't past the last column/row of cells.\n */\n\nexport default function updateScrollIndexHelper(_ref) {\n  var cellSize = _ref.cellSize,\n      cellSizeAndPositionManager = _ref.cellSizeAndPositionManager,\n      previousCellsCount = _ref.previousCellsCount,\n      previousCellSize = _ref.previousCellSize,\n      previousScrollToAlignment = _ref.previousScrollToAlignment,\n      previousScrollToIndex = _ref.previousScrollToIndex,\n      previousSize = _ref.previousSize,\n      scrollOffset = _ref.scrollOffset,\n      scrollToAlignment = _ref.scrollToAlignment,\n      scrollToIndex = _ref.scrollToIndex,\n      size = _ref.size,\n      sizeJustIncreasedFromZero = _ref.sizeJustIncreasedFromZero,\n      updateScrollIndexCallback = _ref.updateScrollIndexCallback;\n  var cellCount = cellSizeAndPositionManager.getCellCount();\n  var hasScrollToIndex = scrollToIndex >= 0 && scrollToIndex < cellCount;\n  var sizeHasChanged = size !== previousSize || sizeJustIncreasedFromZero || !previousCellSize || typeof cellSize === 'number' && cellSize !== previousCellSize; // If we have a new scroll target OR if height/row-height has changed,\n  // We should ensure that the scroll target is visible.\n\n  if (hasScrollToIndex && (sizeHasChanged || scrollToAlignment !== previousScrollToAlignment || scrollToIndex !== previousScrollToIndex)) {\n    updateScrollIndexCallback(scrollToIndex); // If we don't have a selected item but list size or number of children have decreased,\n    // Make sure we aren't scrolled too far past the current content.\n  } else if (!hasScrollToIndex && cellCount > 0 && (size < previousSize || cellCount < previousCellsCount)) {\n    // We need to ensure that the current scroll offset is still within the collection's range.\n    // To do this, we don't need to measure everything; CellMeasurer would perform poorly.\n    // Just check to make sure we're still okay.\n    // Only adjust the scroll position if we've scrolled below the last set of rows.\n    if (scrollOffset > cellSizeAndPositionManager.getTotalSize() - size) {\n      updateScrollIndexCallback(cellCount - 1);\n    }\n  }\n}\nimport { bpfrpt_proptype_Alignment } from \"../types\";\nimport { bpfrpt_proptype_CellSize } from \"../types\";","/**\n * Default implementation of cellRangeRenderer used by Grid.\n * This renderer supports cell-caching while the user is scrolling.\n */\nexport default function defaultCellRangeRenderer(_ref) {\n  var cellCache = _ref.cellCache,\n      cellRenderer = _ref.cellRenderer,\n      columnSizeAndPositionManager = _ref.columnSizeAndPositionManager,\n      columnStartIndex = _ref.columnStartIndex,\n      columnStopIndex = _ref.columnStopIndex,\n      deferredMeasurementCache = _ref.deferredMeasurementCache,\n      horizontalOffsetAdjustment = _ref.horizontalOffsetAdjustment,\n      isScrolling = _ref.isScrolling,\n      isScrollingOptOut = _ref.isScrollingOptOut,\n      parent = _ref.parent,\n      rowSizeAndPositionManager = _ref.rowSizeAndPositionManager,\n      rowStartIndex = _ref.rowStartIndex,\n      rowStopIndex = _ref.rowStopIndex,\n      styleCache = _ref.styleCache,\n      verticalOffsetAdjustment = _ref.verticalOffsetAdjustment,\n      visibleColumnIndices = _ref.visibleColumnIndices,\n      visibleRowIndices = _ref.visibleRowIndices;\n  var renderedCells = []; // Browsers have native size limits for elements (eg Chrome 33M pixels, IE 1.5M pixes).\n  // User cannot scroll beyond these size limitations.\n  // In order to work around this, ScalingCellSizeAndPositionManager compresses offsets.\n  // We should never cache styles for compressed offsets though as this can lead to bugs.\n  // See issue #576 for more.\n\n  var areOffsetsAdjusted = columnSizeAndPositionManager.areOffsetsAdjusted() || rowSizeAndPositionManager.areOffsetsAdjusted();\n  var canCacheStyle = !isScrolling && !areOffsetsAdjusted;\n\n  for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n    var rowDatum = rowSizeAndPositionManager.getSizeAndPositionOfCell(rowIndex);\n\n    for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n      var columnDatum = columnSizeAndPositionManager.getSizeAndPositionOfCell(columnIndex);\n      var isVisible = columnIndex >= visibleColumnIndices.start && columnIndex <= visibleColumnIndices.stop && rowIndex >= visibleRowIndices.start && rowIndex <= visibleRowIndices.stop;\n      var key = \"\".concat(rowIndex, \"-\").concat(columnIndex);\n      var style = void 0; // Cache style objects so shallow-compare doesn't re-render unnecessarily.\n\n      if (canCacheStyle && styleCache[key]) {\n        style = styleCache[key];\n      } else {\n        // In deferred mode, cells will be initially rendered before we know their size.\n        // Don't interfere with CellMeasurer's measurements by setting an invalid size.\n        if (deferredMeasurementCache && !deferredMeasurementCache.has(rowIndex, columnIndex)) {\n          // Position not-yet-measured cells at top/left 0,0,\n          // And give them width/height of 'auto' so they can grow larger than the parent Grid if necessary.\n          // Positioning them further to the right/bottom influences their measured size.\n          style = {\n            height: 'auto',\n            left: 0,\n            position: 'absolute',\n            top: 0,\n            width: 'auto'\n          };\n        } else {\n          style = {\n            height: rowDatum.size,\n            left: columnDatum.offset + horizontalOffsetAdjustment,\n            position: 'absolute',\n            top: rowDatum.offset + verticalOffsetAdjustment,\n            width: columnDatum.size\n          };\n          styleCache[key] = style;\n        }\n      }\n\n      var cellRendererParams = {\n        columnIndex: columnIndex,\n        isScrolling: isScrolling,\n        isVisible: isVisible,\n        key: key,\n        parent: parent,\n        rowIndex: rowIndex,\n        style: style\n      };\n      var renderedCell = void 0; // Avoid re-creating cells while scrolling.\n      // This can lead to the same cell being created many times and can cause performance issues for \"heavy\" cells.\n      // If a scroll is in progress- cache and reuse cells.\n      // This cache will be thrown away once scrolling completes.\n      // However if we are scaling scroll positions and sizes, we should also avoid caching.\n      // This is because the offset changes slightly as scroll position changes and caching leads to stale values.\n      // For more info refer to issue #395\n      //\n      // If isScrollingOptOut is specified, we always cache cells.\n      // For more info refer to issue #1028\n\n      if ((isScrollingOptOut || isScrolling) && !horizontalOffsetAdjustment && !verticalOffsetAdjustment) {\n        if (!cellCache[key]) {\n          cellCache[key] = cellRenderer(cellRendererParams);\n        }\n\n        renderedCell = cellCache[key]; // If the user is no longer scrolling, don't cache cells.\n        // This makes dynamic cell content difficult for users and would also lead to a heavier memory footprint.\n      } else {\n        renderedCell = cellRenderer(cellRendererParams);\n      }\n\n      if (renderedCell == null || renderedCell === false) {\n        continue;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        warnAboutMissingStyle(parent, renderedCell);\n      }\n\n      renderedCells.push(renderedCell);\n    }\n  }\n\n  return renderedCells;\n}\n\nfunction warnAboutMissingStyle(parent, renderedCell) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (renderedCell) {\n      // If the direct child is a CellMeasurer, then we should check its child\n      // See issue #611\n      if (renderedCell.type && renderedCell.type.__internalCellMeasurerFlag) {\n        renderedCell = renderedCell.props.children;\n      }\n\n      if (renderedCell && renderedCell.props && renderedCell.props.style === undefined && parent.__warnedAboutMissingStyle !== true) {\n        parent.__warnedAboutMissingStyle = true;\n        console.warn('Rendered cell should include style property for positioning.');\n      }\n    }\n  }\n}\n\nimport { bpfrpt_proptype_CellRangeRendererParams } from \"./types\";","export default !!(typeof window !== 'undefined' && window.document && window.document.createElement);","import canUseDOM from './canUseDOM';\nvar size;\nexport default function scrollbarSize(recalc) {\n  if (!size && size !== 0 || recalc) {\n    if (canUseDOM) {\n      var scrollDiv = document.createElement('div');\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.top = '-9999px';\n      scrollDiv.style.width = '50px';\n      scrollDiv.style.height = '50px';\n      scrollDiv.style.overflow = 'scroll';\n      document.body.appendChild(scrollDiv);\n      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      document.body.removeChild(scrollDiv);\n    }\n  }\n\n  return size;\n}","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction componentWillMount() {\n  // Call this.constructor.gDSFP to support sub-classes.\n  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);\n  if (state !== null && state !== undefined) {\n    this.setState(state);\n  }\n}\n\nfunction componentWillReceiveProps(nextProps) {\n  // Call this.constructor.gDSFP to support sub-classes.\n  // Use the setState() updater to ensure state isn't stale in certain edge cases.\n  function updater(prevState) {\n    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);\n    return state !== null && state !== undefined ? state : null;\n  }\n  // Binding \"this\" is important for shallow renderer support.\n  this.setState(updater.bind(this));\n}\n\nfunction componentWillUpdate(nextProps, nextState) {\n  try {\n    var prevProps = this.props;\n    var prevState = this.state;\n    this.props = nextProps;\n    this.state = nextState;\n    this.__reactInternalSnapshotFlag = true;\n    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(\n      prevProps,\n      prevState\n    );\n  } finally {\n    this.props = prevProps;\n    this.state = prevState;\n  }\n}\n\n// React may warn about cWM/cWRP/cWU methods being deprecated.\n// Add a flag to suppress these warnings for this special case.\ncomponentWillMount.__suppressDeprecationWarning = true;\ncomponentWillReceiveProps.__suppressDeprecationWarning = true;\ncomponentWillUpdate.__suppressDeprecationWarning = true;\n\nfunction polyfill(Component) {\n  var prototype = Component.prototype;\n\n  if (!prototype || !prototype.isReactComponent) {\n    throw new Error('Can only polyfill class components');\n  }\n\n  if (\n    typeof Component.getDerivedStateFromProps !== 'function' &&\n    typeof prototype.getSnapshotBeforeUpdate !== 'function'\n  ) {\n    return Component;\n  }\n\n  // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n  // Error if any of these lifecycles are present,\n  // Because they would work differently between older and newer (16.3+) versions of React.\n  var foundWillMountName = null;\n  var foundWillReceivePropsName = null;\n  var foundWillUpdateName = null;\n  if (typeof prototype.componentWillMount === 'function') {\n    foundWillMountName = 'componentWillMount';\n  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {\n    foundWillMountName = 'UNSAFE_componentWillMount';\n  }\n  if (typeof prototype.componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'componentWillReceiveProps';\n  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n  }\n  if (typeof prototype.componentWillUpdate === 'function') {\n    foundWillUpdateName = 'componentWillUpdate';\n  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {\n    foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n  }\n  if (\n    foundWillMountName !== null ||\n    foundWillReceivePropsName !== null ||\n    foundWillUpdateName !== null\n  ) {\n    var componentName = Component.displayName || Component.name;\n    var newApiName =\n      typeof Component.getDerivedStateFromProps === 'function'\n        ? 'getDerivedStateFromProps()'\n        : 'getSnapshotBeforeUpdate()';\n\n    throw Error(\n      'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n        componentName +\n        ' uses ' +\n        newApiName +\n        ' but also contains the following legacy lifecycles:' +\n        (foundWillMountName !== null ? '\\n  ' + foundWillMountName : '') +\n        (foundWillReceivePropsName !== null\n          ? '\\n  ' + foundWillReceivePropsName\n          : '') +\n        (foundWillUpdateName !== null ? '\\n  ' + foundWillUpdateName : '') +\n        '\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\n' +\n        'https://fb.me/react-async-component-lifecycle-hooks'\n    );\n  }\n\n  // React <= 16.2 does not support static getDerivedStateFromProps.\n  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.\n  // Newer versions of React will ignore these lifecycles if gDSFP exists.\n  if (typeof Component.getDerivedStateFromProps === 'function') {\n    prototype.componentWillMount = componentWillMount;\n    prototype.componentWillReceiveProps = componentWillReceiveProps;\n  }\n\n  // React <= 16.2 does not support getSnapshotBeforeUpdate.\n  // As a workaround, use cWU to invoke the new lifecycle.\n  // Newer versions of React will ignore that lifecycle if gSBU exists.\n  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {\n    if (typeof prototype.componentDidUpdate !== 'function') {\n      throw new Error(\n        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'\n      );\n    }\n\n    prototype.componentWillUpdate = componentWillUpdate;\n\n    var componentDidUpdate = prototype.componentDidUpdate;\n\n    prototype.componentDidUpdate = function componentDidUpdatePolyfill(\n      prevProps,\n      prevState,\n      maybeSnapshot\n    ) {\n      // 16.3+ will not execute our will-update method;\n      // It will pass a snapshot value to did-update though.\n      // Older versions will require our polyfilled will-update value.\n      // We need to handle both cases, but can't just check for the presence of \"maybeSnapshot\",\n      // Because for <= 15.x versions this might be a \"prevContext\" object.\n      // We also can't just check \"__reactInternalSnapshot\",\n      // Because get-snapshot might return a falsy value.\n      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.\n      var snapshot = this.__reactInternalSnapshotFlag\n        ? this.__reactInternalSnapshot\n        : maybeSnapshot;\n\n      componentDidUpdate.call(this, prevProps, prevState, snapshot);\n    };\n  }\n\n  return Component;\n}\n\nexport { polyfill };\n","// Properly handle server-side rendering.\nvar win;\n\nif (typeof window !== 'undefined') {\n  win = window;\n} else if (typeof self !== 'undefined') {\n  win = self;\n} else {\n  win = {};\n} // requestAnimationFrame() shim by Paul Irish\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n\n\nvar request = win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.oRequestAnimationFrame || win.msRequestAnimationFrame || function (callback) {\n  return win.setTimeout(callback, 1000 / 60);\n};\n\nvar cancel = win.cancelAnimationFrame || win.webkitCancelAnimationFrame || win.mozCancelAnimationFrame || win.oCancelAnimationFrame || win.msCancelAnimationFrame || function (id) {\n  win.clearTimeout(id);\n};\n\nexport var raf = request;\nexport var caf = cancel;","import { caf, raf } from './animationFrame';\nvar bpfrpt_proptype_AnimationTimeoutId = process.env.NODE_ENV === 'production' ? null : {\n  \"id\": PropTypes.number.isRequired\n};\nexport var cancelAnimationTimeout = function cancelAnimationTimeout(frame) {\n  return caf(frame.id);\n};\n/**\n * Recursively calls requestAnimationFrame until a specified delay has been met or exceeded.\n * When the delay time has been reached the function you're timing out will be called.\n *\n * Credit: Joe Lambert (https://gist.github.com/joelambert/1002116#file-requesttimeout-js)\n */\n\nexport var requestAnimationTimeout = function requestAnimationTimeout(callback, delay) {\n  var start; // wait for end of processing current event handler, because event handler may be long\n\n  Promise.resolve().then(function () {\n    start = Date.now();\n  });\n\n  var timeout = function timeout() {\n    if (Date.now() - start >= delay) {\n      callback.call();\n    } else {\n      frame.id = raf(timeout);\n    }\n  };\n\n  var frame = {\n    id: raf(timeout)\n  };\n  return frame;\n};\nimport PropTypes from \"prop-types\";\nexport { bpfrpt_proptype_AnimationTimeoutId };","import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _class, _temp;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport calculateSizeAndPositionDataAndUpdateScrollOffset from './utils/calculateSizeAndPositionDataAndUpdateScrollOffset';\nimport ScalingCellSizeAndPositionManager from './utils/ScalingCellSizeAndPositionManager';\nimport createCallbackMemoizer from '../utils/createCallbackMemoizer';\nimport defaultOverscanIndicesGetter, { SCROLL_DIRECTION_BACKWARD, SCROLL_DIRECTION_FORWARD } from './defaultOverscanIndicesGetter';\nimport updateScrollIndexHelper from './utils/updateScrollIndexHelper';\nimport defaultCellRangeRenderer from './defaultCellRangeRenderer';\nimport scrollbarSize from 'dom-helpers/scrollbarSize';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { requestAnimationTimeout, cancelAnimationTimeout } from '../utils/requestAnimationTimeout';\n/**\n * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.\n * This improves performance and makes scrolling smoother.\n */\n\nexport var DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;\n/**\n * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.\n * This prevents Grid from interrupting mouse-wheel animations (see issue #2).\n */\n\nvar SCROLL_POSITION_CHANGE_REASONS = {\n  OBSERVED: 'observed',\n  REQUESTED: 'requested'\n};\n\nvar renderNull = function renderNull() {\n  return null;\n};\n\n/**\n * Renders tabular data with virtualization along the vertical and horizontal axes.\n * Row heights and column widths must be known ahead of time and specified as properties.\n */\nvar Grid = (_temp = _class =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Grid, _React$PureComponent);\n\n  // Invokes onSectionRendered callback only when start/stop row or column indices change\n  function Grid(props) {\n    var _this;\n\n    _classCallCheck(this, Grid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Grid).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"_onGridRenderedMemoizer\", createCallbackMemoizer());\n\n    _defineProperty(_assertThisInitialized(_this), \"_onScrollMemoizer\", createCallbackMemoizer(false));\n\n    _defineProperty(_assertThisInitialized(_this), \"_deferredInvalidateColumnIndex\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_deferredInvalidateRowIndex\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_recomputeScrollLeftFlag\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_recomputeScrollTopFlag\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_horizontalScrollBarSize\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_verticalScrollBarSize\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_scrollbarPresenceChanged\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_scrollingContainer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_childrenToDisplay\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_columnStartIndex\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_columnStopIndex\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_rowStartIndex\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_rowStopIndex\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderedColumnStartIndex\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderedColumnStopIndex\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderedRowStartIndex\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderedRowStopIndex\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_initialScrollTop\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_initialScrollLeft\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_disablePointerEventsTimeoutId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_styleCache\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"_cellCache\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"_debounceScrollEndedCallback\", function () {\n      _this._disablePointerEventsTimeoutId = null; // isScrolling is used to determine if we reset styleCache\n\n      _this.setState({\n        isScrolling: false,\n        needToResetStyleCache: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_invokeOnGridRenderedHelper\", function () {\n      var onSectionRendered = _this.props.onSectionRendered;\n\n      _this._onGridRenderedMemoizer({\n        callback: onSectionRendered,\n        indices: {\n          columnOverscanStartIndex: _this._columnStartIndex,\n          columnOverscanStopIndex: _this._columnStopIndex,\n          columnStartIndex: _this._renderedColumnStartIndex,\n          columnStopIndex: _this._renderedColumnStopIndex,\n          rowOverscanStartIndex: _this._rowStartIndex,\n          rowOverscanStopIndex: _this._rowStopIndex,\n          rowStartIndex: _this._renderedRowStartIndex,\n          rowStopIndex: _this._renderedRowStopIndex\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_setScrollingContainerRef\", function (ref) {\n      _this._scrollingContainer = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onScroll\", function (event) {\n      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.\n      // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.\n      // See issue #404 for more information.\n      if (event.target === _this._scrollingContainer) {\n        _this.handleScrollEvent(event.target);\n      }\n    });\n\n    var columnSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.columnCount,\n      cellSizeGetter: function cellSizeGetter(params) {\n        return Grid._wrapSizeGetter(props.columnWidth)(params);\n      },\n      estimatedCellSize: Grid._getEstimatedColumnSize(props)\n    });\n    var rowSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.rowCount,\n      cellSizeGetter: function cellSizeGetter(params) {\n        return Grid._wrapSizeGetter(props.rowHeight)(params);\n      },\n      estimatedCellSize: Grid._getEstimatedRowSize(props)\n    });\n    _this.state = {\n      instanceProps: {\n        columnSizeAndPositionManager: columnSizeAndPositionManager,\n        rowSizeAndPositionManager: rowSizeAndPositionManager,\n        prevColumnWidth: props.columnWidth,\n        prevRowHeight: props.rowHeight,\n        prevColumnCount: props.columnCount,\n        prevRowCount: props.rowCount,\n        prevIsScrolling: props.isScrolling === true,\n        prevScrollToColumn: props.scrollToColumn,\n        prevScrollToRow: props.scrollToRow,\n        scrollbarSize: 0,\n        scrollbarSizeMeasured: false\n      },\n      isScrolling: false,\n      scrollDirectionHorizontal: SCROLL_DIRECTION_FORWARD,\n      scrollDirectionVertical: SCROLL_DIRECTION_FORWARD,\n      scrollLeft: 0,\n      scrollTop: 0,\n      scrollPositionChangeReason: null,\n      needToResetStyleCache: false\n    };\n\n    if (props.scrollToRow > 0) {\n      _this._initialScrollTop = _this._getCalculatedScrollTop(props, _this.state);\n    }\n\n    if (props.scrollToColumn > 0) {\n      _this._initialScrollLeft = _this._getCalculatedScrollLeft(props, _this.state);\n    }\n\n    return _this;\n  }\n  /**\n   * Gets offsets for a given cell and alignment.\n   */\n\n\n  _createClass(Grid, [{\n    key: \"getOffsetForCell\",\n    value: function getOffsetForCell() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$alignment = _ref.alignment,\n          alignment = _ref$alignment === void 0 ? this.props.scrollToAlignment : _ref$alignment,\n          _ref$columnIndex = _ref.columnIndex,\n          columnIndex = _ref$columnIndex === void 0 ? this.props.scrollToColumn : _ref$columnIndex,\n          _ref$rowIndex = _ref.rowIndex,\n          rowIndex = _ref$rowIndex === void 0 ? this.props.scrollToRow : _ref$rowIndex;\n\n      var offsetProps = _objectSpread({}, this.props, {\n        scrollToAlignment: alignment,\n        scrollToColumn: columnIndex,\n        scrollToRow: rowIndex\n      });\n\n      return {\n        scrollLeft: this._getCalculatedScrollLeft(offsetProps),\n        scrollTop: this._getCalculatedScrollTop(offsetProps)\n      };\n    }\n    /**\n     * Gets estimated total rows' height.\n     */\n\n  }, {\n    key: \"getTotalRowsHeight\",\n    value: function getTotalRowsHeight() {\n      return this.state.instanceProps.rowSizeAndPositionManager.getTotalSize();\n    }\n    /**\n     * Gets estimated total columns' width.\n     */\n\n  }, {\n    key: \"getTotalColumnsWidth\",\n    value: function getTotalColumnsWidth() {\n      return this.state.instanceProps.columnSizeAndPositionManager.getTotalSize();\n    }\n    /**\n     * This method handles a scroll event originating from an external scroll control.\n     * It's an advanced method and should probably not be used unless you're implementing a custom scroll-bar solution.\n     */\n\n  }, {\n    key: \"handleScrollEvent\",\n    value: function handleScrollEvent(_ref2) {\n      var _ref2$scrollLeft = _ref2.scrollLeft,\n          scrollLeftParam = _ref2$scrollLeft === void 0 ? 0 : _ref2$scrollLeft,\n          _ref2$scrollTop = _ref2.scrollTop,\n          scrollTopParam = _ref2$scrollTop === void 0 ? 0 : _ref2$scrollTop;\n\n      // On iOS, we can arrive at negative offsets by swiping past the start.\n      // To prevent flicker here, we make playing in the negative offset zone cause nothing to happen.\n      if (scrollTopParam < 0) {\n        return;\n      } // Prevent pointer events from interrupting a smooth scroll\n\n\n      this._debounceScrollEnded();\n\n      var _this$props = this.props,\n          autoHeight = _this$props.autoHeight,\n          autoWidth = _this$props.autoWidth,\n          height = _this$props.height,\n          width = _this$props.width;\n      var instanceProps = this.state.instanceProps; // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,\n      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.\n      // This causes a series of rapid renders that is slow for long lists.\n      // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.\n\n      var scrollbarSize = instanceProps.scrollbarSize;\n      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      var scrollLeft = Math.min(Math.max(0, totalColumnsWidth - width + scrollbarSize), scrollLeftParam);\n      var scrollTop = Math.min(Math.max(0, totalRowsHeight - height + scrollbarSize), scrollTopParam); // Certain devices (like Apple touchpad) rapid-fire duplicate events.\n      // Don't force a re-render if this is the case.\n      // The mouse may move faster then the animation frame does.\n      // Use requestAnimationFrame to avoid over-updating.\n\n      if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {\n        // Track scrolling direction so we can more efficiently overscan rows to reduce empty space around the edges while scrolling.\n        // Don't change direction for an axis unless scroll offset has changed.\n        var scrollDirectionHorizontal = scrollLeft !== this.state.scrollLeft ? scrollLeft > this.state.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionHorizontal;\n        var scrollDirectionVertical = scrollTop !== this.state.scrollTop ? scrollTop > this.state.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionVertical;\n        var newState = {\n          isScrolling: true,\n          scrollDirectionHorizontal: scrollDirectionHorizontal,\n          scrollDirectionVertical: scrollDirectionVertical,\n          scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.OBSERVED\n        };\n\n        if (!autoHeight) {\n          newState.scrollTop = scrollTop;\n        }\n\n        if (!autoWidth) {\n          newState.scrollLeft = scrollLeft;\n        }\n\n        newState.needToResetStyleCache = false;\n        this.setState(newState);\n      }\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop,\n        totalColumnsWidth: totalColumnsWidth,\n        totalRowsHeight: totalRowsHeight\n      });\n    }\n    /**\n     * Invalidate Grid size and recompute visible cells.\n     * This is a deferred wrapper for recomputeGridSize().\n     * It sets a flag to be evaluated on cDM/cDU to avoid unnecessary renders.\n     * This method is intended for advanced use-cases like CellMeasurer.\n     */\n    // @TODO (bvaughn) Add automated test coverage for this.\n\n  }, {\n    key: \"invalidateCellSizeAfterRender\",\n    value: function invalidateCellSizeAfterRender(_ref3) {\n      var columnIndex = _ref3.columnIndex,\n          rowIndex = _ref3.rowIndex;\n      this._deferredInvalidateColumnIndex = typeof this._deferredInvalidateColumnIndex === 'number' ? Math.min(this._deferredInvalidateColumnIndex, columnIndex) : columnIndex;\n      this._deferredInvalidateRowIndex = typeof this._deferredInvalidateRowIndex === 'number' ? Math.min(this._deferredInvalidateRowIndex, rowIndex) : rowIndex;\n    }\n    /**\n     * Pre-measure all columns and rows in a Grid.\n     * Typically cells are only measured as needed and estimated sizes are used for cells that have not yet been measured.\n     * This method ensures that the next call to getTotalSize() returns an exact size (as opposed to just an estimated one).\n     */\n\n  }, {\n    key: \"measureAllCells\",\n    value: function measureAllCells() {\n      var _this$props2 = this.props,\n          columnCount = _this$props2.columnCount,\n          rowCount = _this$props2.rowCount;\n      var instanceProps = this.state.instanceProps;\n      instanceProps.columnSizeAndPositionManager.getSizeAndPositionOfCell(columnCount - 1);\n      instanceProps.rowSizeAndPositionManager.getSizeAndPositionOfCell(rowCount - 1);\n    }\n    /**\n     * Forced recompute of row heights and column widths.\n     * This function should be called if dynamic column or row sizes have changed but nothing else has.\n     * Since Grid only receives :columnCount and :rowCount it has no way of detecting when the underlying data changes.\n     */\n\n  }, {\n    key: \"recomputeGridSize\",\n    value: function recomputeGridSize() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$columnIndex = _ref4.columnIndex,\n          columnIndex = _ref4$columnIndex === void 0 ? 0 : _ref4$columnIndex,\n          _ref4$rowIndex = _ref4.rowIndex,\n          rowIndex = _ref4$rowIndex === void 0 ? 0 : _ref4$rowIndex;\n\n      var _this$props3 = this.props,\n          scrollToColumn = _this$props3.scrollToColumn,\n          scrollToRow = _this$props3.scrollToRow;\n      var instanceProps = this.state.instanceProps;\n      instanceProps.columnSizeAndPositionManager.resetCell(columnIndex);\n      instanceProps.rowSizeAndPositionManager.resetCell(rowIndex); // Cell sizes may be determined by a function property.\n      // In this case the cDU handler can't know if they changed.\n      // Store this flag to let the next cDU pass know it needs to recompute the scroll offset.\n\n      this._recomputeScrollLeftFlag = scrollToColumn >= 0 && (this.state.scrollDirectionHorizontal === SCROLL_DIRECTION_FORWARD ? columnIndex <= scrollToColumn : columnIndex >= scrollToColumn);\n      this._recomputeScrollTopFlag = scrollToRow >= 0 && (this.state.scrollDirectionVertical === SCROLL_DIRECTION_FORWARD ? rowIndex <= scrollToRow : rowIndex >= scrollToRow); // Clear cell cache in case we are scrolling;\n      // Invalid row heights likely mean invalid cached content as well.\n\n      this._styleCache = {};\n      this._cellCache = {};\n      this.forceUpdate();\n    }\n    /**\n     * Ensure column and row are visible.\n     */\n\n  }, {\n    key: \"scrollToCell\",\n    value: function scrollToCell(_ref5) {\n      var columnIndex = _ref5.columnIndex,\n          rowIndex = _ref5.rowIndex;\n      var columnCount = this.props.columnCount;\n      var props = this.props; // Don't adjust scroll offset for single-column grids (eg List, Table).\n      // This can cause a funky scroll offset because of the vertical scrollbar width.\n\n      if (columnCount > 1 && columnIndex !== undefined) {\n        this._updateScrollLeftForScrollToColumn(_objectSpread({}, props, {\n          scrollToColumn: columnIndex\n        }));\n      }\n\n      if (rowIndex !== undefined) {\n        this._updateScrollTopForScrollToRow(_objectSpread({}, props, {\n          scrollToRow: rowIndex\n        }));\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props4 = this.props,\n          getScrollbarSize = _this$props4.getScrollbarSize,\n          height = _this$props4.height,\n          scrollLeft = _this$props4.scrollLeft,\n          scrollToColumn = _this$props4.scrollToColumn,\n          scrollTop = _this$props4.scrollTop,\n          scrollToRow = _this$props4.scrollToRow,\n          width = _this$props4.width;\n      var instanceProps = this.state.instanceProps; // Reset initial offsets to be ignored in browser\n\n      this._initialScrollTop = 0;\n      this._initialScrollLeft = 0; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n      // We must do this at the start of the method as we may calculate and update scroll position below.\n\n      this._handleInvalidatedGridSize(); // If this component was first rendered server-side, scrollbar size will be undefined.\n      // In that event we need to remeasure.\n\n\n      if (!instanceProps.scrollbarSizeMeasured) {\n        this.setState(function (prevState) {\n          var stateUpdate = _objectSpread({}, prevState, {\n            needToResetStyleCache: false\n          });\n\n          stateUpdate.instanceProps.scrollbarSize = getScrollbarSize();\n          stateUpdate.instanceProps.scrollbarSizeMeasured = true;\n          return stateUpdate;\n        });\n      }\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0 || typeof scrollTop === 'number' && scrollTop >= 0) {\n        var stateUpdate = Grid._getScrollToPositionStateUpdate({\n          prevState: this.state,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        });\n\n        if (stateUpdate) {\n          stateUpdate.needToResetStyleCache = false;\n          this.setState(stateUpdate);\n        }\n      } // refs don't work in `react-test-renderer`\n\n\n      if (this._scrollingContainer) {\n        // setting the ref's scrollLeft and scrollTop.\n        // Somehow in MultiGrid the main grid doesn't trigger a update on mount.\n        if (this._scrollingContainer.scrollLeft !== this.state.scrollLeft) {\n          this._scrollingContainer.scrollLeft = this.state.scrollLeft;\n        }\n\n        if (this._scrollingContainer.scrollTop !== this.state.scrollTop) {\n          this._scrollingContainer.scrollTop = this.state.scrollTop;\n        }\n      } // Don't update scroll offset if the size is 0; we don't render any cells in this case.\n      // Setting a state may cause us to later thing we've updated the offce when we haven't.\n\n\n      var sizeIsBiggerThanZero = height > 0 && width > 0;\n\n      if (scrollToColumn >= 0 && sizeIsBiggerThanZero) {\n        this._updateScrollLeftForScrollToColumn();\n      }\n\n      if (scrollToRow >= 0 && sizeIsBiggerThanZero) {\n        this._updateScrollTopForScrollToRow();\n      } // Update onRowsRendered callback\n\n\n      this._invokeOnGridRenderedHelper(); // Initialize onScroll callback\n\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft || 0,\n        scrollTop: scrollTop || 0,\n        totalColumnsWidth: instanceProps.columnSizeAndPositionManager.getTotalSize(),\n        totalRowsHeight: instanceProps.rowSizeAndPositionManager.getTotalSize()\n      });\n\n      this._maybeCallOnScrollbarPresenceChange();\n    }\n    /**\n     * @private\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) New scroll-to-cell props have been set\n     */\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      var _this$props5 = this.props,\n          autoHeight = _this$props5.autoHeight,\n          autoWidth = _this$props5.autoWidth,\n          columnCount = _this$props5.columnCount,\n          height = _this$props5.height,\n          rowCount = _this$props5.rowCount,\n          scrollToAlignment = _this$props5.scrollToAlignment,\n          scrollToColumn = _this$props5.scrollToColumn,\n          scrollToRow = _this$props5.scrollToRow,\n          width = _this$props5.width;\n      var _this$state = this.state,\n          scrollLeft = _this$state.scrollLeft,\n          scrollPositionChangeReason = _this$state.scrollPositionChangeReason,\n          scrollTop = _this$state.scrollTop,\n          instanceProps = _this$state.instanceProps; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n      // We must do this at the start of the method as we may calculate and update scroll position below.\n\n      this._handleInvalidatedGridSize(); // Handle edge case where column or row count has only just increased over 0.\n      // In this case we may have to restore a previously-specified scroll offset.\n      // For more info see bvaughn/react-virtualized/issues/218\n\n\n      var columnOrRowCountJustIncreasedFromZero = columnCount > 0 && prevProps.columnCount === 0 || rowCount > 0 && prevProps.rowCount === 0; // Make sure requested changes to :scrollLeft or :scrollTop get applied.\n      // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,\n      // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).\n      // So we only set these when we require an adjustment of the scroll position.\n      // See issue #2 for more information.\n\n      if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {\n        // @TRICKY :autoHeight and :autoWidth properties instructs Grid to leave :scrollTop and :scrollLeft management to an external HOC (eg WindowScroller).\n        // In this case we should avoid checking scrollingContainer.scrollTop and scrollingContainer.scrollLeft since it forces layout/flow.\n        if (!autoWidth && scrollLeft >= 0 && (scrollLeft !== this._scrollingContainer.scrollLeft || columnOrRowCountJustIncreasedFromZero)) {\n          this._scrollingContainer.scrollLeft = scrollLeft;\n        }\n\n        if (!autoHeight && scrollTop >= 0 && (scrollTop !== this._scrollingContainer.scrollTop || columnOrRowCountJustIncreasedFromZero)) {\n          this._scrollingContainer.scrollTop = scrollTop;\n        }\n      } // Special case where the previous size was 0:\n      // In this case we don't show any windowed cells at all.\n      // So we should always recalculate offset afterwards.\n\n\n      var sizeJustIncreasedFromZero = (prevProps.width === 0 || prevProps.height === 0) && height > 0 && width > 0; // Update scroll offsets if the current :scrollToColumn or :scrollToRow values requires it\n      // @TODO Do we also need this check or can the one in componentWillUpdate() suffice?\n\n      if (this._recomputeScrollLeftFlag) {\n        this._recomputeScrollLeftFlag = false;\n\n        this._updateScrollLeftForScrollToColumn(this.props);\n      } else {\n        updateScrollIndexHelper({\n          cellSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n          previousCellsCount: prevProps.columnCount,\n          previousCellSize: prevProps.columnWidth,\n          previousScrollToAlignment: prevProps.scrollToAlignment,\n          previousScrollToIndex: prevProps.scrollToColumn,\n          previousSize: prevProps.width,\n          scrollOffset: scrollLeft,\n          scrollToAlignment: scrollToAlignment,\n          scrollToIndex: scrollToColumn,\n          size: width,\n          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,\n          updateScrollIndexCallback: function updateScrollIndexCallback() {\n            return _this2._updateScrollLeftForScrollToColumn(_this2.props);\n          }\n        });\n      }\n\n      if (this._recomputeScrollTopFlag) {\n        this._recomputeScrollTopFlag = false;\n\n        this._updateScrollTopForScrollToRow(this.props);\n      } else {\n        updateScrollIndexHelper({\n          cellSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n          previousCellsCount: prevProps.rowCount,\n          previousCellSize: prevProps.rowHeight,\n          previousScrollToAlignment: prevProps.scrollToAlignment,\n          previousScrollToIndex: prevProps.scrollToRow,\n          previousSize: prevProps.height,\n          scrollOffset: scrollTop,\n          scrollToAlignment: scrollToAlignment,\n          scrollToIndex: scrollToRow,\n          size: height,\n          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,\n          updateScrollIndexCallback: function updateScrollIndexCallback() {\n            return _this2._updateScrollTopForScrollToRow(_this2.props);\n          }\n        });\n      } // Update onRowsRendered callback if start/stop indices have changed\n\n\n      this._invokeOnGridRenderedHelper(); // Changes to :scrollLeft or :scrollTop should also notify :onScroll listeners\n\n\n      if (scrollLeft !== prevState.scrollLeft || scrollTop !== prevState.scrollTop) {\n        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n\n        this._invokeOnScrollMemoizer({\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          totalColumnsWidth: totalColumnsWidth,\n          totalRowsHeight: totalRowsHeight\n        });\n      }\n\n      this._maybeCallOnScrollbarPresenceChange();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._disablePointerEventsTimeoutId) {\n        cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n      }\n    }\n    /**\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) Empty content (0 rows or columns)\n     * 2) New scroll props overriding the current state\n     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          autoContainerWidth = _this$props6.autoContainerWidth,\n          autoHeight = _this$props6.autoHeight,\n          autoWidth = _this$props6.autoWidth,\n          className = _this$props6.className,\n          containerProps = _this$props6.containerProps,\n          containerRole = _this$props6.containerRole,\n          containerStyle = _this$props6.containerStyle,\n          height = _this$props6.height,\n          id = _this$props6.id,\n          noContentRenderer = _this$props6.noContentRenderer,\n          role = _this$props6.role,\n          style = _this$props6.style,\n          tabIndex = _this$props6.tabIndex,\n          width = _this$props6.width;\n      var _this$state2 = this.state,\n          instanceProps = _this$state2.instanceProps,\n          needToResetStyleCache = _this$state2.needToResetStyleCache;\n\n      var isScrolling = this._isScrolling();\n\n      var gridStyle = {\n        boxSizing: 'border-box',\n        direction: 'ltr',\n        height: autoHeight ? 'auto' : height,\n        position: 'relative',\n        width: autoWidth ? 'auto' : width,\n        WebkitOverflowScrolling: 'touch',\n        willChange: 'transform'\n      };\n\n      if (needToResetStyleCache) {\n        this._styleCache = {};\n      } // calculate _styleCache here\n      // if state.isScrolling (not from _isScrolling) then reset\n\n\n      if (!this.state.isScrolling) {\n        this._resetStyleCache();\n      } // calculate children to render here\n\n\n      this._calculateChildrenToRender(this.props, this.state);\n\n      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize(); // Force browser to hide scrollbars when we know they aren't necessary.\n      // Otherwise once scrollbars appear they may not disappear again.\n      // For more info see issue #116\n\n      var verticalScrollBarSize = totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n      var horizontalScrollBarSize = totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n\n      if (horizontalScrollBarSize !== this._horizontalScrollBarSize || verticalScrollBarSize !== this._verticalScrollBarSize) {\n        this._horizontalScrollBarSize = horizontalScrollBarSize;\n        this._verticalScrollBarSize = verticalScrollBarSize;\n        this._scrollbarPresenceChanged = true;\n      } // Also explicitly init styles to 'auto' if scrollbars are required.\n      // This works around an obscure edge case where external CSS styles have not yet been loaded,\n      // But an initial scroll index of offset is set as an external prop.\n      // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.\n      // This was originally reported via clauderic/react-infinite-calendar/issues/23\n\n\n      gridStyle.overflowX = totalColumnsWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';\n      gridStyle.overflowY = totalRowsHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';\n      var childrenToDisplay = this._childrenToDisplay;\n      var showNoContentRenderer = childrenToDisplay.length === 0 && height > 0 && width > 0;\n      return React.createElement(\"div\", _extends({\n        ref: this._setScrollingContainerRef\n      }, containerProps, {\n        \"aria-label\": this.props['aria-label'],\n        \"aria-readonly\": this.props['aria-readonly'],\n        className: clsx('ReactVirtualized__Grid', className),\n        id: id,\n        onScroll: this._onScroll,\n        role: role,\n        style: _objectSpread({}, gridStyle, {}, style),\n        tabIndex: tabIndex\n      }), childrenToDisplay.length > 0 && React.createElement(\"div\", {\n        className: \"ReactVirtualized__Grid__innerScrollContainer\",\n        role: containerRole,\n        style: _objectSpread({\n          width: autoContainerWidth ? 'auto' : totalColumnsWidth,\n          height: totalRowsHeight,\n          maxWidth: totalColumnsWidth,\n          maxHeight: totalRowsHeight,\n          overflow: 'hidden',\n          pointerEvents: isScrolling ? 'none' : '',\n          position: 'relative'\n        }, containerStyle)\n      }, childrenToDisplay), showNoContentRenderer && noContentRenderer());\n    }\n    /* ---------------------------- Helper methods ---------------------------- */\n\n  }, {\n    key: \"_calculateChildrenToRender\",\n    value: function _calculateChildrenToRender() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      var cellRenderer = props.cellRenderer,\n          cellRangeRenderer = props.cellRangeRenderer,\n          columnCount = props.columnCount,\n          deferredMeasurementCache = props.deferredMeasurementCache,\n          height = props.height,\n          overscanColumnCount = props.overscanColumnCount,\n          overscanIndicesGetter = props.overscanIndicesGetter,\n          overscanRowCount = props.overscanRowCount,\n          rowCount = props.rowCount,\n          width = props.width,\n          isScrollingOptOut = props.isScrollingOptOut;\n      var scrollDirectionHorizontal = state.scrollDirectionHorizontal,\n          scrollDirectionVertical = state.scrollDirectionVertical,\n          instanceProps = state.instanceProps;\n      var scrollTop = this._initialScrollTop > 0 ? this._initialScrollTop : state.scrollTop;\n      var scrollLeft = this._initialScrollLeft > 0 ? this._initialScrollLeft : state.scrollLeft;\n\n      var isScrolling = this._isScrolling(props, state);\n\n      this._childrenToDisplay = []; // Render only enough columns and rows to cover the visible area of the grid.\n\n      if (height > 0 && width > 0) {\n        var visibleColumnIndices = instanceProps.columnSizeAndPositionManager.getVisibleCellRange({\n          containerSize: width,\n          offset: scrollLeft\n        });\n        var visibleRowIndices = instanceProps.rowSizeAndPositionManager.getVisibleCellRange({\n          containerSize: height,\n          offset: scrollTop\n        });\n        var horizontalOffsetAdjustment = instanceProps.columnSizeAndPositionManager.getOffsetAdjustment({\n          containerSize: width,\n          offset: scrollLeft\n        });\n        var verticalOffsetAdjustment = instanceProps.rowSizeAndPositionManager.getOffsetAdjustment({\n          containerSize: height,\n          offset: scrollTop\n        }); // Store for _invokeOnGridRenderedHelper()\n\n        this._renderedColumnStartIndex = visibleColumnIndices.start;\n        this._renderedColumnStopIndex = visibleColumnIndices.stop;\n        this._renderedRowStartIndex = visibleRowIndices.start;\n        this._renderedRowStopIndex = visibleRowIndices.stop;\n        var overscanColumnIndices = overscanIndicesGetter({\n          direction: 'horizontal',\n          cellCount: columnCount,\n          overscanCellsCount: overscanColumnCount,\n          scrollDirection: scrollDirectionHorizontal,\n          startIndex: typeof visibleColumnIndices.start === 'number' ? visibleColumnIndices.start : 0,\n          stopIndex: typeof visibleColumnIndices.stop === 'number' ? visibleColumnIndices.stop : -1\n        });\n        var overscanRowIndices = overscanIndicesGetter({\n          direction: 'vertical',\n          cellCount: rowCount,\n          overscanCellsCount: overscanRowCount,\n          scrollDirection: scrollDirectionVertical,\n          startIndex: typeof visibleRowIndices.start === 'number' ? visibleRowIndices.start : 0,\n          stopIndex: typeof visibleRowIndices.stop === 'number' ? visibleRowIndices.stop : -1\n        }); // Store for _invokeOnGridRenderedHelper()\n\n        var columnStartIndex = overscanColumnIndices.overscanStartIndex;\n        var columnStopIndex = overscanColumnIndices.overscanStopIndex;\n        var rowStartIndex = overscanRowIndices.overscanStartIndex;\n        var rowStopIndex = overscanRowIndices.overscanStopIndex; // Advanced use-cases (eg CellMeasurer) require batched measurements to determine accurate sizes.\n\n        if (deferredMeasurementCache) {\n          // If rows have a dynamic height, scan the rows we are about to render.\n          // If any have not yet been measured, then we need to render all columns initially,\n          // Because the height of the row is equal to the tallest cell within that row,\n          // (And so we can't know the height without measuring all column-cells first).\n          if (!deferredMeasurementCache.hasFixedHeight()) {\n            for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n              if (!deferredMeasurementCache.has(rowIndex, 0)) {\n                columnStartIndex = 0;\n                columnStopIndex = columnCount - 1;\n                break;\n              }\n            }\n          } // If columns have a dynamic width, scan the columns we are about to render.\n          // If any have not yet been measured, then we need to render all rows initially,\n          // Because the width of the column is equal to the widest cell within that column,\n          // (And so we can't know the width without measuring all row-cells first).\n\n\n          if (!deferredMeasurementCache.hasFixedWidth()) {\n            for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n              if (!deferredMeasurementCache.has(0, columnIndex)) {\n                rowStartIndex = 0;\n                rowStopIndex = rowCount - 1;\n                break;\n              }\n            }\n          }\n        }\n\n        this._childrenToDisplay = cellRangeRenderer({\n          cellCache: this._cellCache,\n          cellRenderer: cellRenderer,\n          columnSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n          columnStartIndex: columnStartIndex,\n          columnStopIndex: columnStopIndex,\n          deferredMeasurementCache: deferredMeasurementCache,\n          horizontalOffsetAdjustment: horizontalOffsetAdjustment,\n          isScrolling: isScrolling,\n          isScrollingOptOut: isScrollingOptOut,\n          parent: this,\n          rowSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n          rowStartIndex: rowStartIndex,\n          rowStopIndex: rowStopIndex,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          styleCache: this._styleCache,\n          verticalOffsetAdjustment: verticalOffsetAdjustment,\n          visibleColumnIndices: visibleColumnIndices,\n          visibleRowIndices: visibleRowIndices\n        }); // update the indices\n\n        this._columnStartIndex = columnStartIndex;\n        this._columnStopIndex = columnStopIndex;\n        this._rowStartIndex = rowStartIndex;\n        this._rowStopIndex = rowStopIndex;\n      }\n    }\n    /**\n     * Sets an :isScrolling flag for a small window of time.\n     * This flag is used to disable pointer events on the scrollable portion of the Grid.\n     * This prevents jerky/stuttery mouse-wheel scrolling.\n     */\n\n  }, {\n    key: \"_debounceScrollEnded\",\n    value: function _debounceScrollEnded() {\n      var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;\n\n      if (this._disablePointerEventsTimeoutId) {\n        cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n      }\n\n      this._disablePointerEventsTimeoutId = requestAnimationTimeout(this._debounceScrollEndedCallback, scrollingResetTimeInterval);\n    }\n  }, {\n    key: \"_handleInvalidatedGridSize\",\n\n    /**\n     * Check for batched CellMeasurer size invalidations.\n     * This will occur the first time one or more previously unmeasured cells are rendered.\n     */\n    value: function _handleInvalidatedGridSize() {\n      if (typeof this._deferredInvalidateColumnIndex === 'number' && typeof this._deferredInvalidateRowIndex === 'number') {\n        var columnIndex = this._deferredInvalidateColumnIndex;\n        var rowIndex = this._deferredInvalidateRowIndex;\n        this._deferredInvalidateColumnIndex = null;\n        this._deferredInvalidateRowIndex = null;\n        this.recomputeGridSize({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        });\n      }\n    }\n  }, {\n    key: \"_invokeOnScrollMemoizer\",\n    value: function _invokeOnScrollMemoizer(_ref6) {\n      var _this3 = this;\n\n      var scrollLeft = _ref6.scrollLeft,\n          scrollTop = _ref6.scrollTop,\n          totalColumnsWidth = _ref6.totalColumnsWidth,\n          totalRowsHeight = _ref6.totalRowsHeight;\n\n      this._onScrollMemoizer({\n        callback: function callback(_ref7) {\n          var scrollLeft = _ref7.scrollLeft,\n              scrollTop = _ref7.scrollTop;\n          var _this3$props = _this3.props,\n              height = _this3$props.height,\n              onScroll = _this3$props.onScroll,\n              width = _this3$props.width;\n          onScroll({\n            clientHeight: height,\n            clientWidth: width,\n            scrollHeight: totalRowsHeight,\n            scrollLeft: scrollLeft,\n            scrollTop: scrollTop,\n            scrollWidth: totalColumnsWidth\n          });\n        },\n        indices: {\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        }\n      });\n    }\n  }, {\n    key: \"_isScrolling\",\n    value: function _isScrolling() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      // If isScrolling is defined in props, use it to override the value in state\n      // This is a performance optimization for WindowScroller + Grid\n      return Object.hasOwnProperty.call(props, 'isScrolling') ? Boolean(props.isScrolling) : Boolean(state.isScrolling);\n    }\n  }, {\n    key: \"_maybeCallOnScrollbarPresenceChange\",\n    value: function _maybeCallOnScrollbarPresenceChange() {\n      if (this._scrollbarPresenceChanged) {\n        var onScrollbarPresenceChange = this.props.onScrollbarPresenceChange;\n        this._scrollbarPresenceChanged = false;\n        onScrollbarPresenceChange({\n          horizontal: this._horizontalScrollBarSize > 0,\n          size: this.state.instanceProps.scrollbarSize,\n          vertical: this._verticalScrollBarSize > 0\n        });\n      }\n    }\n  }, {\n    key: \"scrollToPosition\",\n\n    /**\n     * Scroll to the specified offset(s).\n     * Useful for animating position changes.\n     */\n    value: function scrollToPosition(_ref8) {\n      var scrollLeft = _ref8.scrollLeft,\n          scrollTop = _ref8.scrollTop;\n\n      var stateUpdate = Grid._getScrollToPositionStateUpdate({\n        prevState: this.state,\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop\n      });\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }, {\n    key: \"_getCalculatedScrollLeft\",\n    value: function _getCalculatedScrollLeft() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      return Grid._getCalculatedScrollLeft(props, state);\n    }\n  }, {\n    key: \"_updateScrollLeftForScrollToColumn\",\n    value: function _updateScrollLeftForScrollToColumn() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      var stateUpdate = Grid._getScrollLeftForScrollToColumnStateUpdate(props, state);\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }, {\n    key: \"_getCalculatedScrollTop\",\n    value: function _getCalculatedScrollTop() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      return Grid._getCalculatedScrollTop(props, state);\n    }\n  }, {\n    key: \"_resetStyleCache\",\n    value: function _resetStyleCache() {\n      var styleCache = this._styleCache;\n      var cellCache = this._cellCache;\n      var isScrollingOptOut = this.props.isScrollingOptOut; // Reset cell and style caches once scrolling stops.\n      // This makes Grid simpler to use (since cells commonly change).\n      // And it keeps the caches from growing too large.\n      // Performance is most sensitive when a user is scrolling.\n      // Don't clear visible cells from cellCache if isScrollingOptOut is specified.\n      // This keeps the cellCache to a resonable size.\n\n      this._cellCache = {};\n      this._styleCache = {}; // Copy over the visible cell styles so avoid unnecessary re-render.\n\n      for (var rowIndex = this._rowStartIndex; rowIndex <= this._rowStopIndex; rowIndex++) {\n        for (var columnIndex = this._columnStartIndex; columnIndex <= this._columnStopIndex; columnIndex++) {\n          var key = \"\".concat(rowIndex, \"-\").concat(columnIndex);\n          this._styleCache[key] = styleCache[key];\n\n          if (isScrollingOptOut) {\n            this._cellCache[key] = cellCache[key];\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_updateScrollTopForScrollToRow\",\n    value: function _updateScrollTopForScrollToRow() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      var stateUpdate = Grid._getScrollTopForScrollToRowStateUpdate(props, state);\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var newState = {};\n\n      if (nextProps.columnCount === 0 && prevState.scrollLeft !== 0 || nextProps.rowCount === 0 && prevState.scrollTop !== 0) {\n        newState.scrollLeft = 0;\n        newState.scrollTop = 0; // only use scroll{Left,Top} from props if scrollTo{Column,Row} isn't specified\n        // scrollTo{Column,Row} should override scroll{Left,Top}\n      } else if (nextProps.scrollLeft !== prevState.scrollLeft && nextProps.scrollToColumn < 0 || nextProps.scrollTop !== prevState.scrollTop && nextProps.scrollToRow < 0) {\n        Object.assign(newState, Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: nextProps.scrollLeft,\n          scrollTop: nextProps.scrollTop\n        }));\n      }\n\n      var instanceProps = prevState.instanceProps; // Initially we should not clearStyleCache\n\n      newState.needToResetStyleCache = false;\n\n      if (nextProps.columnWidth !== instanceProps.prevColumnWidth || nextProps.rowHeight !== instanceProps.prevRowHeight) {\n        // Reset cache. set it to {} in render\n        newState.needToResetStyleCache = true;\n      }\n\n      instanceProps.columnSizeAndPositionManager.configure({\n        cellCount: nextProps.columnCount,\n        estimatedCellSize: Grid._getEstimatedColumnSize(nextProps),\n        cellSizeGetter: Grid._wrapSizeGetter(nextProps.columnWidth)\n      });\n      instanceProps.rowSizeAndPositionManager.configure({\n        cellCount: nextProps.rowCount,\n        estimatedCellSize: Grid._getEstimatedRowSize(nextProps),\n        cellSizeGetter: Grid._wrapSizeGetter(nextProps.rowHeight)\n      });\n\n      if (instanceProps.prevColumnCount === 0 || instanceProps.prevRowCount === 0) {\n        instanceProps.prevColumnCount = 0;\n        instanceProps.prevRowCount = 0;\n      } // If scrolling is controlled outside this component, clear cache when scrolling stops\n\n\n      if (nextProps.autoHeight && nextProps.isScrolling === false && instanceProps.prevIsScrolling === true) {\n        Object.assign(newState, {\n          isScrolling: false\n        });\n      }\n\n      var maybeStateA;\n      var maybeStateB;\n      calculateSizeAndPositionDataAndUpdateScrollOffset({\n        cellCount: instanceProps.prevColumnCount,\n        cellSize: typeof instanceProps.prevColumnWidth === 'number' ? instanceProps.prevColumnWidth : null,\n        computeMetadataCallback: function computeMetadataCallback() {\n          return instanceProps.columnSizeAndPositionManager.resetCell(0);\n        },\n        computeMetadataCallbackProps: nextProps,\n        nextCellsCount: nextProps.columnCount,\n        nextCellSize: typeof nextProps.columnWidth === 'number' ? nextProps.columnWidth : null,\n        nextScrollToIndex: nextProps.scrollToColumn,\n        scrollToIndex: instanceProps.prevScrollToColumn,\n        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {\n          maybeStateA = Grid._getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState);\n        }\n      });\n      calculateSizeAndPositionDataAndUpdateScrollOffset({\n        cellCount: instanceProps.prevRowCount,\n        cellSize: typeof instanceProps.prevRowHeight === 'number' ? instanceProps.prevRowHeight : null,\n        computeMetadataCallback: function computeMetadataCallback() {\n          return instanceProps.rowSizeAndPositionManager.resetCell(0);\n        },\n        computeMetadataCallbackProps: nextProps,\n        nextCellsCount: nextProps.rowCount,\n        nextCellSize: typeof nextProps.rowHeight === 'number' ? nextProps.rowHeight : null,\n        nextScrollToIndex: nextProps.scrollToRow,\n        scrollToIndex: instanceProps.prevScrollToRow,\n        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {\n          maybeStateB = Grid._getScrollTopForScrollToRowStateUpdate(nextProps, prevState);\n        }\n      });\n      instanceProps.prevColumnCount = nextProps.columnCount;\n      instanceProps.prevColumnWidth = nextProps.columnWidth;\n      instanceProps.prevIsScrolling = nextProps.isScrolling === true;\n      instanceProps.prevRowCount = nextProps.rowCount;\n      instanceProps.prevRowHeight = nextProps.rowHeight;\n      instanceProps.prevScrollToColumn = nextProps.scrollToColumn;\n      instanceProps.prevScrollToRow = nextProps.scrollToRow; // getting scrollBarSize (moved from componentWillMount)\n\n      instanceProps.scrollbarSize = nextProps.getScrollbarSize();\n\n      if (instanceProps.scrollbarSize === undefined) {\n        instanceProps.scrollbarSizeMeasured = false;\n        instanceProps.scrollbarSize = 0;\n      } else {\n        instanceProps.scrollbarSizeMeasured = true;\n      }\n\n      newState.instanceProps = instanceProps;\n      return _objectSpread({}, newState, {}, maybeStateA, {}, maybeStateB);\n    }\n  }, {\n    key: \"_getEstimatedColumnSize\",\n    value: function _getEstimatedColumnSize(props) {\n      return typeof props.columnWidth === 'number' ? props.columnWidth : props.estimatedColumnSize;\n    }\n  }, {\n    key: \"_getEstimatedRowSize\",\n    value: function _getEstimatedRowSize(props) {\n      return typeof props.rowHeight === 'number' ? props.rowHeight : props.estimatedRowSize;\n    }\n  }, {\n    key: \"_getScrollToPositionStateUpdate\",\n\n    /**\n     * Get the updated state after scrolling to\n     * scrollLeft and scrollTop\n     */\n    value: function _getScrollToPositionStateUpdate(_ref9) {\n      var prevState = _ref9.prevState,\n          scrollLeft = _ref9.scrollLeft,\n          scrollTop = _ref9.scrollTop;\n      var newState = {\n        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED\n      };\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0) {\n        newState.scrollDirectionHorizontal = scrollLeft > prevState.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n        newState.scrollLeft = scrollLeft;\n      }\n\n      if (typeof scrollTop === 'number' && scrollTop >= 0) {\n        newState.scrollDirectionVertical = scrollTop > prevState.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n        newState.scrollTop = scrollTop;\n      }\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft || typeof scrollTop === 'number' && scrollTop >= 0 && scrollTop !== prevState.scrollTop) {\n        return newState;\n      }\n\n      return {};\n    }\n  }, {\n    key: \"_wrapSizeGetter\",\n    value: function _wrapSizeGetter(value) {\n      return typeof value === 'function' ? value : function () {\n        return value;\n      };\n    }\n  }, {\n    key: \"_getCalculatedScrollLeft\",\n    value: function _getCalculatedScrollLeft(nextProps, prevState) {\n      var columnCount = nextProps.columnCount,\n          height = nextProps.height,\n          scrollToAlignment = nextProps.scrollToAlignment,\n          scrollToColumn = nextProps.scrollToColumn,\n          width = nextProps.width;\n      var scrollLeft = prevState.scrollLeft,\n          instanceProps = prevState.instanceProps;\n\n      if (columnCount > 0) {\n        var finalColumn = columnCount - 1;\n        var targetIndex = scrollToColumn < 0 ? finalColumn : Math.min(finalColumn, scrollToColumn);\n        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n        return instanceProps.columnSizeAndPositionManager.getUpdatedOffsetForIndex({\n          align: scrollToAlignment,\n          containerSize: width - scrollBarSize,\n          currentOffset: scrollLeft,\n          targetIndex: targetIndex\n        });\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"_getScrollLeftForScrollToColumnStateUpdate\",\n    value: function _getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState) {\n      var scrollLeft = prevState.scrollLeft;\n\n      var calculatedScrollLeft = Grid._getCalculatedScrollLeft(nextProps, prevState);\n\n      if (typeof calculatedScrollLeft === 'number' && calculatedScrollLeft >= 0 && scrollLeft !== calculatedScrollLeft) {\n        return Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: -1\n        });\n      }\n\n      return {};\n    }\n  }, {\n    key: \"_getCalculatedScrollTop\",\n    value: function _getCalculatedScrollTop(nextProps, prevState) {\n      var height = nextProps.height,\n          rowCount = nextProps.rowCount,\n          scrollToAlignment = nextProps.scrollToAlignment,\n          scrollToRow = nextProps.scrollToRow,\n          width = nextProps.width;\n      var scrollTop = prevState.scrollTop,\n          instanceProps = prevState.instanceProps;\n\n      if (rowCount > 0) {\n        var finalRow = rowCount - 1;\n        var targetIndex = scrollToRow < 0 ? finalRow : Math.min(finalRow, scrollToRow);\n        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n        return instanceProps.rowSizeAndPositionManager.getUpdatedOffsetForIndex({\n          align: scrollToAlignment,\n          containerSize: height - scrollBarSize,\n          currentOffset: scrollTop,\n          targetIndex: targetIndex\n        });\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"_getScrollTopForScrollToRowStateUpdate\",\n    value: function _getScrollTopForScrollToRowStateUpdate(nextProps, prevState) {\n      var scrollTop = prevState.scrollTop;\n\n      var calculatedScrollTop = Grid._getCalculatedScrollTop(nextProps, prevState);\n\n      if (typeof calculatedScrollTop === 'number' && calculatedScrollTop >= 0 && scrollTop !== calculatedScrollTop) {\n        return Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: -1,\n          scrollTop: calculatedScrollTop\n        });\n      }\n\n      return {};\n    }\n  }]);\n\n  return Grid;\n}(React.PureComponent), _defineProperty(_class, \"propTypes\", process.env.NODE_ENV === 'production' ? null : {\n  \"aria-label\": PropTypes.string.isRequired,\n  \"aria-readonly\": PropTypes.bool,\n\n  /**\n   * Set the width of the inner scrollable container to 'auto'.\n   * This is useful for single-column Grids to ensure that the column doesn't extend below a vertical scrollbar.\n   */\n  \"autoContainerWidth\": PropTypes.bool.isRequired,\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  \"autoHeight\": PropTypes.bool.isRequired,\n\n  /**\n   * Removes fixed width from the scrollingContainer so that the total width of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  \"autoWidth\": PropTypes.bool.isRequired,\n\n  /** Responsible for rendering a cell given an row and column index.  */\n  \"cellRenderer\": function cellRenderer() {\n    return (typeof bpfrpt_proptype_CellRenderer === \"function\" ? bpfrpt_proptype_CellRenderer.isRequired ? bpfrpt_proptype_CellRenderer.isRequired : bpfrpt_proptype_CellRenderer : PropTypes.shape(bpfrpt_proptype_CellRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Responsible for rendering a group of cells given their index ranges.  */\n  \"cellRangeRenderer\": function cellRangeRenderer() {\n    return (typeof bpfrpt_proptype_CellRangeRenderer === \"function\" ? bpfrpt_proptype_CellRangeRenderer.isRequired ? bpfrpt_proptype_CellRangeRenderer.isRequired : bpfrpt_proptype_CellRangeRenderer : PropTypes.shape(bpfrpt_proptype_CellRangeRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Optional custom CSS class name to attach to root Grid element.  */\n  \"className\": PropTypes.string,\n\n  /** Number of columns in grid.  */\n  \"columnCount\": PropTypes.number.isRequired,\n\n  /** Either a fixed column width (number) or a function that returns the width of a column given its index.  */\n  \"columnWidth\": function columnWidth() {\n    return (typeof bpfrpt_proptype_CellSize === \"function\" ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : PropTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n  /** Unfiltered props for the Grid container. */\n  \"containerProps\": PropTypes.object,\n\n  /** ARIA role for the cell-container.  */\n  \"containerRole\": PropTypes.string.isRequired,\n\n  /** Optional inline style applied to inner cell-container */\n  \"containerStyle\": PropTypes.object.isRequired,\n\n  /**\n   * If CellMeasurer is used to measure this Grid's children, this should be a pointer to its CellMeasurerCache.\n   * A shared CellMeasurerCache reference enables Grid and CellMeasurer to share measurement data.\n   */\n  \"deferredMeasurementCache\": PropTypes.object,\n\n  /**\n   * Used to estimate the total width of a Grid before all of its columns have actually been measured.\n   * The estimated total width is adjusted as columns are rendered.\n   */\n  \"estimatedColumnSize\": PropTypes.number.isRequired,\n\n  /**\n   * Used to estimate the total height of a Grid before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   */\n  \"estimatedRowSize\": PropTypes.number.isRequired,\n\n  /** Exposed for testing purposes only.  */\n  \"getScrollbarSize\": PropTypes.func.isRequired,\n\n  /** Height of Grid; this property determines the number of visible (vs virtualized) rows.  */\n  \"height\": PropTypes.number.isRequired,\n\n  /** Optional custom id to attach to root Grid element.  */\n  \"id\": PropTypes.string,\n\n  /**\n   * Override internal is-scrolling state tracking.\n   * This property is primarily intended for use with the WindowScroller component.\n   */\n  \"isScrolling\": PropTypes.bool,\n\n  /**\n   * Opt-out of isScrolling param passed to cellRangeRenderer.\n   * To avoid the extra render when scroll stops.\n   */\n  \"isScrollingOptOut\": PropTypes.bool.isRequired,\n\n  /** Optional renderer to be used in place of rows when either :rowCount or :columnCount is 0.  */\n  \"noContentRenderer\": function noContentRenderer() {\n    return (typeof bpfrpt_proptype_NoContentRenderer === \"function\" ? bpfrpt_proptype_NoContentRenderer.isRequired ? bpfrpt_proptype_NoContentRenderer.isRequired : bpfrpt_proptype_NoContentRenderer : PropTypes.shape(bpfrpt_proptype_NoContentRenderer).isRequired).apply(this, arguments);\n  },\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   */\n  \"onScroll\": PropTypes.func.isRequired,\n\n  /**\n   * Called whenever a horizontal or vertical scrollbar is added or removed.\n   * This prop is not intended for end-user use;\n   * It is used by MultiGrid to support fixed-row/fixed-column scroll syncing.\n   */\n  \"onScrollbarPresenceChange\": PropTypes.func.isRequired,\n\n  /** Callback invoked with information about the section of the Grid that was just rendered.  */\n  \"onSectionRendered\": PropTypes.func.isRequired,\n\n  /**\n   * Number of columns to render before/after the visible section of the grid.\n   * These columns can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  \"overscanColumnCount\": PropTypes.number.isRequired,\n\n  /**\n   * Calculates the number of cells to overscan before and after a specified range.\n   * This function ensures that overscanning doesn't exceed the available cells.\n   */\n  \"overscanIndicesGetter\": function overscanIndicesGetter() {\n    return (typeof bpfrpt_proptype_OverscanIndicesGetter === \"function\" ? bpfrpt_proptype_OverscanIndicesGetter.isRequired ? bpfrpt_proptype_OverscanIndicesGetter.isRequired : bpfrpt_proptype_OverscanIndicesGetter : PropTypes.shape(bpfrpt_proptype_OverscanIndicesGetter).isRequired).apply(this, arguments);\n  },\n\n  /**\n   * Number of rows to render above/below the visible section of the grid.\n   * These rows can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  \"overscanRowCount\": PropTypes.number.isRequired,\n\n  /** ARIA role for the grid element.  */\n  \"role\": PropTypes.string.isRequired,\n\n  /**\n   * Either a fixed row height (number) or a function that returns the height of a row given its index.\n   * Should implement the following interface: ({ index: number }): number\n   */\n  \"rowHeight\": function rowHeight() {\n    return (typeof bpfrpt_proptype_CellSize === \"function\" ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : PropTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n  /** Number of rows in grid.  */\n  \"rowCount\": PropTypes.number.isRequired,\n\n  /** Wait this amount of time after the last scroll event before resetting Grid `pointer-events`. */\n  \"scrollingResetTimeInterval\": PropTypes.number.isRequired,\n\n  /** Horizontal offset. */\n  \"scrollLeft\": PropTypes.number,\n\n  /**\n   * Controls scroll-to-cell behavior of the Grid.\n   * The default (\"auto\") scrolls the least amount possible to ensure that the specified cell is fully visible.\n   * Use \"start\" to align cells to the top/left of the Grid and \"end\" to align bottom/right.\n   */\n  \"scrollToAlignment\": function scrollToAlignment() {\n    return (typeof bpfrpt_proptype_Alignment === \"function\" ? bpfrpt_proptype_Alignment.isRequired ? bpfrpt_proptype_Alignment.isRequired : bpfrpt_proptype_Alignment : PropTypes.shape(bpfrpt_proptype_Alignment).isRequired).apply(this, arguments);\n  },\n\n  /** Column index to ensure visible (by forcefully scrolling if necessary) */\n  \"scrollToColumn\": PropTypes.number.isRequired,\n\n  /** Vertical offset. */\n  \"scrollTop\": PropTypes.number,\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) */\n  \"scrollToRow\": PropTypes.number.isRequired,\n\n  /** Optional inline style */\n  \"style\": PropTypes.object.isRequired,\n\n  /** Tab index for focus */\n  \"tabIndex\": PropTypes.number,\n\n  /** Width of Grid; this property determines the number of visible (vs virtualized) columns.  */\n  \"width\": PropTypes.number.isRequired\n}), _temp);\n\n_defineProperty(Grid, \"defaultProps\", {\n  'aria-label': 'grid',\n  'aria-readonly': true,\n  autoContainerWidth: false,\n  autoHeight: false,\n  autoWidth: false,\n  cellRangeRenderer: defaultCellRangeRenderer,\n  containerRole: 'rowgroup',\n  containerStyle: {},\n  estimatedColumnSize: 100,\n  estimatedRowSize: 30,\n  getScrollbarSize: scrollbarSize,\n  noContentRenderer: renderNull,\n  onScroll: function onScroll() {},\n  onScrollbarPresenceChange: function onScrollbarPresenceChange() {},\n  onSectionRendered: function onSectionRendered() {},\n  overscanColumnCount: 0,\n  overscanIndicesGetter: defaultOverscanIndicesGetter,\n  overscanRowCount: 10,\n  role: 'grid',\n  scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL,\n  scrollToAlignment: 'auto',\n  scrollToColumn: -1,\n  scrollToRow: -1,\n  style: {},\n  tabIndex: 0,\n  isScrollingOptOut: false\n});\n\npolyfill(Grid);\nexport default Grid;\nimport { bpfrpt_proptype_CellRenderer } from \"./types\";\nimport { bpfrpt_proptype_CellRangeRenderer } from \"./types\";\nimport { bpfrpt_proptype_CellPosition } from \"./types\";\nimport { bpfrpt_proptype_CellSize } from \"./types\";\nimport { bpfrpt_proptype_CellSizeGetter } from \"./types\";\nimport { bpfrpt_proptype_NoContentRenderer } from \"./types\";\nimport { bpfrpt_proptype_Scroll } from \"./types\";\nimport { bpfrpt_proptype_ScrollbarPresenceChange } from \"./types\";\nimport { bpfrpt_proptype_RenderedSection } from \"./types\";\nimport { bpfrpt_proptype_OverscanIndicesGetter } from \"./types\";\nimport { bpfrpt_proptype_Alignment } from \"./types\";\nimport { bpfrpt_proptype_CellCache } from \"./types\";\nimport { bpfrpt_proptype_StyleCache } from \"./types\";\nimport { bpfrpt_proptype_AnimationTimeoutId } from \"../utils/requestAnimationTimeout\";\nimport PropTypes from \"prop-types\";","export var SCROLL_DIRECTION_BACKWARD = -1;\nexport var SCROLL_DIRECTION_FORWARD = 1;\nexport var SCROLL_DIRECTION_HORIZONTAL = 'horizontal';\nexport var SCROLL_DIRECTION_VERTICAL = 'vertical';\n/**\n * Calculates the number of cells to overscan before and after a specified range.\n * This function ensures that overscanning doesn't exceed the available cells.\n */\n\nexport default function defaultOverscanIndicesGetter(_ref) {\n  var cellCount = _ref.cellCount,\n      overscanCellsCount = _ref.overscanCellsCount,\n      scrollDirection = _ref.scrollDirection,\n      startIndex = _ref.startIndex,\n      stopIndex = _ref.stopIndex;\n  // Make sure we render at least 1 cell extra before and after (except near boundaries)\n  // This is necessary in order to support keyboard navigation (TAB/SHIFT+TAB) in some cases\n  // For more info see issues #625\n  overscanCellsCount = Math.max(1, overscanCellsCount);\n\n  if (scrollDirection === SCROLL_DIRECTION_FORWARD) {\n    return {\n      overscanStartIndex: Math.max(0, startIndex - 1),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)\n    };\n  } else {\n    return {\n      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex + 1)\n    };\n  }\n}\nimport { bpfrpt_proptype_OverscanIndicesGetterParams } from \"./types\";\nimport { bpfrpt_proptype_OverscanIndices } from \"./types\";","import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _class, _temp;\n\nimport Grid, { accessibilityOverscanIndicesGetter } from '../Grid';\nimport * as React from 'react';\nimport clsx from 'clsx';\n/**\n * It is inefficient to create and manage a large list of DOM elements within a scrolling container\n * if only a few of those elements are visible. The primary purpose of this component is to improve\n * performance by only rendering the DOM nodes that a user is able to see based on their current\n * scroll position.\n *\n * This component renders a virtualized list of elements with either fixed or dynamic heights.\n */\n\nvar List = (_temp = _class =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(List, _React$PureComponent);\n\n  function List() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, List);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(List)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"Grid\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_cellRenderer\", function (_ref) {\n      var parent = _ref.parent,\n          rowIndex = _ref.rowIndex,\n          style = _ref.style,\n          isScrolling = _ref.isScrolling,\n          isVisible = _ref.isVisible,\n          key = _ref.key;\n      var rowRenderer = _this.props.rowRenderer; // TRICKY The style object is sometimes cached by Grid.\n      // This prevents new style objects from bypassing shallowCompare().\n      // However as of React 16, style props are auto-frozen (at least in dev mode)\n      // Check to make sure we can still modify the style before proceeding.\n      // https://github.com/facebook/react/commit/977357765b44af8ff0cfea327866861073095c12#commitcomment-20648713\n\n      var widthDescriptor = Object.getOwnPropertyDescriptor(style, 'width');\n\n      if (widthDescriptor && widthDescriptor.writable) {\n        // By default, List cells should be 100% width.\n        // This prevents them from flowing under a scrollbar (if present).\n        style.width = '100%';\n      }\n\n      return rowRenderer({\n        index: rowIndex,\n        style: style,\n        isScrolling: isScrolling,\n        isVisible: isVisible,\n        key: key,\n        parent: parent\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_setRef\", function (ref) {\n      _this.Grid = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onScroll\", function (_ref2) {\n      var clientHeight = _ref2.clientHeight,\n          scrollHeight = _ref2.scrollHeight,\n          scrollTop = _ref2.scrollTop;\n      var onScroll = _this.props.onScroll;\n      onScroll({\n        clientHeight: clientHeight,\n        scrollHeight: scrollHeight,\n        scrollTop: scrollTop\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onSectionRendered\", function (_ref3) {\n      var rowOverscanStartIndex = _ref3.rowOverscanStartIndex,\n          rowOverscanStopIndex = _ref3.rowOverscanStopIndex,\n          rowStartIndex = _ref3.rowStartIndex,\n          rowStopIndex = _ref3.rowStopIndex;\n      var onRowsRendered = _this.props.onRowsRendered;\n      onRowsRendered({\n        overscanStartIndex: rowOverscanStartIndex,\n        overscanStopIndex: rowOverscanStopIndex,\n        startIndex: rowStartIndex,\n        stopIndex: rowStopIndex\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: \"forceUpdateGrid\",\n    value: function forceUpdateGrid() {\n      if (this.Grid) {\n        this.Grid.forceUpdate();\n      }\n    }\n    /** See Grid#getOffsetForCell */\n\n  }, {\n    key: \"getOffsetForRow\",\n    value: function getOffsetForRow(_ref4) {\n      var alignment = _ref4.alignment,\n          index = _ref4.index;\n\n      if (this.Grid) {\n        var _this$Grid$getOffsetF = this.Grid.getOffsetForCell({\n          alignment: alignment,\n          rowIndex: index,\n          columnIndex: 0\n        }),\n            scrollTop = _this$Grid$getOffsetF.scrollTop;\n\n        return scrollTop;\n      }\n\n      return 0;\n    }\n    /** CellMeasurer compatibility */\n\n  }, {\n    key: \"invalidateCellSizeAfterRender\",\n    value: function invalidateCellSizeAfterRender(_ref5) {\n      var columnIndex = _ref5.columnIndex,\n          rowIndex = _ref5.rowIndex;\n\n      if (this.Grid) {\n        this.Grid.invalidateCellSizeAfterRender({\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    }\n    /** See Grid#measureAllCells */\n\n  }, {\n    key: \"measureAllRows\",\n    value: function measureAllRows() {\n      if (this.Grid) {\n        this.Grid.measureAllCells();\n      }\n    }\n    /** CellMeasurer compatibility */\n\n  }, {\n    key: \"recomputeGridSize\",\n    value: function recomputeGridSize() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref6$columnIndex = _ref6.columnIndex,\n          columnIndex = _ref6$columnIndex === void 0 ? 0 : _ref6$columnIndex,\n          _ref6$rowIndex = _ref6.rowIndex,\n          rowIndex = _ref6$rowIndex === void 0 ? 0 : _ref6$rowIndex;\n\n      if (this.Grid) {\n        this.Grid.recomputeGridSize({\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    }\n    /** See Grid#recomputeGridSize */\n\n  }, {\n    key: \"recomputeRowHeights\",\n    value: function recomputeRowHeights() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.recomputeGridSize({\n          rowIndex: index,\n          columnIndex: 0\n        });\n      }\n    }\n    /** See Grid#scrollToPosition */\n\n  }, {\n    key: \"scrollToPosition\",\n    value: function scrollToPosition() {\n      var scrollTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.scrollToPosition({\n          scrollTop: scrollTop\n        });\n      }\n    }\n    /** See Grid#scrollToCell */\n\n  }, {\n    key: \"scrollToRow\",\n    value: function scrollToRow() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.scrollToCell({\n          columnIndex: 0,\n          rowIndex: index\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          noRowsRenderer = _this$props.noRowsRenderer,\n          scrollToIndex = _this$props.scrollToIndex,\n          width = _this$props.width;\n      var classNames = clsx('ReactVirtualized__List', className);\n      return React.createElement(Grid, _extends({}, this.props, {\n        autoContainerWidth: true,\n        cellRenderer: this._cellRenderer,\n        className: classNames,\n        columnWidth: width,\n        columnCount: 1,\n        noContentRenderer: noRowsRenderer,\n        onScroll: this._onScroll,\n        onSectionRendered: this._onSectionRendered,\n        ref: this._setRef,\n        scrollToRow: scrollToIndex\n      }));\n    }\n  }]);\n\n  return List;\n}(React.PureComponent), _defineProperty(_class, \"propTypes\", process.env.NODE_ENV === 'production' ? null : {\n  \"aria-label\": PropTypes.string,\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height\n   * of rows can stretch the window. Intended for use with WindowScroller\n   */\n  \"autoHeight\": PropTypes.bool.isRequired,\n\n  /** Optional CSS class name */\n  \"className\": PropTypes.string,\n\n  /**\n   * Used to estimate the total height of a List before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   */\n  \"estimatedRowSize\": PropTypes.number.isRequired,\n\n  /** Height constraint for list (determines how many actual rows are rendered) */\n  \"height\": PropTypes.number.isRequired,\n\n  /** Optional renderer to be used in place of rows when rowCount is 0 */\n  \"noRowsRenderer\": function noRowsRenderer() {\n    return (typeof bpfrpt_proptype_NoContentRenderer === \"function\" ? bpfrpt_proptype_NoContentRenderer.isRequired ? bpfrpt_proptype_NoContentRenderer.isRequired : bpfrpt_proptype_NoContentRenderer : PropTypes.shape(bpfrpt_proptype_NoContentRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Callback invoked with information about the slice of rows that were just rendered.  */\n  \"onRowsRendered\": PropTypes.func.isRequired,\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   */\n  \"onScroll\": PropTypes.func.isRequired,\n\n  /** See Grid#overscanIndicesGetter */\n  \"overscanIndicesGetter\": function overscanIndicesGetter() {\n    return (typeof bpfrpt_proptype_OverscanIndicesGetter === \"function\" ? bpfrpt_proptype_OverscanIndicesGetter.isRequired ? bpfrpt_proptype_OverscanIndicesGetter.isRequired : bpfrpt_proptype_OverscanIndicesGetter : PropTypes.shape(bpfrpt_proptype_OverscanIndicesGetter).isRequired).apply(this, arguments);\n  },\n\n  /**\n   * Number of rows to render above/below the visible bounds of the list.\n   * These rows can help for smoother scrolling on touch devices.\n   */\n  \"overscanRowCount\": PropTypes.number.isRequired,\n\n  /** Either a fixed row height (number) or a function that returns the height of a row given its index.  */\n  \"rowHeight\": function rowHeight() {\n    return (typeof bpfrpt_proptype_CellSize === \"function\" ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : PropTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n  /** Responsible for rendering a row given an index; ({ index: number }): node */\n  \"rowRenderer\": function rowRenderer() {\n    return (typeof bpfrpt_proptype_RowRenderer === \"function\" ? bpfrpt_proptype_RowRenderer.isRequired ? bpfrpt_proptype_RowRenderer.isRequired : bpfrpt_proptype_RowRenderer : PropTypes.shape(bpfrpt_proptype_RowRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Number of rows in list. */\n  \"rowCount\": PropTypes.number.isRequired,\n\n  /** See Grid#scrollToAlignment */\n  \"scrollToAlignment\": function scrollToAlignment() {\n    return (typeof bpfrpt_proptype_Alignment === \"function\" ? bpfrpt_proptype_Alignment.isRequired ? bpfrpt_proptype_Alignment.isRequired : bpfrpt_proptype_Alignment : PropTypes.shape(bpfrpt_proptype_Alignment).isRequired).apply(this, arguments);\n  },\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) */\n  \"scrollToIndex\": PropTypes.number.isRequired,\n\n  /** Vertical offset. */\n  \"scrollTop\": PropTypes.number,\n\n  /** Optional inline style */\n  \"style\": PropTypes.object.isRequired,\n\n  /** Tab index for focus */\n  \"tabIndex\": PropTypes.number,\n\n  /** Width of list */\n  \"width\": PropTypes.number.isRequired\n}), _temp);\n\n_defineProperty(List, \"defaultProps\", {\n  autoHeight: false,\n  estimatedRowSize: 30,\n  onScroll: function onScroll() {},\n  noRowsRenderer: function noRowsRenderer() {\n    return null;\n  },\n  onRowsRendered: function onRowsRendered() {},\n  overscanIndicesGetter: accessibilityOverscanIndicesGetter,\n  overscanRowCount: 10,\n  scrollToAlignment: 'auto',\n  scrollToIndex: -1,\n  style: {}\n});\n\nexport { List as default };\nimport { bpfrpt_proptype_NoContentRenderer } from \"../Grid\";\nimport { bpfrpt_proptype_Alignment } from \"../Grid\";\nimport { bpfrpt_proptype_CellSize } from \"../Grid\";\nimport { bpfrpt_proptype_CellPosition } from \"../Grid\";\nimport { bpfrpt_proptype_OverscanIndicesGetter } from \"../Grid\";\nimport { bpfrpt_proptype_RenderedSection } from \"../Grid\";\nimport { bpfrpt_proptype_CellRendererParams } from \"../Grid\";\nimport { bpfrpt_proptype_Scroll as bpfrpt_proptype_GridScroll } from \"../Grid\";\nimport { bpfrpt_proptype_RowRenderer } from \"./types\";\nimport { bpfrpt_proptype_RenderedRows } from \"./types\";\nimport { bpfrpt_proptype_Scroll } from \"./types\";\nimport PropTypes from \"prop-types\";"],"names":["_class","_temp","CellMeasurer","_React$PureComponent","_inherits","_getPrototypeOf2","_this","_classCallCheck","_len","args","_key","_possibleConstructorReturn","_getPrototypeOf","_defineProperty","_assertThisInitialized","_this$props","cache","_this$props$columnInd","columnIndex","parent","_this$props$rowIndex","rowIndex","_this$_getCellMeasure","height","width","element","_createClass","children","node","findDOMNode","styleWidth","styleHeight","_this$props2","_this$props2$columnIn","_this$props2$rowIndex","_this$_getCellMeasure2","React.PureComponent","DEFAULT_HEIGHT","DEFAULT_WIDTH","CellMeasurerCache","params","_ref","index","key","_ref2","defaultHeight","defaultWidth","fixedHeight","fixedWidth","keyMapper","minHeight","minWidth","defaultKeyMapper","_key2","columnWidth","columnKey","rowHeight","_i","rowKey","calculateSizeAndPositionDataAndUpdateScrollOffset","cellCount","cellSize","computeMetadataCallback","computeMetadataCallbackProps","nextCellsCount","nextCellSize","nextScrollToIndex","scrollToIndex","updateScrollOffsetForScrollToIndex","CellSizeAndPositionManager","cellSizeGetter","estimatedCellSize","lastMeasuredCellSizeAndPosition","offset","size","totalSizeOfMeasuredCells","numUnmeasuredCells","totalSizeOfUnmeasuredCells","_ref3","_ref3$align","align","containerSize","currentOffset","targetIndex","datum","maxOffset","minOffset","idealOffset","totalSize","start","stop","high","low","middle","interval","lastMeasuredIndex","DEFAULT_MAX_ELEMENT_SIZE","CHROME_MAX_ELEMENT_SIZE","isBrowser","isChrome","getMaxElementSize","ScalingCellSizeAndPositionManager","_ref$maxScrollSize","maxScrollSize","_objectWithoutProperties","safeTotalSize","offsetPercentage","_ref4","_ref5","_ref6","_ref7","createCallbackMemoizer","requireAllKeys","cachedIndices","callback","indices","keys","allInitialized","value","indexChanged","cachedValue","SCROLL_DIRECTION_BACKWARD","SCROLL_DIRECTION_FORWARD","defaultOverscanIndicesGetter","overscanCellsCount","scrollDirection","startIndex","stopIndex","updateScrollIndexHelper","cellSizeAndPositionManager","previousCellsCount","previousCellSize","previousScrollToAlignment","previousScrollToIndex","previousSize","scrollOffset","scrollToAlignment","sizeJustIncreasedFromZero","updateScrollIndexCallback","hasScrollToIndex","sizeHasChanged","defaultCellRangeRenderer","cellCache","cellRenderer","columnSizeAndPositionManager","columnStartIndex","columnStopIndex","deferredMeasurementCache","horizontalOffsetAdjustment","isScrolling","isScrollingOptOut","rowSizeAndPositionManager","rowStartIndex","rowStopIndex","styleCache","verticalOffsetAdjustment","visibleColumnIndices","visibleRowIndices","renderedCells","areOffsetsAdjusted","canCacheStyle","rowDatum","columnDatum","isVisible","style","cellRendererParams","renderedCell","canUseDOM","scrollbarSize","recalc","scrollDiv","componentWillMount","state","componentWillReceiveProps","nextProps","updater","prevState","componentWillUpdate","nextState","prevProps","polyfill","Component","prototype","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","componentName","newApiName","componentDidUpdate","maybeSnapshot","snapshot","win","request","cancel","id","raf","caf","cancelAnimationTimeout","frame","requestAnimationTimeout","delay","timeout","ownKeys","object","enumerableOnly","symbols","sym","_objectSpread","target","i","source","DEFAULT_SCROLLING_RESET_TIME_INTERVAL","SCROLL_POSITION_CHANGE_REASONS","renderNull","Grid","props","onSectionRendered","ref","event","_ref$alignment","alignment","_ref$columnIndex","_ref$rowIndex","offsetProps","_ref2$scrollLeft","scrollLeftParam","_ref2$scrollTop","scrollTopParam","autoHeight","autoWidth","instanceProps","totalRowsHeight","totalColumnsWidth","scrollLeft","scrollTop","scrollDirectionHorizontal","scrollDirectionVertical","newState","columnCount","rowCount","_ref4$columnIndex","_ref4$rowIndex","_this$props3","scrollToColumn","scrollToRow","_this$props4","getScrollbarSize","stateUpdate","sizeIsBiggerThanZero","_this2","_this$props5","_this$state","scrollPositionChangeReason","columnOrRowCountJustIncreasedFromZero","_this$props6","autoContainerWidth","className","containerProps","containerRole","containerStyle","noContentRenderer","role","tabIndex","_this$state2","needToResetStyleCache","gridStyle","verticalScrollBarSize","horizontalScrollBarSize","childrenToDisplay","showNoContentRenderer","React.createElement","_extends","clsx","cellRangeRenderer","overscanColumnCount","overscanIndicesGetter","overscanRowCount","overscanColumnIndices","overscanRowIndices","scrollingResetTimeInterval","_this3","_this3$props","onScroll","onScrollbarPresenceChange","_ref8","maybeStateA","maybeStateB","_ref9","finalColumn","scrollBarSize","calculatedScrollLeft","finalRow","calculatedScrollTop","List","rowRenderer","widthDescriptor","clientHeight","scrollHeight","rowOverscanStartIndex","rowOverscanStopIndex","onRowsRendered","_this$Grid$getOffsetF","_ref6$columnIndex","_ref6$rowIndex","noRowsRenderer","classNames","accessibilityOverscanIndicesGetter"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]}