import{j as L}from"./jsx-runtime-c3d7f245.js";import{r as s}from"./index-c6dae603.js";import{f as A,u as E,a as G,b as i,c as w,r as a,U as B,e as D,v as F,V as K,d as W,g as Z,s as Q,q as X,S as $,j as ee,k as te,l as oe,m as ne,n as se}from"./Viewport-593c9643.js";import{L as re}from"./ListItem-a39d7024.js";const T=s.forwardRef(({children:c,overscan:S=4,initialItemSize:_,initialItemCount:x,horizontal:k,mode:g,cache:q,components:{Root:O=K,Item:N="div"}=W,onScroll:j,onScrollStop:H,onRangeChange:b,...u},J)=>{const d=s.useMemo(()=>A(c),[c]),m=d.length,y=E(j),v=E(H),[e,C,r,l,M]=G(()=>{const t=!!k,o=g==="rtl",n=Z(m,_,x,q,g==="reverse",!_);return[n,Q(n,t),X(n,t,o),t,o]});e._updateCacheLength(m);const[f,p]=i(e,e._getRange,$),h=i(e,e._getIsScrolling,ee),U=i(e,e._getJumpCount,te),I=i(e,e._getCorrectedScrollSize,oe,!0),V=s.useRef(null);w(()=>{const t=V[a],o=C._observeRoot(t),n=r._initRoot(t),Y=e._subscribe(B,()=>{y[a]&&y[a](e._getScrollOffset())});return()=>{o(),n(),Y()}},[]),w(()=>{const t=e._flushJump();t&&r._fixScrollJump(t)},[U]),s.useEffect(()=>{h||v[a]&&v[a]()},[h]),s.useEffect(()=>{b&&b(f,p)},[f,p]),s.useImperativeHandle(J,()=>({get cache(){return e._getCache()},get scrollOffset(){return e._getScrollOffset()},get scrollSize(){return r._getActualScrollSize()},get viewportSize(){return e._getViewportSize()},scrollToIndex:r._scrollToIndex,scrollTo:r._scrollTo,scrollBy(t){r._scrollTo(e._getScrollOffset()+t)}}),[]);const z=ne(f-S,0),R=se(p+S,m-1),P=s.useMemo(()=>{const t=[];for(let o=z;o<=R;o++){const n=d[o];D(n)&&t.push(L(re,{_resizer:C,_store:e,_index:o,_element:N,_children:n,_isHorizontal:l,_isRtl:M},n.key||o))}return t},[d,z,R]);return L(O,{ref:V,width:l?I:void 0,height:l?void 0:I,scrolling:h,attrs:s.useMemo(()=>({...u,style:{overflow:l?"auto hidden":"hidden auto",display:l?"inline-block":"block",contain:"strict",width:"100%",height:"100%",padding:0,margin:0,...u.style}}),F(u)),children:P})});try{T.displayName="VList",T.__docgenInfo={description:"Virtualized list component. See {@link VListProps} and {@link VListHandle}.",displayName:"VList",props:{children:{defaultValue:null,description:"Elements rendered by this component.",name:"children",required:!0,type:{name:"ReactNode"}},overscan:{defaultValue:{value:"4"},description:`Number of items to render above/below the visible bounds of the list. You can increase to avoid showing blank items in fast scrolling.
@defaultValue 4`,name:"overscan",required:!1,type:{name:"number"}},initialItemSize:{defaultValue:null,description:`Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.

- If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.
- If set, you can opt out estimation and use the value as initial item size.`,name:"initialItemSize",required:!1,type:{name:"number"}},initialItemCount:{defaultValue:null,description:"If set, the specified amount of items will be mounted in the initial rendering regardless of the container size. This prop is mostly for SSR.",name:"initialItemCount",required:!1,type:{name:"number"}},horizontal:{defaultValue:null,description:"If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.",name:"horizontal",required:!1,type:{name:"boolean"}},mode:{defaultValue:null,description:"Scroll modes that should be set in certain situations.\n\n- `reverse`: This mode will adjust some styles to be suitable for bottom-to-top scrolling.\n- `rtl`: You have to set this mode if you use this component under `direction: rtl` style.",name:"mode",required:!1,type:{name:"enum",value:[{value:'"reverse"'},{value:'"rtl"'}]}},cache:{defaultValue:null,description:"You can restore cache by passing a {@link CacheSnapshot} on mount. This is useful when you want to restore scroll position after navigation. The snapshot can be obtained from {@link VListHandle.cache}.",name:"cache",required:!1,type:{name:"CacheSnapshot"}},components:{defaultValue:null,description:"Customized components for advanced usage.",name:"components",required:!1,type:{name:"{ Root?: ForwardRefExoticComponent<CustomViewportComponentProps & RefAttributes<any>>; Item?: CustomItemComponentOrElement; }"}},onScroll:{defaultValue:null,description:`Callback invoked whenever scroll offset changes.
@param offset Current scrollTop or scrollLeft.`,name:"onScroll",required:!1,type:{name:"(offset: number) => void"}},onScrollStop:{defaultValue:null,description:"Callback invoked when scrolling stops.",name:"onScrollStop",required:!1,type:{name:"() => void"}},onRangeChange:{defaultValue:null,description:"Callback invoked when visible items range changes.",name:"onRangeChange",required:!1,type:{name:"(startIndex: number, endIndex: number) => void"}}}}}catch{}export{T as V};
//# sourceMappingURL=VList-adf1165d.js.map
