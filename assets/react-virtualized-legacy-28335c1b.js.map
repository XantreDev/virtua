{"version":3,"file":"react-virtualized-legacy-28335c1b.js","sources":["../../node_modules/react-virtualized/dist/es/Grid/utils/calculateSizeAndPositionDataAndUpdateScrollOffset.js","../../node_modules/react-virtualized/dist/es/Grid/utils/CellSizeAndPositionManager.js","../../node_modules/react-virtualized/dist/es/Grid/utils/maxElementSize.js","../../node_modules/react-virtualized/dist/es/Grid/utils/ScalingCellSizeAndPositionManager.js","../../node_modules/react-virtualized/dist/es/utils/createCallbackMemoizer.js","../../node_modules/react-virtualized/dist/es/Grid/utils/updateScrollIndexHelper.js","../../node_modules/dom-helpers/esm/canUseDOM.js","../../node_modules/dom-helpers/esm/scrollbarSize.js","../../node_modules/react-virtualized/dist/es/utils/animationFrame.js","../../node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js","../../node_modules/react-virtualized/dist/es/Grid/Grid.js","../../node_modules/react-virtualized/dist/es/utils/requestAnimationTimeout.js","../../node_modules/react-virtualized/dist/es/List/List.js","../../node_modules/react-virtualized/dist/es/Grid/defaultOverscanIndicesGetter.js","../../node_modules/react-virtualized/dist/es/Grid/defaultCellRangeRenderer.js","../../node_modules/react-virtualized/dist/es/CellMeasurer/CellMeasurer.js","../../node_modules/react-virtualized/dist/es/Grid/accessibilityOverscanIndicesGetter.js","../../node_modules/react-virtualized/dist/es/CellMeasurer/CellMeasurerCache.js","../../stories/comparisons/components/react-virtualized.tsx"],"sourcesContent":["/**\n * Helper method that determines when to recalculate row or column metadata.\n */\nexport default function calculateSizeAndPositionDataAndUpdateScrollOffset(_ref) {\n  var cellCount = _ref.cellCount,\n      cellSize = _ref.cellSize,\n      computeMetadataCallback = _ref.computeMetadataCallback,\n      computeMetadataCallbackProps = _ref.computeMetadataCallbackProps,\n      nextCellsCount = _ref.nextCellsCount,\n      nextCellSize = _ref.nextCellSize,\n      nextScrollToIndex = _ref.nextScrollToIndex,\n      scrollToIndex = _ref.scrollToIndex,\n      updateScrollOffsetForScrollToIndex = _ref.updateScrollOffsetForScrollToIndex;\n\n  // Don't compare cell sizes if they are functions because inline functions would cause infinite loops.\n  // In that event users should use the manual recompute methods to inform of changes.\n  if (cellCount !== nextCellsCount || (typeof cellSize === 'number' || typeof nextCellSize === 'number') && cellSize !== nextCellSize) {\n    computeMetadataCallback(computeMetadataCallbackProps); // Updated cell metadata may have hidden the previous scrolled-to item.\n    // In this case we should also update the scrollTop to ensure it stays visible.\n\n    if (scrollToIndex >= 0 && scrollToIndex === nextScrollToIndex) {\n      updateScrollOffsetForScrollToIndex();\n    }\n  }\n}","import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\n/**\n * Just-in-time calculates and caches size and position information for a collection of cells.\n */\nvar CellSizeAndPositionManager =\n/*#__PURE__*/\nfunction () {\n  // Cache of size and position data for cells, mapped by cell index.\n  // Note that invalid values may exist in this map so only rely on cells up to this._lastMeasuredIndex\n  // Measurements for cells up to this index can be trusted; cells afterward should be estimated.\n  // Used in deferred mode to track which cells have been queued for measurement.\n  function CellSizeAndPositionManager(_ref) {\n    var cellCount = _ref.cellCount,\n        cellSizeGetter = _ref.cellSizeGetter,\n        estimatedCellSize = _ref.estimatedCellSize;\n\n    _classCallCheck(this, CellSizeAndPositionManager);\n\n    _defineProperty(this, \"_cellSizeAndPositionData\", {});\n\n    _defineProperty(this, \"_lastMeasuredIndex\", -1);\n\n    _defineProperty(this, \"_lastBatchedIndex\", -1);\n\n    _defineProperty(this, \"_cellCount\", void 0);\n\n    _defineProperty(this, \"_cellSizeGetter\", void 0);\n\n    _defineProperty(this, \"_estimatedCellSize\", void 0);\n\n    this._cellSizeGetter = cellSizeGetter;\n    this._cellCount = cellCount;\n    this._estimatedCellSize = estimatedCellSize;\n  }\n\n  _createClass(CellSizeAndPositionManager, [{\n    key: \"areOffsetsAdjusted\",\n    value: function areOffsetsAdjusted() {\n      return false;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(_ref2) {\n      var cellCount = _ref2.cellCount,\n          estimatedCellSize = _ref2.estimatedCellSize,\n          cellSizeGetter = _ref2.cellSizeGetter;\n      this._cellCount = cellCount;\n      this._estimatedCellSize = estimatedCellSize;\n      this._cellSizeGetter = cellSizeGetter;\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return this._cellCount;\n    }\n  }, {\n    key: \"getEstimatedCellSize\",\n    value: function getEstimatedCellSize() {\n      return this._estimatedCellSize;\n    }\n  }, {\n    key: \"getLastMeasuredIndex\",\n    value: function getLastMeasuredIndex() {\n      return this._lastMeasuredIndex;\n    }\n  }, {\n    key: \"getOffsetAdjustment\",\n    value: function getOffsetAdjustment() {\n      return 0;\n    }\n    /**\n     * This method returns the size and position for the cell at the specified index.\n     * It just-in-time calculates (or used cached values) for cells leading up to the index.\n     */\n\n  }, {\n    key: \"getSizeAndPositionOfCell\",\n    value: function getSizeAndPositionOfCell(index) {\n      if (index < 0 || index >= this._cellCount) {\n        throw Error(\"Requested index \".concat(index, \" is outside of range 0..\").concat(this._cellCount));\n      }\n\n      if (index > this._lastMeasuredIndex) {\n        var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n        var offset = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n\n        for (var i = this._lastMeasuredIndex + 1; i <= index; i++) {\n          var size = this._cellSizeGetter({\n            index: i\n          }); // undefined or NaN probably means a logic error in the size getter.\n          // null means we're using CellMeasurer and haven't yet measured a given index.\n\n\n          if (size === undefined || isNaN(size)) {\n            throw Error(\"Invalid size returned for cell \".concat(i, \" of value \").concat(size));\n          } else if (size === null) {\n            this._cellSizeAndPositionData[i] = {\n              offset: offset,\n              size: 0\n            };\n            this._lastBatchedIndex = index;\n          } else {\n            this._cellSizeAndPositionData[i] = {\n              offset: offset,\n              size: size\n            };\n            offset += size;\n            this._lastMeasuredIndex = index;\n          }\n        }\n      }\n\n      return this._cellSizeAndPositionData[index];\n    }\n  }, {\n    key: \"getSizeAndPositionOfLastMeasuredCell\",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._lastMeasuredIndex >= 0 ? this._cellSizeAndPositionData[this._lastMeasuredIndex] : {\n        offset: 0,\n        size: 0\n      };\n    }\n    /**\n     * Total size of all cells being measured.\n     * This value will be completely estimated initially.\n     * As cells are measured, the estimate will be updated.\n     */\n\n  }, {\n    key: \"getTotalSize\",\n    value: function getTotalSize() {\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var totalSizeOfMeasuredCells = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n      var numUnmeasuredCells = this._cellCount - this._lastMeasuredIndex - 1;\n      var totalSizeOfUnmeasuredCells = numUnmeasuredCells * this._estimatedCellSize;\n      return totalSizeOfMeasuredCells + totalSizeOfUnmeasuredCells;\n    }\n    /**\n     * Determines a new offset that ensures a certain cell is visible, given the current offset.\n     * If the cell is already visible then the current offset will be returned.\n     * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.\n     *\n     * @param align Desired alignment within container; one of \"auto\" (default), \"start\", or \"end\"\n     * @param containerSize Size (width or height) of the container viewport\n     * @param currentOffset Container's current (x or y) offset\n     * @param totalSize Total size (width or height) of all cells\n     * @return Offset to use to ensure the specified cell is visible\n     */\n\n  }, {\n    key: \"getUpdatedOffsetForIndex\",\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === void 0 ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n\n      if (containerSize <= 0) {\n        return 0;\n      }\n\n      var datum = this.getSizeAndPositionOfCell(targetIndex);\n      var maxOffset = datum.offset;\n      var minOffset = maxOffset - containerSize + datum.size;\n      var idealOffset;\n\n      switch (align) {\n        case 'start':\n          idealOffset = maxOffset;\n          break;\n\n        case 'end':\n          idealOffset = minOffset;\n          break;\n\n        case 'center':\n          idealOffset = maxOffset - (containerSize - datum.size) / 2;\n          break;\n\n        default:\n          idealOffset = Math.max(minOffset, Math.min(maxOffset, currentOffset));\n          break;\n      }\n\n      var totalSize = this.getTotalSize();\n      return Math.max(0, Math.min(totalSize - containerSize, idealOffset));\n    }\n  }, {\n    key: \"getVisibleCellRange\",\n    value: function getVisibleCellRange(params) {\n      var containerSize = params.containerSize,\n          offset = params.offset;\n      var totalSize = this.getTotalSize();\n\n      if (totalSize === 0) {\n        return {};\n      }\n\n      var maxOffset = offset + containerSize;\n\n      var start = this._findNearestCell(offset);\n\n      var datum = this.getSizeAndPositionOfCell(start);\n      offset = datum.offset + datum.size;\n      var stop = start;\n\n      while (offset < maxOffset && stop < this._cellCount - 1) {\n        stop++;\n        offset += this.getSizeAndPositionOfCell(stop).size;\n      }\n\n      return {\n        start: start,\n        stop: stop\n      };\n    }\n    /**\n     * Clear all cached values for cells after the specified index.\n     * This method should be called for any cell that has changed its size.\n     * It will not immediately perform any calculations; they'll be performed the next time getSizeAndPositionOfCell() is called.\n     */\n\n  }, {\n    key: \"resetCell\",\n    value: function resetCell(index) {\n      this._lastMeasuredIndex = Math.min(this._lastMeasuredIndex, index - 1);\n    }\n  }, {\n    key: \"_binarySearch\",\n    value: function _binarySearch(high, low, offset) {\n      while (low <= high) {\n        var middle = low + Math.floor((high - low) / 2);\n        var currentOffset = this.getSizeAndPositionOfCell(middle).offset;\n\n        if (currentOffset === offset) {\n          return middle;\n        } else if (currentOffset < offset) {\n          low = middle + 1;\n        } else if (currentOffset > offset) {\n          high = middle - 1;\n        }\n      }\n\n      if (low > 0) {\n        return low - 1;\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: \"_exponentialSearch\",\n    value: function _exponentialSearch(index, offset) {\n      var interval = 1;\n\n      while (index < this._cellCount && this.getSizeAndPositionOfCell(index).offset < offset) {\n        index += interval;\n        interval *= 2;\n      }\n\n      return this._binarySearch(Math.min(index, this._cellCount - 1), Math.floor(index / 2), offset);\n    }\n    /**\n     * Searches for the cell (index) nearest the specified offset.\n     *\n     * If no exact match is found the next lowest cell index will be returned.\n     * This allows partially visible cells (with offsets just before/above the fold) to be visible.\n     */\n\n  }, {\n    key: \"_findNearestCell\",\n    value: function _findNearestCell(offset) {\n      if (isNaN(offset)) {\n        throw Error(\"Invalid offset \".concat(offset, \" specified\"));\n      } // Our search algorithms find the nearest match at or below the specified offset.\n      // So make sure the offset is at least 0 or no match will be found.\n\n\n      offset = Math.max(0, offset);\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var lastMeasuredIndex = Math.max(0, this._lastMeasuredIndex);\n\n      if (lastMeasuredCellSizeAndPosition.offset >= offset) {\n        // If we've already measured cells within this range just use a binary search as it's faster.\n        return this._binarySearch(lastMeasuredIndex, 0, offset);\n      } else {\n        // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n        // The exponential search avoids pre-computing sizes for the full set of cells as a binary search would.\n        // The overall complexity for this approach is O(log n).\n        return this._exponentialSearch(lastMeasuredIndex, offset);\n      }\n    }\n  }]);\n\n  return CellSizeAndPositionManager;\n}();\n\nexport { CellSizeAndPositionManager as default };\nimport { bpfrpt_proptype_Alignment } from \"../types\";\nimport { bpfrpt_proptype_CellSizeGetter } from \"../types\";\nimport { bpfrpt_proptype_VisibleCellRange } from \"../types\";","var DEFAULT_MAX_ELEMENT_SIZE = 1500000;\nvar CHROME_MAX_ELEMENT_SIZE = 1.67771e7;\n\nvar isBrowser = function isBrowser() {\n  return typeof window !== 'undefined';\n};\n\nvar isChrome = function isChrome() {\n  return !!window.chrome;\n};\n\nexport var getMaxElementSize = function getMaxElementSize() {\n  if (isBrowser()) {\n    if (isChrome()) {\n      return CHROME_MAX_ELEMENT_SIZE;\n    }\n  }\n\n  return DEFAULT_MAX_ELEMENT_SIZE;\n};","import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport CellSizeAndPositionManager from './CellSizeAndPositionManager';\nimport { getMaxElementSize } from './maxElementSize.js';\n\n/**\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.\n */\nvar ScalingCellSizeAndPositionManager =\n/*#__PURE__*/\nfunction () {\n  function ScalingCellSizeAndPositionManager(_ref) {\n    var _ref$maxScrollSize = _ref.maxScrollSize,\n        maxScrollSize = _ref$maxScrollSize === void 0 ? getMaxElementSize() : _ref$maxScrollSize,\n        params = _objectWithoutProperties(_ref, [\"maxScrollSize\"]);\n\n    _classCallCheck(this, ScalingCellSizeAndPositionManager);\n\n    _defineProperty(this, \"_cellSizeAndPositionManager\", void 0);\n\n    _defineProperty(this, \"_maxScrollSize\", void 0);\n\n    // Favor composition over inheritance to simplify IE10 support\n    this._cellSizeAndPositionManager = new CellSizeAndPositionManager(params);\n    this._maxScrollSize = maxScrollSize;\n  }\n\n  _createClass(ScalingCellSizeAndPositionManager, [{\n    key: \"areOffsetsAdjusted\",\n    value: function areOffsetsAdjusted() {\n      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(params) {\n      this._cellSizeAndPositionManager.configure(params);\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return this._cellSizeAndPositionManager.getCellCount();\n    }\n  }, {\n    key: \"getEstimatedCellSize\",\n    value: function getEstimatedCellSize() {\n      return this._cellSizeAndPositionManager.getEstimatedCellSize();\n    }\n  }, {\n    key: \"getLastMeasuredIndex\",\n    value: function getLastMeasuredIndex() {\n      return this._cellSizeAndPositionManager.getLastMeasuredIndex();\n    }\n    /**\n     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\n     * The offset passed to this function is scaled (safe) as well.\n     */\n\n  }, {\n    key: \"getOffsetAdjustment\",\n    value: function getOffsetAdjustment(_ref2) {\n      var containerSize = _ref2.containerSize,\n          offset = _ref2.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      var offsetPercentage = this._getOffsetPercentage({\n        containerSize: containerSize,\n        offset: offset,\n        totalSize: safeTotalSize\n      });\n\n      return Math.round(offsetPercentage * (safeTotalSize - totalSize));\n    }\n  }, {\n    key: \"getSizeAndPositionOfCell\",\n    value: function getSizeAndPositionOfCell(index) {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\n    }\n  }, {\n    key: \"getSizeAndPositionOfLastMeasuredCell\",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\n    }\n    /** See CellSizeAndPositionManager#getTotalSize */\n\n  }, {\n    key: \"getTotalSize\",\n    value: function getTotalSize() {\n      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\n    }\n    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\n\n  }, {\n    key: \"getUpdatedOffsetForIndex\",\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === void 0 ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n      currentOffset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: currentOffset\n      });\n\n      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: align,\n        containerSize: containerSize,\n        currentOffset: currentOffset,\n        targetIndex: targetIndex\n      });\n\n      return this._offsetToSafeOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n    /** See CellSizeAndPositionManager#getVisibleCellRange */\n\n  }, {\n    key: \"getVisibleCellRange\",\n    value: function getVisibleCellRange(_ref4) {\n      var containerSize = _ref4.containerSize,\n          offset = _ref4.offset;\n      offset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n      return this._cellSizeAndPositionManager.getVisibleCellRange({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n  }, {\n    key: \"resetCell\",\n    value: function resetCell(index) {\n      this._cellSizeAndPositionManager.resetCell(index);\n    }\n  }, {\n    key: \"_getOffsetPercentage\",\n    value: function _getOffsetPercentage(_ref5) {\n      var containerSize = _ref5.containerSize,\n          offset = _ref5.offset,\n          totalSize = _ref5.totalSize;\n      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\n    }\n  }, {\n    key: \"_offsetToSafeOffset\",\n    value: function _offsetToSafeOffset(_ref6) {\n      var containerSize = _ref6.containerSize,\n          offset = _ref6.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: totalSize\n        });\n\n        return Math.round(offsetPercentage * (safeTotalSize - containerSize));\n      }\n    }\n  }, {\n    key: \"_safeOffsetToOffset\",\n    value: function _safeOffsetToOffset(_ref7) {\n      var containerSize = _ref7.containerSize,\n          offset = _ref7.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: safeTotalSize\n        });\n\n        return Math.round(offsetPercentage * (totalSize - containerSize));\n      }\n    }\n  }]);\n\n  return ScalingCellSizeAndPositionManager;\n}();\n\nexport { ScalingCellSizeAndPositionManager as default };\nimport { bpfrpt_proptype_Alignment } from \"../types\";\nimport { bpfrpt_proptype_CellSizeGetter } from \"../types\";\nimport { bpfrpt_proptype_VisibleCellRange } from \"../types\";","/**\n * Helper utility that updates the specified callback whenever any of the specified indices have changed.\n */\nexport default function createCallbackMemoizer() {\n  var requireAllKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var cachedIndices = {};\n  return function (_ref) {\n    var callback = _ref.callback,\n        indices = _ref.indices;\n    var keys = Object.keys(indices);\n    var allInitialized = !requireAllKeys || keys.every(function (key) {\n      var value = indices[key];\n      return Array.isArray(value) ? value.length > 0 : value >= 0;\n    });\n    var indexChanged = keys.length !== Object.keys(cachedIndices).length || keys.some(function (key) {\n      var cachedValue = cachedIndices[key];\n      var value = indices[key];\n      return Array.isArray(value) ? cachedValue.join(',') !== value.join(',') : cachedValue !== value;\n    });\n    cachedIndices = indices;\n\n    if (allInitialized && indexChanged) {\n      callback(indices);\n    }\n  };\n}","import ScalingCellSizeAndPositionManager from './ScalingCellSizeAndPositionManager.js';\n/**\n * Helper function that determines when to update scroll offsets to ensure that a scroll-to-index remains visible.\n * This function also ensures that the scroll ofset isn't past the last column/row of cells.\n */\n\nexport default function updateScrollIndexHelper(_ref) {\n  var cellSize = _ref.cellSize,\n      cellSizeAndPositionManager = _ref.cellSizeAndPositionManager,\n      previousCellsCount = _ref.previousCellsCount,\n      previousCellSize = _ref.previousCellSize,\n      previousScrollToAlignment = _ref.previousScrollToAlignment,\n      previousScrollToIndex = _ref.previousScrollToIndex,\n      previousSize = _ref.previousSize,\n      scrollOffset = _ref.scrollOffset,\n      scrollToAlignment = _ref.scrollToAlignment,\n      scrollToIndex = _ref.scrollToIndex,\n      size = _ref.size,\n      sizeJustIncreasedFromZero = _ref.sizeJustIncreasedFromZero,\n      updateScrollIndexCallback = _ref.updateScrollIndexCallback;\n  var cellCount = cellSizeAndPositionManager.getCellCount();\n  var hasScrollToIndex = scrollToIndex >= 0 && scrollToIndex < cellCount;\n  var sizeHasChanged = size !== previousSize || sizeJustIncreasedFromZero || !previousCellSize || typeof cellSize === 'number' && cellSize !== previousCellSize; // If we have a new scroll target OR if height/row-height has changed,\n  // We should ensure that the scroll target is visible.\n\n  if (hasScrollToIndex && (sizeHasChanged || scrollToAlignment !== previousScrollToAlignment || scrollToIndex !== previousScrollToIndex)) {\n    updateScrollIndexCallback(scrollToIndex); // If we don't have a selected item but list size or number of children have decreased,\n    // Make sure we aren't scrolled too far past the current content.\n  } else if (!hasScrollToIndex && cellCount > 0 && (size < previousSize || cellCount < previousCellsCount)) {\n    // We need to ensure that the current scroll offset is still within the collection's range.\n    // To do this, we don't need to measure everything; CellMeasurer would perform poorly.\n    // Just check to make sure we're still okay.\n    // Only adjust the scroll position if we've scrolled below the last set of rows.\n    if (scrollOffset > cellSizeAndPositionManager.getTotalSize() - size) {\n      updateScrollIndexCallback(cellCount - 1);\n    }\n  }\n}\nimport { bpfrpt_proptype_Alignment } from \"../types\";\nimport { bpfrpt_proptype_CellSize } from \"../types\";","export default !!(typeof window !== 'undefined' && window.document && window.document.createElement);","import canUseDOM from './canUseDOM';\nvar size;\nexport default function scrollbarSize(recalc) {\n  if (!size && size !== 0 || recalc) {\n    if (canUseDOM) {\n      var scrollDiv = document.createElement('div');\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.top = '-9999px';\n      scrollDiv.style.width = '50px';\n      scrollDiv.style.height = '50px';\n      scrollDiv.style.overflow = 'scroll';\n      document.body.appendChild(scrollDiv);\n      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      document.body.removeChild(scrollDiv);\n    }\n  }\n\n  return size;\n}","// Properly handle server-side rendering.\nvar win;\n\nif (typeof window !== 'undefined') {\n  win = window;\n} else if (typeof self !== 'undefined') {\n  win = self;\n} else {\n  win = {};\n} // requestAnimationFrame() shim by Paul Irish\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n\n\nvar request = win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.oRequestAnimationFrame || win.msRequestAnimationFrame || function (callback) {\n  return win.setTimeout(callback, 1000 / 60);\n};\n\nvar cancel = win.cancelAnimationFrame || win.webkitCancelAnimationFrame || win.mozCancelAnimationFrame || win.oCancelAnimationFrame || win.msCancelAnimationFrame || function (id) {\n  win.clearTimeout(id);\n};\n\nexport var raf = request;\nexport var caf = cancel;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction componentWillMount() {\n  // Call this.constructor.gDSFP to support sub-classes.\n  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);\n  if (state !== null && state !== undefined) {\n    this.setState(state);\n  }\n}\n\nfunction componentWillReceiveProps(nextProps) {\n  // Call this.constructor.gDSFP to support sub-classes.\n  // Use the setState() updater to ensure state isn't stale in certain edge cases.\n  function updater(prevState) {\n    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);\n    return state !== null && state !== undefined ? state : null;\n  }\n  // Binding \"this\" is important for shallow renderer support.\n  this.setState(updater.bind(this));\n}\n\nfunction componentWillUpdate(nextProps, nextState) {\n  try {\n    var prevProps = this.props;\n    var prevState = this.state;\n    this.props = nextProps;\n    this.state = nextState;\n    this.__reactInternalSnapshotFlag = true;\n    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(\n      prevProps,\n      prevState\n    );\n  } finally {\n    this.props = prevProps;\n    this.state = prevState;\n  }\n}\n\n// React may warn about cWM/cWRP/cWU methods being deprecated.\n// Add a flag to suppress these warnings for this special case.\ncomponentWillMount.__suppressDeprecationWarning = true;\ncomponentWillReceiveProps.__suppressDeprecationWarning = true;\ncomponentWillUpdate.__suppressDeprecationWarning = true;\n\nfunction polyfill(Component) {\n  var prototype = Component.prototype;\n\n  if (!prototype || !prototype.isReactComponent) {\n    throw new Error('Can only polyfill class components');\n  }\n\n  if (\n    typeof Component.getDerivedStateFromProps !== 'function' &&\n    typeof prototype.getSnapshotBeforeUpdate !== 'function'\n  ) {\n    return Component;\n  }\n\n  // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n  // Error if any of these lifecycles are present,\n  // Because they would work differently between older and newer (16.3+) versions of React.\n  var foundWillMountName = null;\n  var foundWillReceivePropsName = null;\n  var foundWillUpdateName = null;\n  if (typeof prototype.componentWillMount === 'function') {\n    foundWillMountName = 'componentWillMount';\n  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {\n    foundWillMountName = 'UNSAFE_componentWillMount';\n  }\n  if (typeof prototype.componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'componentWillReceiveProps';\n  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n  }\n  if (typeof prototype.componentWillUpdate === 'function') {\n    foundWillUpdateName = 'componentWillUpdate';\n  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {\n    foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n  }\n  if (\n    foundWillMountName !== null ||\n    foundWillReceivePropsName !== null ||\n    foundWillUpdateName !== null\n  ) {\n    var componentName = Component.displayName || Component.name;\n    var newApiName =\n      typeof Component.getDerivedStateFromProps === 'function'\n        ? 'getDerivedStateFromProps()'\n        : 'getSnapshotBeforeUpdate()';\n\n    throw Error(\n      'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n        componentName +\n        ' uses ' +\n        newApiName +\n        ' but also contains the following legacy lifecycles:' +\n        (foundWillMountName !== null ? '\\n  ' + foundWillMountName : '') +\n        (foundWillReceivePropsName !== null\n          ? '\\n  ' + foundWillReceivePropsName\n          : '') +\n        (foundWillUpdateName !== null ? '\\n  ' + foundWillUpdateName : '') +\n        '\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\n' +\n        'https://fb.me/react-async-component-lifecycle-hooks'\n    );\n  }\n\n  // React <= 16.2 does not support static getDerivedStateFromProps.\n  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.\n  // Newer versions of React will ignore these lifecycles if gDSFP exists.\n  if (typeof Component.getDerivedStateFromProps === 'function') {\n    prototype.componentWillMount = componentWillMount;\n    prototype.componentWillReceiveProps = componentWillReceiveProps;\n  }\n\n  // React <= 16.2 does not support getSnapshotBeforeUpdate.\n  // As a workaround, use cWU to invoke the new lifecycle.\n  // Newer versions of React will ignore that lifecycle if gSBU exists.\n  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {\n    if (typeof prototype.componentDidUpdate !== 'function') {\n      throw new Error(\n        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'\n      );\n    }\n\n    prototype.componentWillUpdate = componentWillUpdate;\n\n    var componentDidUpdate = prototype.componentDidUpdate;\n\n    prototype.componentDidUpdate = function componentDidUpdatePolyfill(\n      prevProps,\n      prevState,\n      maybeSnapshot\n    ) {\n      // 16.3+ will not execute our will-update method;\n      // It will pass a snapshot value to did-update though.\n      // Older versions will require our polyfilled will-update value.\n      // We need to handle both cases, but can't just check for the presence of \"maybeSnapshot\",\n      // Because for <= 15.x versions this might be a \"prevContext\" object.\n      // We also can't just check \"__reactInternalSnapshot\",\n      // Because get-snapshot might return a falsy value.\n      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.\n      var snapshot = this.__reactInternalSnapshotFlag\n        ? this.__reactInternalSnapshot\n        : maybeSnapshot;\n\n      componentDidUpdate.call(this, prevProps, prevState, snapshot);\n    };\n  }\n\n  return Component;\n}\n\nexport { polyfill };\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _class, _temp;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport calculateSizeAndPositionDataAndUpdateScrollOffset from './utils/calculateSizeAndPositionDataAndUpdateScrollOffset';\nimport ScalingCellSizeAndPositionManager from './utils/ScalingCellSizeAndPositionManager';\nimport createCallbackMemoizer from '../utils/createCallbackMemoizer';\nimport defaultOverscanIndicesGetter, { SCROLL_DIRECTION_BACKWARD, SCROLL_DIRECTION_FORWARD } from './defaultOverscanIndicesGetter';\nimport updateScrollIndexHelper from './utils/updateScrollIndexHelper';\nimport defaultCellRangeRenderer from './defaultCellRangeRenderer';\nimport scrollbarSize from 'dom-helpers/scrollbarSize';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { requestAnimationTimeout, cancelAnimationTimeout } from '../utils/requestAnimationTimeout';\n/**\n * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.\n * This improves performance and makes scrolling smoother.\n */\n\nexport var DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;\n/**\n * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.\n * This prevents Grid from interrupting mouse-wheel animations (see issue #2).\n */\n\nvar SCROLL_POSITION_CHANGE_REASONS = {\n  OBSERVED: 'observed',\n  REQUESTED: 'requested'\n};\n\nvar renderNull = function renderNull() {\n  return null;\n};\n\n/**\n * Renders tabular data with virtualization along the vertical and horizontal axes.\n * Row heights and column widths must be known ahead of time and specified as properties.\n */\nvar Grid = (_temp = _class =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Grid, _React$PureComponent);\n\n  // Invokes onSectionRendered callback only when start/stop row or column indices change\n  function Grid(props) {\n    var _this;\n\n    _classCallCheck(this, Grid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Grid).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"_onGridRenderedMemoizer\", createCallbackMemoizer());\n\n    _defineProperty(_assertThisInitialized(_this), \"_onScrollMemoizer\", createCallbackMemoizer(false));\n\n    _defineProperty(_assertThisInitialized(_this), \"_deferredInvalidateColumnIndex\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_deferredInvalidateRowIndex\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_recomputeScrollLeftFlag\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_recomputeScrollTopFlag\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_horizontalScrollBarSize\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_verticalScrollBarSize\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_scrollbarPresenceChanged\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_scrollingContainer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_childrenToDisplay\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_columnStartIndex\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_columnStopIndex\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_rowStartIndex\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_rowStopIndex\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderedColumnStartIndex\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderedColumnStopIndex\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderedRowStartIndex\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderedRowStopIndex\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_initialScrollTop\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_initialScrollLeft\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_disablePointerEventsTimeoutId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_styleCache\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"_cellCache\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"_debounceScrollEndedCallback\", function () {\n      _this._disablePointerEventsTimeoutId = null; // isScrolling is used to determine if we reset styleCache\n\n      _this.setState({\n        isScrolling: false,\n        needToResetStyleCache: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_invokeOnGridRenderedHelper\", function () {\n      var onSectionRendered = _this.props.onSectionRendered;\n\n      _this._onGridRenderedMemoizer({\n        callback: onSectionRendered,\n        indices: {\n          columnOverscanStartIndex: _this._columnStartIndex,\n          columnOverscanStopIndex: _this._columnStopIndex,\n          columnStartIndex: _this._renderedColumnStartIndex,\n          columnStopIndex: _this._renderedColumnStopIndex,\n          rowOverscanStartIndex: _this._rowStartIndex,\n          rowOverscanStopIndex: _this._rowStopIndex,\n          rowStartIndex: _this._renderedRowStartIndex,\n          rowStopIndex: _this._renderedRowStopIndex\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_setScrollingContainerRef\", function (ref) {\n      _this._scrollingContainer = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onScroll\", function (event) {\n      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.\n      // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.\n      // See issue #404 for more information.\n      if (event.target === _this._scrollingContainer) {\n        _this.handleScrollEvent(event.target);\n      }\n    });\n\n    var columnSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.columnCount,\n      cellSizeGetter: function cellSizeGetter(params) {\n        return Grid._wrapSizeGetter(props.columnWidth)(params);\n      },\n      estimatedCellSize: Grid._getEstimatedColumnSize(props)\n    });\n    var rowSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.rowCount,\n      cellSizeGetter: function cellSizeGetter(params) {\n        return Grid._wrapSizeGetter(props.rowHeight)(params);\n      },\n      estimatedCellSize: Grid._getEstimatedRowSize(props)\n    });\n    _this.state = {\n      instanceProps: {\n        columnSizeAndPositionManager: columnSizeAndPositionManager,\n        rowSizeAndPositionManager: rowSizeAndPositionManager,\n        prevColumnWidth: props.columnWidth,\n        prevRowHeight: props.rowHeight,\n        prevColumnCount: props.columnCount,\n        prevRowCount: props.rowCount,\n        prevIsScrolling: props.isScrolling === true,\n        prevScrollToColumn: props.scrollToColumn,\n        prevScrollToRow: props.scrollToRow,\n        scrollbarSize: 0,\n        scrollbarSizeMeasured: false\n      },\n      isScrolling: false,\n      scrollDirectionHorizontal: SCROLL_DIRECTION_FORWARD,\n      scrollDirectionVertical: SCROLL_DIRECTION_FORWARD,\n      scrollLeft: 0,\n      scrollTop: 0,\n      scrollPositionChangeReason: null,\n      needToResetStyleCache: false\n    };\n\n    if (props.scrollToRow > 0) {\n      _this._initialScrollTop = _this._getCalculatedScrollTop(props, _this.state);\n    }\n\n    if (props.scrollToColumn > 0) {\n      _this._initialScrollLeft = _this._getCalculatedScrollLeft(props, _this.state);\n    }\n\n    return _this;\n  }\n  /**\n   * Gets offsets for a given cell and alignment.\n   */\n\n\n  _createClass(Grid, [{\n    key: \"getOffsetForCell\",\n    value: function getOffsetForCell() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$alignment = _ref.alignment,\n          alignment = _ref$alignment === void 0 ? this.props.scrollToAlignment : _ref$alignment,\n          _ref$columnIndex = _ref.columnIndex,\n          columnIndex = _ref$columnIndex === void 0 ? this.props.scrollToColumn : _ref$columnIndex,\n          _ref$rowIndex = _ref.rowIndex,\n          rowIndex = _ref$rowIndex === void 0 ? this.props.scrollToRow : _ref$rowIndex;\n\n      var offsetProps = _objectSpread({}, this.props, {\n        scrollToAlignment: alignment,\n        scrollToColumn: columnIndex,\n        scrollToRow: rowIndex\n      });\n\n      return {\n        scrollLeft: this._getCalculatedScrollLeft(offsetProps),\n        scrollTop: this._getCalculatedScrollTop(offsetProps)\n      };\n    }\n    /**\n     * Gets estimated total rows' height.\n     */\n\n  }, {\n    key: \"getTotalRowsHeight\",\n    value: function getTotalRowsHeight() {\n      return this.state.instanceProps.rowSizeAndPositionManager.getTotalSize();\n    }\n    /**\n     * Gets estimated total columns' width.\n     */\n\n  }, {\n    key: \"getTotalColumnsWidth\",\n    value: function getTotalColumnsWidth() {\n      return this.state.instanceProps.columnSizeAndPositionManager.getTotalSize();\n    }\n    /**\n     * This method handles a scroll event originating from an external scroll control.\n     * It's an advanced method and should probably not be used unless you're implementing a custom scroll-bar solution.\n     */\n\n  }, {\n    key: \"handleScrollEvent\",\n    value: function handleScrollEvent(_ref2) {\n      var _ref2$scrollLeft = _ref2.scrollLeft,\n          scrollLeftParam = _ref2$scrollLeft === void 0 ? 0 : _ref2$scrollLeft,\n          _ref2$scrollTop = _ref2.scrollTop,\n          scrollTopParam = _ref2$scrollTop === void 0 ? 0 : _ref2$scrollTop;\n\n      // On iOS, we can arrive at negative offsets by swiping past the start.\n      // To prevent flicker here, we make playing in the negative offset zone cause nothing to happen.\n      if (scrollTopParam < 0) {\n        return;\n      } // Prevent pointer events from interrupting a smooth scroll\n\n\n      this._debounceScrollEnded();\n\n      var _this$props = this.props,\n          autoHeight = _this$props.autoHeight,\n          autoWidth = _this$props.autoWidth,\n          height = _this$props.height,\n          width = _this$props.width;\n      var instanceProps = this.state.instanceProps; // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,\n      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.\n      // This causes a series of rapid renders that is slow for long lists.\n      // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.\n\n      var scrollbarSize = instanceProps.scrollbarSize;\n      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      var scrollLeft = Math.min(Math.max(0, totalColumnsWidth - width + scrollbarSize), scrollLeftParam);\n      var scrollTop = Math.min(Math.max(0, totalRowsHeight - height + scrollbarSize), scrollTopParam); // Certain devices (like Apple touchpad) rapid-fire duplicate events.\n      // Don't force a re-render if this is the case.\n      // The mouse may move faster then the animation frame does.\n      // Use requestAnimationFrame to avoid over-updating.\n\n      if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {\n        // Track scrolling direction so we can more efficiently overscan rows to reduce empty space around the edges while scrolling.\n        // Don't change direction for an axis unless scroll offset has changed.\n        var scrollDirectionHorizontal = scrollLeft !== this.state.scrollLeft ? scrollLeft > this.state.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionHorizontal;\n        var scrollDirectionVertical = scrollTop !== this.state.scrollTop ? scrollTop > this.state.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionVertical;\n        var newState = {\n          isScrolling: true,\n          scrollDirectionHorizontal: scrollDirectionHorizontal,\n          scrollDirectionVertical: scrollDirectionVertical,\n          scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.OBSERVED\n        };\n\n        if (!autoHeight) {\n          newState.scrollTop = scrollTop;\n        }\n\n        if (!autoWidth) {\n          newState.scrollLeft = scrollLeft;\n        }\n\n        newState.needToResetStyleCache = false;\n        this.setState(newState);\n      }\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop,\n        totalColumnsWidth: totalColumnsWidth,\n        totalRowsHeight: totalRowsHeight\n      });\n    }\n    /**\n     * Invalidate Grid size and recompute visible cells.\n     * This is a deferred wrapper for recomputeGridSize().\n     * It sets a flag to be evaluated on cDM/cDU to avoid unnecessary renders.\n     * This method is intended for advanced use-cases like CellMeasurer.\n     */\n    // @TODO (bvaughn) Add automated test coverage for this.\n\n  }, {\n    key: \"invalidateCellSizeAfterRender\",\n    value: function invalidateCellSizeAfterRender(_ref3) {\n      var columnIndex = _ref3.columnIndex,\n          rowIndex = _ref3.rowIndex;\n      this._deferredInvalidateColumnIndex = typeof this._deferredInvalidateColumnIndex === 'number' ? Math.min(this._deferredInvalidateColumnIndex, columnIndex) : columnIndex;\n      this._deferredInvalidateRowIndex = typeof this._deferredInvalidateRowIndex === 'number' ? Math.min(this._deferredInvalidateRowIndex, rowIndex) : rowIndex;\n    }\n    /**\n     * Pre-measure all columns and rows in a Grid.\n     * Typically cells are only measured as needed and estimated sizes are used for cells that have not yet been measured.\n     * This method ensures that the next call to getTotalSize() returns an exact size (as opposed to just an estimated one).\n     */\n\n  }, {\n    key: \"measureAllCells\",\n    value: function measureAllCells() {\n      var _this$props2 = this.props,\n          columnCount = _this$props2.columnCount,\n          rowCount = _this$props2.rowCount;\n      var instanceProps = this.state.instanceProps;\n      instanceProps.columnSizeAndPositionManager.getSizeAndPositionOfCell(columnCount - 1);\n      instanceProps.rowSizeAndPositionManager.getSizeAndPositionOfCell(rowCount - 1);\n    }\n    /**\n     * Forced recompute of row heights and column widths.\n     * This function should be called if dynamic column or row sizes have changed but nothing else has.\n     * Since Grid only receives :columnCount and :rowCount it has no way of detecting when the underlying data changes.\n     */\n\n  }, {\n    key: \"recomputeGridSize\",\n    value: function recomputeGridSize() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$columnIndex = _ref4.columnIndex,\n          columnIndex = _ref4$columnIndex === void 0 ? 0 : _ref4$columnIndex,\n          _ref4$rowIndex = _ref4.rowIndex,\n          rowIndex = _ref4$rowIndex === void 0 ? 0 : _ref4$rowIndex;\n\n      var _this$props3 = this.props,\n          scrollToColumn = _this$props3.scrollToColumn,\n          scrollToRow = _this$props3.scrollToRow;\n      var instanceProps = this.state.instanceProps;\n      instanceProps.columnSizeAndPositionManager.resetCell(columnIndex);\n      instanceProps.rowSizeAndPositionManager.resetCell(rowIndex); // Cell sizes may be determined by a function property.\n      // In this case the cDU handler can't know if they changed.\n      // Store this flag to let the next cDU pass know it needs to recompute the scroll offset.\n\n      this._recomputeScrollLeftFlag = scrollToColumn >= 0 && (this.state.scrollDirectionHorizontal === SCROLL_DIRECTION_FORWARD ? columnIndex <= scrollToColumn : columnIndex >= scrollToColumn);\n      this._recomputeScrollTopFlag = scrollToRow >= 0 && (this.state.scrollDirectionVertical === SCROLL_DIRECTION_FORWARD ? rowIndex <= scrollToRow : rowIndex >= scrollToRow); // Clear cell cache in case we are scrolling;\n      // Invalid row heights likely mean invalid cached content as well.\n\n      this._styleCache = {};\n      this._cellCache = {};\n      this.forceUpdate();\n    }\n    /**\n     * Ensure column and row are visible.\n     */\n\n  }, {\n    key: \"scrollToCell\",\n    value: function scrollToCell(_ref5) {\n      var columnIndex = _ref5.columnIndex,\n          rowIndex = _ref5.rowIndex;\n      var columnCount = this.props.columnCount;\n      var props = this.props; // Don't adjust scroll offset for single-column grids (eg List, Table).\n      // This can cause a funky scroll offset because of the vertical scrollbar width.\n\n      if (columnCount > 1 && columnIndex !== undefined) {\n        this._updateScrollLeftForScrollToColumn(_objectSpread({}, props, {\n          scrollToColumn: columnIndex\n        }));\n      }\n\n      if (rowIndex !== undefined) {\n        this._updateScrollTopForScrollToRow(_objectSpread({}, props, {\n          scrollToRow: rowIndex\n        }));\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props4 = this.props,\n          getScrollbarSize = _this$props4.getScrollbarSize,\n          height = _this$props4.height,\n          scrollLeft = _this$props4.scrollLeft,\n          scrollToColumn = _this$props4.scrollToColumn,\n          scrollTop = _this$props4.scrollTop,\n          scrollToRow = _this$props4.scrollToRow,\n          width = _this$props4.width;\n      var instanceProps = this.state.instanceProps; // Reset initial offsets to be ignored in browser\n\n      this._initialScrollTop = 0;\n      this._initialScrollLeft = 0; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n      // We must do this at the start of the method as we may calculate and update scroll position below.\n\n      this._handleInvalidatedGridSize(); // If this component was first rendered server-side, scrollbar size will be undefined.\n      // In that event we need to remeasure.\n\n\n      if (!instanceProps.scrollbarSizeMeasured) {\n        this.setState(function (prevState) {\n          var stateUpdate = _objectSpread({}, prevState, {\n            needToResetStyleCache: false\n          });\n\n          stateUpdate.instanceProps.scrollbarSize = getScrollbarSize();\n          stateUpdate.instanceProps.scrollbarSizeMeasured = true;\n          return stateUpdate;\n        });\n      }\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0 || typeof scrollTop === 'number' && scrollTop >= 0) {\n        var stateUpdate = Grid._getScrollToPositionStateUpdate({\n          prevState: this.state,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        });\n\n        if (stateUpdate) {\n          stateUpdate.needToResetStyleCache = false;\n          this.setState(stateUpdate);\n        }\n      } // refs don't work in `react-test-renderer`\n\n\n      if (this._scrollingContainer) {\n        // setting the ref's scrollLeft and scrollTop.\n        // Somehow in MultiGrid the main grid doesn't trigger a update on mount.\n        if (this._scrollingContainer.scrollLeft !== this.state.scrollLeft) {\n          this._scrollingContainer.scrollLeft = this.state.scrollLeft;\n        }\n\n        if (this._scrollingContainer.scrollTop !== this.state.scrollTop) {\n          this._scrollingContainer.scrollTop = this.state.scrollTop;\n        }\n      } // Don't update scroll offset if the size is 0; we don't render any cells in this case.\n      // Setting a state may cause us to later thing we've updated the offce when we haven't.\n\n\n      var sizeIsBiggerThanZero = height > 0 && width > 0;\n\n      if (scrollToColumn >= 0 && sizeIsBiggerThanZero) {\n        this._updateScrollLeftForScrollToColumn();\n      }\n\n      if (scrollToRow >= 0 && sizeIsBiggerThanZero) {\n        this._updateScrollTopForScrollToRow();\n      } // Update onRowsRendered callback\n\n\n      this._invokeOnGridRenderedHelper(); // Initialize onScroll callback\n\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft || 0,\n        scrollTop: scrollTop || 0,\n        totalColumnsWidth: instanceProps.columnSizeAndPositionManager.getTotalSize(),\n        totalRowsHeight: instanceProps.rowSizeAndPositionManager.getTotalSize()\n      });\n\n      this._maybeCallOnScrollbarPresenceChange();\n    }\n    /**\n     * @private\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) New scroll-to-cell props have been set\n     */\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      var _this$props5 = this.props,\n          autoHeight = _this$props5.autoHeight,\n          autoWidth = _this$props5.autoWidth,\n          columnCount = _this$props5.columnCount,\n          height = _this$props5.height,\n          rowCount = _this$props5.rowCount,\n          scrollToAlignment = _this$props5.scrollToAlignment,\n          scrollToColumn = _this$props5.scrollToColumn,\n          scrollToRow = _this$props5.scrollToRow,\n          width = _this$props5.width;\n      var _this$state = this.state,\n          scrollLeft = _this$state.scrollLeft,\n          scrollPositionChangeReason = _this$state.scrollPositionChangeReason,\n          scrollTop = _this$state.scrollTop,\n          instanceProps = _this$state.instanceProps; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n      // We must do this at the start of the method as we may calculate and update scroll position below.\n\n      this._handleInvalidatedGridSize(); // Handle edge case where column or row count has only just increased over 0.\n      // In this case we may have to restore a previously-specified scroll offset.\n      // For more info see bvaughn/react-virtualized/issues/218\n\n\n      var columnOrRowCountJustIncreasedFromZero = columnCount > 0 && prevProps.columnCount === 0 || rowCount > 0 && prevProps.rowCount === 0; // Make sure requested changes to :scrollLeft or :scrollTop get applied.\n      // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,\n      // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).\n      // So we only set these when we require an adjustment of the scroll position.\n      // See issue #2 for more information.\n\n      if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {\n        // @TRICKY :autoHeight and :autoWidth properties instructs Grid to leave :scrollTop and :scrollLeft management to an external HOC (eg WindowScroller).\n        // In this case we should avoid checking scrollingContainer.scrollTop and scrollingContainer.scrollLeft since it forces layout/flow.\n        if (!autoWidth && scrollLeft >= 0 && (scrollLeft !== this._scrollingContainer.scrollLeft || columnOrRowCountJustIncreasedFromZero)) {\n          this._scrollingContainer.scrollLeft = scrollLeft;\n        }\n\n        if (!autoHeight && scrollTop >= 0 && (scrollTop !== this._scrollingContainer.scrollTop || columnOrRowCountJustIncreasedFromZero)) {\n          this._scrollingContainer.scrollTop = scrollTop;\n        }\n      } // Special case where the previous size was 0:\n      // In this case we don't show any windowed cells at all.\n      // So we should always recalculate offset afterwards.\n\n\n      var sizeJustIncreasedFromZero = (prevProps.width === 0 || prevProps.height === 0) && height > 0 && width > 0; // Update scroll offsets if the current :scrollToColumn or :scrollToRow values requires it\n      // @TODO Do we also need this check or can the one in componentWillUpdate() suffice?\n\n      if (this._recomputeScrollLeftFlag) {\n        this._recomputeScrollLeftFlag = false;\n\n        this._updateScrollLeftForScrollToColumn(this.props);\n      } else {\n        updateScrollIndexHelper({\n          cellSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n          previousCellsCount: prevProps.columnCount,\n          previousCellSize: prevProps.columnWidth,\n          previousScrollToAlignment: prevProps.scrollToAlignment,\n          previousScrollToIndex: prevProps.scrollToColumn,\n          previousSize: prevProps.width,\n          scrollOffset: scrollLeft,\n          scrollToAlignment: scrollToAlignment,\n          scrollToIndex: scrollToColumn,\n          size: width,\n          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,\n          updateScrollIndexCallback: function updateScrollIndexCallback() {\n            return _this2._updateScrollLeftForScrollToColumn(_this2.props);\n          }\n        });\n      }\n\n      if (this._recomputeScrollTopFlag) {\n        this._recomputeScrollTopFlag = false;\n\n        this._updateScrollTopForScrollToRow(this.props);\n      } else {\n        updateScrollIndexHelper({\n          cellSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n          previousCellsCount: prevProps.rowCount,\n          previousCellSize: prevProps.rowHeight,\n          previousScrollToAlignment: prevProps.scrollToAlignment,\n          previousScrollToIndex: prevProps.scrollToRow,\n          previousSize: prevProps.height,\n          scrollOffset: scrollTop,\n          scrollToAlignment: scrollToAlignment,\n          scrollToIndex: scrollToRow,\n          size: height,\n          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,\n          updateScrollIndexCallback: function updateScrollIndexCallback() {\n            return _this2._updateScrollTopForScrollToRow(_this2.props);\n          }\n        });\n      } // Update onRowsRendered callback if start/stop indices have changed\n\n\n      this._invokeOnGridRenderedHelper(); // Changes to :scrollLeft or :scrollTop should also notify :onScroll listeners\n\n\n      if (scrollLeft !== prevState.scrollLeft || scrollTop !== prevState.scrollTop) {\n        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n\n        this._invokeOnScrollMemoizer({\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          totalColumnsWidth: totalColumnsWidth,\n          totalRowsHeight: totalRowsHeight\n        });\n      }\n\n      this._maybeCallOnScrollbarPresenceChange();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._disablePointerEventsTimeoutId) {\n        cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n      }\n    }\n    /**\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) Empty content (0 rows or columns)\n     * 2) New scroll props overriding the current state\n     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          autoContainerWidth = _this$props6.autoContainerWidth,\n          autoHeight = _this$props6.autoHeight,\n          autoWidth = _this$props6.autoWidth,\n          className = _this$props6.className,\n          containerProps = _this$props6.containerProps,\n          containerRole = _this$props6.containerRole,\n          containerStyle = _this$props6.containerStyle,\n          height = _this$props6.height,\n          id = _this$props6.id,\n          noContentRenderer = _this$props6.noContentRenderer,\n          role = _this$props6.role,\n          style = _this$props6.style,\n          tabIndex = _this$props6.tabIndex,\n          width = _this$props6.width;\n      var _this$state2 = this.state,\n          instanceProps = _this$state2.instanceProps,\n          needToResetStyleCache = _this$state2.needToResetStyleCache;\n\n      var isScrolling = this._isScrolling();\n\n      var gridStyle = {\n        boxSizing: 'border-box',\n        direction: 'ltr',\n        height: autoHeight ? 'auto' : height,\n        position: 'relative',\n        width: autoWidth ? 'auto' : width,\n        WebkitOverflowScrolling: 'touch',\n        willChange: 'transform'\n      };\n\n      if (needToResetStyleCache) {\n        this._styleCache = {};\n      } // calculate _styleCache here\n      // if state.isScrolling (not from _isScrolling) then reset\n\n\n      if (!this.state.isScrolling) {\n        this._resetStyleCache();\n      } // calculate children to render here\n\n\n      this._calculateChildrenToRender(this.props, this.state);\n\n      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize(); // Force browser to hide scrollbars when we know they aren't necessary.\n      // Otherwise once scrollbars appear they may not disappear again.\n      // For more info see issue #116\n\n      var verticalScrollBarSize = totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n      var horizontalScrollBarSize = totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n\n      if (horizontalScrollBarSize !== this._horizontalScrollBarSize || verticalScrollBarSize !== this._verticalScrollBarSize) {\n        this._horizontalScrollBarSize = horizontalScrollBarSize;\n        this._verticalScrollBarSize = verticalScrollBarSize;\n        this._scrollbarPresenceChanged = true;\n      } // Also explicitly init styles to 'auto' if scrollbars are required.\n      // This works around an obscure edge case where external CSS styles have not yet been loaded,\n      // But an initial scroll index of offset is set as an external prop.\n      // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.\n      // This was originally reported via clauderic/react-infinite-calendar/issues/23\n\n\n      gridStyle.overflowX = totalColumnsWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';\n      gridStyle.overflowY = totalRowsHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';\n      var childrenToDisplay = this._childrenToDisplay;\n      var showNoContentRenderer = childrenToDisplay.length === 0 && height > 0 && width > 0;\n      return React.createElement(\"div\", _extends({\n        ref: this._setScrollingContainerRef\n      }, containerProps, {\n        \"aria-label\": this.props['aria-label'],\n        \"aria-readonly\": this.props['aria-readonly'],\n        className: clsx('ReactVirtualized__Grid', className),\n        id: id,\n        onScroll: this._onScroll,\n        role: role,\n        style: _objectSpread({}, gridStyle, {}, style),\n        tabIndex: tabIndex\n      }), childrenToDisplay.length > 0 && React.createElement(\"div\", {\n        className: \"ReactVirtualized__Grid__innerScrollContainer\",\n        role: containerRole,\n        style: _objectSpread({\n          width: autoContainerWidth ? 'auto' : totalColumnsWidth,\n          height: totalRowsHeight,\n          maxWidth: totalColumnsWidth,\n          maxHeight: totalRowsHeight,\n          overflow: 'hidden',\n          pointerEvents: isScrolling ? 'none' : '',\n          position: 'relative'\n        }, containerStyle)\n      }, childrenToDisplay), showNoContentRenderer && noContentRenderer());\n    }\n    /* ---------------------------- Helper methods ---------------------------- */\n\n  }, {\n    key: \"_calculateChildrenToRender\",\n    value: function _calculateChildrenToRender() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      var cellRenderer = props.cellRenderer,\n          cellRangeRenderer = props.cellRangeRenderer,\n          columnCount = props.columnCount,\n          deferredMeasurementCache = props.deferredMeasurementCache,\n          height = props.height,\n          overscanColumnCount = props.overscanColumnCount,\n          overscanIndicesGetter = props.overscanIndicesGetter,\n          overscanRowCount = props.overscanRowCount,\n          rowCount = props.rowCount,\n          width = props.width,\n          isScrollingOptOut = props.isScrollingOptOut;\n      var scrollDirectionHorizontal = state.scrollDirectionHorizontal,\n          scrollDirectionVertical = state.scrollDirectionVertical,\n          instanceProps = state.instanceProps;\n      var scrollTop = this._initialScrollTop > 0 ? this._initialScrollTop : state.scrollTop;\n      var scrollLeft = this._initialScrollLeft > 0 ? this._initialScrollLeft : state.scrollLeft;\n\n      var isScrolling = this._isScrolling(props, state);\n\n      this._childrenToDisplay = []; // Render only enough columns and rows to cover the visible area of the grid.\n\n      if (height > 0 && width > 0) {\n        var visibleColumnIndices = instanceProps.columnSizeAndPositionManager.getVisibleCellRange({\n          containerSize: width,\n          offset: scrollLeft\n        });\n        var visibleRowIndices = instanceProps.rowSizeAndPositionManager.getVisibleCellRange({\n          containerSize: height,\n          offset: scrollTop\n        });\n        var horizontalOffsetAdjustment = instanceProps.columnSizeAndPositionManager.getOffsetAdjustment({\n          containerSize: width,\n          offset: scrollLeft\n        });\n        var verticalOffsetAdjustment = instanceProps.rowSizeAndPositionManager.getOffsetAdjustment({\n          containerSize: height,\n          offset: scrollTop\n        }); // Store for _invokeOnGridRenderedHelper()\n\n        this._renderedColumnStartIndex = visibleColumnIndices.start;\n        this._renderedColumnStopIndex = visibleColumnIndices.stop;\n        this._renderedRowStartIndex = visibleRowIndices.start;\n        this._renderedRowStopIndex = visibleRowIndices.stop;\n        var overscanColumnIndices = overscanIndicesGetter({\n          direction: 'horizontal',\n          cellCount: columnCount,\n          overscanCellsCount: overscanColumnCount,\n          scrollDirection: scrollDirectionHorizontal,\n          startIndex: typeof visibleColumnIndices.start === 'number' ? visibleColumnIndices.start : 0,\n          stopIndex: typeof visibleColumnIndices.stop === 'number' ? visibleColumnIndices.stop : -1\n        });\n        var overscanRowIndices = overscanIndicesGetter({\n          direction: 'vertical',\n          cellCount: rowCount,\n          overscanCellsCount: overscanRowCount,\n          scrollDirection: scrollDirectionVertical,\n          startIndex: typeof visibleRowIndices.start === 'number' ? visibleRowIndices.start : 0,\n          stopIndex: typeof visibleRowIndices.stop === 'number' ? visibleRowIndices.stop : -1\n        }); // Store for _invokeOnGridRenderedHelper()\n\n        var columnStartIndex = overscanColumnIndices.overscanStartIndex;\n        var columnStopIndex = overscanColumnIndices.overscanStopIndex;\n        var rowStartIndex = overscanRowIndices.overscanStartIndex;\n        var rowStopIndex = overscanRowIndices.overscanStopIndex; // Advanced use-cases (eg CellMeasurer) require batched measurements to determine accurate sizes.\n\n        if (deferredMeasurementCache) {\n          // If rows have a dynamic height, scan the rows we are about to render.\n          // If any have not yet been measured, then we need to render all columns initially,\n          // Because the height of the row is equal to the tallest cell within that row,\n          // (And so we can't know the height without measuring all column-cells first).\n          if (!deferredMeasurementCache.hasFixedHeight()) {\n            for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n              if (!deferredMeasurementCache.has(rowIndex, 0)) {\n                columnStartIndex = 0;\n                columnStopIndex = columnCount - 1;\n                break;\n              }\n            }\n          } // If columns have a dynamic width, scan the columns we are about to render.\n          // If any have not yet been measured, then we need to render all rows initially,\n          // Because the width of the column is equal to the widest cell within that column,\n          // (And so we can't know the width without measuring all row-cells first).\n\n\n          if (!deferredMeasurementCache.hasFixedWidth()) {\n            for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n              if (!deferredMeasurementCache.has(0, columnIndex)) {\n                rowStartIndex = 0;\n                rowStopIndex = rowCount - 1;\n                break;\n              }\n            }\n          }\n        }\n\n        this._childrenToDisplay = cellRangeRenderer({\n          cellCache: this._cellCache,\n          cellRenderer: cellRenderer,\n          columnSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n          columnStartIndex: columnStartIndex,\n          columnStopIndex: columnStopIndex,\n          deferredMeasurementCache: deferredMeasurementCache,\n          horizontalOffsetAdjustment: horizontalOffsetAdjustment,\n          isScrolling: isScrolling,\n          isScrollingOptOut: isScrollingOptOut,\n          parent: this,\n          rowSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n          rowStartIndex: rowStartIndex,\n          rowStopIndex: rowStopIndex,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          styleCache: this._styleCache,\n          verticalOffsetAdjustment: verticalOffsetAdjustment,\n          visibleColumnIndices: visibleColumnIndices,\n          visibleRowIndices: visibleRowIndices\n        }); // update the indices\n\n        this._columnStartIndex = columnStartIndex;\n        this._columnStopIndex = columnStopIndex;\n        this._rowStartIndex = rowStartIndex;\n        this._rowStopIndex = rowStopIndex;\n      }\n    }\n    /**\n     * Sets an :isScrolling flag for a small window of time.\n     * This flag is used to disable pointer events on the scrollable portion of the Grid.\n     * This prevents jerky/stuttery mouse-wheel scrolling.\n     */\n\n  }, {\n    key: \"_debounceScrollEnded\",\n    value: function _debounceScrollEnded() {\n      var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;\n\n      if (this._disablePointerEventsTimeoutId) {\n        cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n      }\n\n      this._disablePointerEventsTimeoutId = requestAnimationTimeout(this._debounceScrollEndedCallback, scrollingResetTimeInterval);\n    }\n  }, {\n    key: \"_handleInvalidatedGridSize\",\n\n    /**\n     * Check for batched CellMeasurer size invalidations.\n     * This will occur the first time one or more previously unmeasured cells are rendered.\n     */\n    value: function _handleInvalidatedGridSize() {\n      if (typeof this._deferredInvalidateColumnIndex === 'number' && typeof this._deferredInvalidateRowIndex === 'number') {\n        var columnIndex = this._deferredInvalidateColumnIndex;\n        var rowIndex = this._deferredInvalidateRowIndex;\n        this._deferredInvalidateColumnIndex = null;\n        this._deferredInvalidateRowIndex = null;\n        this.recomputeGridSize({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        });\n      }\n    }\n  }, {\n    key: \"_invokeOnScrollMemoizer\",\n    value: function _invokeOnScrollMemoizer(_ref6) {\n      var _this3 = this;\n\n      var scrollLeft = _ref6.scrollLeft,\n          scrollTop = _ref6.scrollTop,\n          totalColumnsWidth = _ref6.totalColumnsWidth,\n          totalRowsHeight = _ref6.totalRowsHeight;\n\n      this._onScrollMemoizer({\n        callback: function callback(_ref7) {\n          var scrollLeft = _ref7.scrollLeft,\n              scrollTop = _ref7.scrollTop;\n          var _this3$props = _this3.props,\n              height = _this3$props.height,\n              onScroll = _this3$props.onScroll,\n              width = _this3$props.width;\n          onScroll({\n            clientHeight: height,\n            clientWidth: width,\n            scrollHeight: totalRowsHeight,\n            scrollLeft: scrollLeft,\n            scrollTop: scrollTop,\n            scrollWidth: totalColumnsWidth\n          });\n        },\n        indices: {\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        }\n      });\n    }\n  }, {\n    key: \"_isScrolling\",\n    value: function _isScrolling() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      // If isScrolling is defined in props, use it to override the value in state\n      // This is a performance optimization for WindowScroller + Grid\n      return Object.hasOwnProperty.call(props, 'isScrolling') ? Boolean(props.isScrolling) : Boolean(state.isScrolling);\n    }\n  }, {\n    key: \"_maybeCallOnScrollbarPresenceChange\",\n    value: function _maybeCallOnScrollbarPresenceChange() {\n      if (this._scrollbarPresenceChanged) {\n        var onScrollbarPresenceChange = this.props.onScrollbarPresenceChange;\n        this._scrollbarPresenceChanged = false;\n        onScrollbarPresenceChange({\n          horizontal: this._horizontalScrollBarSize > 0,\n          size: this.state.instanceProps.scrollbarSize,\n          vertical: this._verticalScrollBarSize > 0\n        });\n      }\n    }\n  }, {\n    key: \"scrollToPosition\",\n\n    /**\n     * Scroll to the specified offset(s).\n     * Useful for animating position changes.\n     */\n    value: function scrollToPosition(_ref8) {\n      var scrollLeft = _ref8.scrollLeft,\n          scrollTop = _ref8.scrollTop;\n\n      var stateUpdate = Grid._getScrollToPositionStateUpdate({\n        prevState: this.state,\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop\n      });\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }, {\n    key: \"_getCalculatedScrollLeft\",\n    value: function _getCalculatedScrollLeft() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      return Grid._getCalculatedScrollLeft(props, state);\n    }\n  }, {\n    key: \"_updateScrollLeftForScrollToColumn\",\n    value: function _updateScrollLeftForScrollToColumn() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      var stateUpdate = Grid._getScrollLeftForScrollToColumnStateUpdate(props, state);\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }, {\n    key: \"_getCalculatedScrollTop\",\n    value: function _getCalculatedScrollTop() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      return Grid._getCalculatedScrollTop(props, state);\n    }\n  }, {\n    key: \"_resetStyleCache\",\n    value: function _resetStyleCache() {\n      var styleCache = this._styleCache;\n      var cellCache = this._cellCache;\n      var isScrollingOptOut = this.props.isScrollingOptOut; // Reset cell and style caches once scrolling stops.\n      // This makes Grid simpler to use (since cells commonly change).\n      // And it keeps the caches from growing too large.\n      // Performance is most sensitive when a user is scrolling.\n      // Don't clear visible cells from cellCache if isScrollingOptOut is specified.\n      // This keeps the cellCache to a resonable size.\n\n      this._cellCache = {};\n      this._styleCache = {}; // Copy over the visible cell styles so avoid unnecessary re-render.\n\n      for (var rowIndex = this._rowStartIndex; rowIndex <= this._rowStopIndex; rowIndex++) {\n        for (var columnIndex = this._columnStartIndex; columnIndex <= this._columnStopIndex; columnIndex++) {\n          var key = \"\".concat(rowIndex, \"-\").concat(columnIndex);\n          this._styleCache[key] = styleCache[key];\n\n          if (isScrollingOptOut) {\n            this._cellCache[key] = cellCache[key];\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_updateScrollTopForScrollToRow\",\n    value: function _updateScrollTopForScrollToRow() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      var stateUpdate = Grid._getScrollTopForScrollToRowStateUpdate(props, state);\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var newState = {};\n\n      if (nextProps.columnCount === 0 && prevState.scrollLeft !== 0 || nextProps.rowCount === 0 && prevState.scrollTop !== 0) {\n        newState.scrollLeft = 0;\n        newState.scrollTop = 0; // only use scroll{Left,Top} from props if scrollTo{Column,Row} isn't specified\n        // scrollTo{Column,Row} should override scroll{Left,Top}\n      } else if (nextProps.scrollLeft !== prevState.scrollLeft && nextProps.scrollToColumn < 0 || nextProps.scrollTop !== prevState.scrollTop && nextProps.scrollToRow < 0) {\n        Object.assign(newState, Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: nextProps.scrollLeft,\n          scrollTop: nextProps.scrollTop\n        }));\n      }\n\n      var instanceProps = prevState.instanceProps; // Initially we should not clearStyleCache\n\n      newState.needToResetStyleCache = false;\n\n      if (nextProps.columnWidth !== instanceProps.prevColumnWidth || nextProps.rowHeight !== instanceProps.prevRowHeight) {\n        // Reset cache. set it to {} in render\n        newState.needToResetStyleCache = true;\n      }\n\n      instanceProps.columnSizeAndPositionManager.configure({\n        cellCount: nextProps.columnCount,\n        estimatedCellSize: Grid._getEstimatedColumnSize(nextProps),\n        cellSizeGetter: Grid._wrapSizeGetter(nextProps.columnWidth)\n      });\n      instanceProps.rowSizeAndPositionManager.configure({\n        cellCount: nextProps.rowCount,\n        estimatedCellSize: Grid._getEstimatedRowSize(nextProps),\n        cellSizeGetter: Grid._wrapSizeGetter(nextProps.rowHeight)\n      });\n\n      if (instanceProps.prevColumnCount === 0 || instanceProps.prevRowCount === 0) {\n        instanceProps.prevColumnCount = 0;\n        instanceProps.prevRowCount = 0;\n      } // If scrolling is controlled outside this component, clear cache when scrolling stops\n\n\n      if (nextProps.autoHeight && nextProps.isScrolling === false && instanceProps.prevIsScrolling === true) {\n        Object.assign(newState, {\n          isScrolling: false\n        });\n      }\n\n      var maybeStateA;\n      var maybeStateB;\n      calculateSizeAndPositionDataAndUpdateScrollOffset({\n        cellCount: instanceProps.prevColumnCount,\n        cellSize: typeof instanceProps.prevColumnWidth === 'number' ? instanceProps.prevColumnWidth : null,\n        computeMetadataCallback: function computeMetadataCallback() {\n          return instanceProps.columnSizeAndPositionManager.resetCell(0);\n        },\n        computeMetadataCallbackProps: nextProps,\n        nextCellsCount: nextProps.columnCount,\n        nextCellSize: typeof nextProps.columnWidth === 'number' ? nextProps.columnWidth : null,\n        nextScrollToIndex: nextProps.scrollToColumn,\n        scrollToIndex: instanceProps.prevScrollToColumn,\n        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {\n          maybeStateA = Grid._getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState);\n        }\n      });\n      calculateSizeAndPositionDataAndUpdateScrollOffset({\n        cellCount: instanceProps.prevRowCount,\n        cellSize: typeof instanceProps.prevRowHeight === 'number' ? instanceProps.prevRowHeight : null,\n        computeMetadataCallback: function computeMetadataCallback() {\n          return instanceProps.rowSizeAndPositionManager.resetCell(0);\n        },\n        computeMetadataCallbackProps: nextProps,\n        nextCellsCount: nextProps.rowCount,\n        nextCellSize: typeof nextProps.rowHeight === 'number' ? nextProps.rowHeight : null,\n        nextScrollToIndex: nextProps.scrollToRow,\n        scrollToIndex: instanceProps.prevScrollToRow,\n        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {\n          maybeStateB = Grid._getScrollTopForScrollToRowStateUpdate(nextProps, prevState);\n        }\n      });\n      instanceProps.prevColumnCount = nextProps.columnCount;\n      instanceProps.prevColumnWidth = nextProps.columnWidth;\n      instanceProps.prevIsScrolling = nextProps.isScrolling === true;\n      instanceProps.prevRowCount = nextProps.rowCount;\n      instanceProps.prevRowHeight = nextProps.rowHeight;\n      instanceProps.prevScrollToColumn = nextProps.scrollToColumn;\n      instanceProps.prevScrollToRow = nextProps.scrollToRow; // getting scrollBarSize (moved from componentWillMount)\n\n      instanceProps.scrollbarSize = nextProps.getScrollbarSize();\n\n      if (instanceProps.scrollbarSize === undefined) {\n        instanceProps.scrollbarSizeMeasured = false;\n        instanceProps.scrollbarSize = 0;\n      } else {\n        instanceProps.scrollbarSizeMeasured = true;\n      }\n\n      newState.instanceProps = instanceProps;\n      return _objectSpread({}, newState, {}, maybeStateA, {}, maybeStateB);\n    }\n  }, {\n    key: \"_getEstimatedColumnSize\",\n    value: function _getEstimatedColumnSize(props) {\n      return typeof props.columnWidth === 'number' ? props.columnWidth : props.estimatedColumnSize;\n    }\n  }, {\n    key: \"_getEstimatedRowSize\",\n    value: function _getEstimatedRowSize(props) {\n      return typeof props.rowHeight === 'number' ? props.rowHeight : props.estimatedRowSize;\n    }\n  }, {\n    key: \"_getScrollToPositionStateUpdate\",\n\n    /**\n     * Get the updated state after scrolling to\n     * scrollLeft and scrollTop\n     */\n    value: function _getScrollToPositionStateUpdate(_ref9) {\n      var prevState = _ref9.prevState,\n          scrollLeft = _ref9.scrollLeft,\n          scrollTop = _ref9.scrollTop;\n      var newState = {\n        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED\n      };\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0) {\n        newState.scrollDirectionHorizontal = scrollLeft > prevState.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n        newState.scrollLeft = scrollLeft;\n      }\n\n      if (typeof scrollTop === 'number' && scrollTop >= 0) {\n        newState.scrollDirectionVertical = scrollTop > prevState.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n        newState.scrollTop = scrollTop;\n      }\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft || typeof scrollTop === 'number' && scrollTop >= 0 && scrollTop !== prevState.scrollTop) {\n        return newState;\n      }\n\n      return {};\n    }\n  }, {\n    key: \"_wrapSizeGetter\",\n    value: function _wrapSizeGetter(value) {\n      return typeof value === 'function' ? value : function () {\n        return value;\n      };\n    }\n  }, {\n    key: \"_getCalculatedScrollLeft\",\n    value: function _getCalculatedScrollLeft(nextProps, prevState) {\n      var columnCount = nextProps.columnCount,\n          height = nextProps.height,\n          scrollToAlignment = nextProps.scrollToAlignment,\n          scrollToColumn = nextProps.scrollToColumn,\n          width = nextProps.width;\n      var scrollLeft = prevState.scrollLeft,\n          instanceProps = prevState.instanceProps;\n\n      if (columnCount > 0) {\n        var finalColumn = columnCount - 1;\n        var targetIndex = scrollToColumn < 0 ? finalColumn : Math.min(finalColumn, scrollToColumn);\n        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n        return instanceProps.columnSizeAndPositionManager.getUpdatedOffsetForIndex({\n          align: scrollToAlignment,\n          containerSize: width - scrollBarSize,\n          currentOffset: scrollLeft,\n          targetIndex: targetIndex\n        });\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"_getScrollLeftForScrollToColumnStateUpdate\",\n    value: function _getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState) {\n      var scrollLeft = prevState.scrollLeft;\n\n      var calculatedScrollLeft = Grid._getCalculatedScrollLeft(nextProps, prevState);\n\n      if (typeof calculatedScrollLeft === 'number' && calculatedScrollLeft >= 0 && scrollLeft !== calculatedScrollLeft) {\n        return Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: -1\n        });\n      }\n\n      return {};\n    }\n  }, {\n    key: \"_getCalculatedScrollTop\",\n    value: function _getCalculatedScrollTop(nextProps, prevState) {\n      var height = nextProps.height,\n          rowCount = nextProps.rowCount,\n          scrollToAlignment = nextProps.scrollToAlignment,\n          scrollToRow = nextProps.scrollToRow,\n          width = nextProps.width;\n      var scrollTop = prevState.scrollTop,\n          instanceProps = prevState.instanceProps;\n\n      if (rowCount > 0) {\n        var finalRow = rowCount - 1;\n        var targetIndex = scrollToRow < 0 ? finalRow : Math.min(finalRow, scrollToRow);\n        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n        return instanceProps.rowSizeAndPositionManager.getUpdatedOffsetForIndex({\n          align: scrollToAlignment,\n          containerSize: height - scrollBarSize,\n          currentOffset: scrollTop,\n          targetIndex: targetIndex\n        });\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"_getScrollTopForScrollToRowStateUpdate\",\n    value: function _getScrollTopForScrollToRowStateUpdate(nextProps, prevState) {\n      var scrollTop = prevState.scrollTop;\n\n      var calculatedScrollTop = Grid._getCalculatedScrollTop(nextProps, prevState);\n\n      if (typeof calculatedScrollTop === 'number' && calculatedScrollTop >= 0 && scrollTop !== calculatedScrollTop) {\n        return Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: -1,\n          scrollTop: calculatedScrollTop\n        });\n      }\n\n      return {};\n    }\n  }]);\n\n  return Grid;\n}(React.PureComponent), _defineProperty(_class, \"propTypes\", process.env.NODE_ENV === 'production' ? null : {\n  \"aria-label\": PropTypes.string.isRequired,\n  \"aria-readonly\": PropTypes.bool,\n\n  /**\n   * Set the width of the inner scrollable container to 'auto'.\n   * This is useful for single-column Grids to ensure that the column doesn't extend below a vertical scrollbar.\n   */\n  \"autoContainerWidth\": PropTypes.bool.isRequired,\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  \"autoHeight\": PropTypes.bool.isRequired,\n\n  /**\n   * Removes fixed width from the scrollingContainer so that the total width of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  \"autoWidth\": PropTypes.bool.isRequired,\n\n  /** Responsible for rendering a cell given an row and column index.  */\n  \"cellRenderer\": function cellRenderer() {\n    return (typeof bpfrpt_proptype_CellRenderer === \"function\" ? bpfrpt_proptype_CellRenderer.isRequired ? bpfrpt_proptype_CellRenderer.isRequired : bpfrpt_proptype_CellRenderer : PropTypes.shape(bpfrpt_proptype_CellRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Responsible for rendering a group of cells given their index ranges.  */\n  \"cellRangeRenderer\": function cellRangeRenderer() {\n    return (typeof bpfrpt_proptype_CellRangeRenderer === \"function\" ? bpfrpt_proptype_CellRangeRenderer.isRequired ? bpfrpt_proptype_CellRangeRenderer.isRequired : bpfrpt_proptype_CellRangeRenderer : PropTypes.shape(bpfrpt_proptype_CellRangeRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Optional custom CSS class name to attach to root Grid element.  */\n  \"className\": PropTypes.string,\n\n  /** Number of columns in grid.  */\n  \"columnCount\": PropTypes.number.isRequired,\n\n  /** Either a fixed column width (number) or a function that returns the width of a column given its index.  */\n  \"columnWidth\": function columnWidth() {\n    return (typeof bpfrpt_proptype_CellSize === \"function\" ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : PropTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n  /** Unfiltered props for the Grid container. */\n  \"containerProps\": PropTypes.object,\n\n  /** ARIA role for the cell-container.  */\n  \"containerRole\": PropTypes.string.isRequired,\n\n  /** Optional inline style applied to inner cell-container */\n  \"containerStyle\": PropTypes.object.isRequired,\n\n  /**\n   * If CellMeasurer is used to measure this Grid's children, this should be a pointer to its CellMeasurerCache.\n   * A shared CellMeasurerCache reference enables Grid and CellMeasurer to share measurement data.\n   */\n  \"deferredMeasurementCache\": PropTypes.object,\n\n  /**\n   * Used to estimate the total width of a Grid before all of its columns have actually been measured.\n   * The estimated total width is adjusted as columns are rendered.\n   */\n  \"estimatedColumnSize\": PropTypes.number.isRequired,\n\n  /**\n   * Used to estimate the total height of a Grid before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   */\n  \"estimatedRowSize\": PropTypes.number.isRequired,\n\n  /** Exposed for testing purposes only.  */\n  \"getScrollbarSize\": PropTypes.func.isRequired,\n\n  /** Height of Grid; this property determines the number of visible (vs virtualized) rows.  */\n  \"height\": PropTypes.number.isRequired,\n\n  /** Optional custom id to attach to root Grid element.  */\n  \"id\": PropTypes.string,\n\n  /**\n   * Override internal is-scrolling state tracking.\n   * This property is primarily intended for use with the WindowScroller component.\n   */\n  \"isScrolling\": PropTypes.bool,\n\n  /**\n   * Opt-out of isScrolling param passed to cellRangeRenderer.\n   * To avoid the extra render when scroll stops.\n   */\n  \"isScrollingOptOut\": PropTypes.bool.isRequired,\n\n  /** Optional renderer to be used in place of rows when either :rowCount or :columnCount is 0.  */\n  \"noContentRenderer\": function noContentRenderer() {\n    return (typeof bpfrpt_proptype_NoContentRenderer === \"function\" ? bpfrpt_proptype_NoContentRenderer.isRequired ? bpfrpt_proptype_NoContentRenderer.isRequired : bpfrpt_proptype_NoContentRenderer : PropTypes.shape(bpfrpt_proptype_NoContentRenderer).isRequired).apply(this, arguments);\n  },\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   */\n  \"onScroll\": PropTypes.func.isRequired,\n\n  /**\n   * Called whenever a horizontal or vertical scrollbar is added or removed.\n   * This prop is not intended for end-user use;\n   * It is used by MultiGrid to support fixed-row/fixed-column scroll syncing.\n   */\n  \"onScrollbarPresenceChange\": PropTypes.func.isRequired,\n\n  /** Callback invoked with information about the section of the Grid that was just rendered.  */\n  \"onSectionRendered\": PropTypes.func.isRequired,\n\n  /**\n   * Number of columns to render before/after the visible section of the grid.\n   * These columns can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  \"overscanColumnCount\": PropTypes.number.isRequired,\n\n  /**\n   * Calculates the number of cells to overscan before and after a specified range.\n   * This function ensures that overscanning doesn't exceed the available cells.\n   */\n  \"overscanIndicesGetter\": function overscanIndicesGetter() {\n    return (typeof bpfrpt_proptype_OverscanIndicesGetter === \"function\" ? bpfrpt_proptype_OverscanIndicesGetter.isRequired ? bpfrpt_proptype_OverscanIndicesGetter.isRequired : bpfrpt_proptype_OverscanIndicesGetter : PropTypes.shape(bpfrpt_proptype_OverscanIndicesGetter).isRequired).apply(this, arguments);\n  },\n\n  /**\n   * Number of rows to render above/below the visible section of the grid.\n   * These rows can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  \"overscanRowCount\": PropTypes.number.isRequired,\n\n  /** ARIA role for the grid element.  */\n  \"role\": PropTypes.string.isRequired,\n\n  /**\n   * Either a fixed row height (number) or a function that returns the height of a row given its index.\n   * Should implement the following interface: ({ index: number }): number\n   */\n  \"rowHeight\": function rowHeight() {\n    return (typeof bpfrpt_proptype_CellSize === \"function\" ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : PropTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n  /** Number of rows in grid.  */\n  \"rowCount\": PropTypes.number.isRequired,\n\n  /** Wait this amount of time after the last scroll event before resetting Grid `pointer-events`. */\n  \"scrollingResetTimeInterval\": PropTypes.number.isRequired,\n\n  /** Horizontal offset. */\n  \"scrollLeft\": PropTypes.number,\n\n  /**\n   * Controls scroll-to-cell behavior of the Grid.\n   * The default (\"auto\") scrolls the least amount possible to ensure that the specified cell is fully visible.\n   * Use \"start\" to align cells to the top/left of the Grid and \"end\" to align bottom/right.\n   */\n  \"scrollToAlignment\": function scrollToAlignment() {\n    return (typeof bpfrpt_proptype_Alignment === \"function\" ? bpfrpt_proptype_Alignment.isRequired ? bpfrpt_proptype_Alignment.isRequired : bpfrpt_proptype_Alignment : PropTypes.shape(bpfrpt_proptype_Alignment).isRequired).apply(this, arguments);\n  },\n\n  /** Column index to ensure visible (by forcefully scrolling if necessary) */\n  \"scrollToColumn\": PropTypes.number.isRequired,\n\n  /** Vertical offset. */\n  \"scrollTop\": PropTypes.number,\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) */\n  \"scrollToRow\": PropTypes.number.isRequired,\n\n  /** Optional inline style */\n  \"style\": PropTypes.object.isRequired,\n\n  /** Tab index for focus */\n  \"tabIndex\": PropTypes.number,\n\n  /** Width of Grid; this property determines the number of visible (vs virtualized) columns.  */\n  \"width\": PropTypes.number.isRequired\n}), _temp);\n\n_defineProperty(Grid, \"defaultProps\", {\n  'aria-label': 'grid',\n  'aria-readonly': true,\n  autoContainerWidth: false,\n  autoHeight: false,\n  autoWidth: false,\n  cellRangeRenderer: defaultCellRangeRenderer,\n  containerRole: 'rowgroup',\n  containerStyle: {},\n  estimatedColumnSize: 100,\n  estimatedRowSize: 30,\n  getScrollbarSize: scrollbarSize,\n  noContentRenderer: renderNull,\n  onScroll: function onScroll() {},\n  onScrollbarPresenceChange: function onScrollbarPresenceChange() {},\n  onSectionRendered: function onSectionRendered() {},\n  overscanColumnCount: 0,\n  overscanIndicesGetter: defaultOverscanIndicesGetter,\n  overscanRowCount: 10,\n  role: 'grid',\n  scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL,\n  scrollToAlignment: 'auto',\n  scrollToColumn: -1,\n  scrollToRow: -1,\n  style: {},\n  tabIndex: 0,\n  isScrollingOptOut: false\n});\n\npolyfill(Grid);\nexport default Grid;\nimport { bpfrpt_proptype_CellRenderer } from \"./types\";\nimport { bpfrpt_proptype_CellRangeRenderer } from \"./types\";\nimport { bpfrpt_proptype_CellPosition } from \"./types\";\nimport { bpfrpt_proptype_CellSize } from \"./types\";\nimport { bpfrpt_proptype_CellSizeGetter } from \"./types\";\nimport { bpfrpt_proptype_NoContentRenderer } from \"./types\";\nimport { bpfrpt_proptype_Scroll } from \"./types\";\nimport { bpfrpt_proptype_ScrollbarPresenceChange } from \"./types\";\nimport { bpfrpt_proptype_RenderedSection } from \"./types\";\nimport { bpfrpt_proptype_OverscanIndicesGetter } from \"./types\";\nimport { bpfrpt_proptype_Alignment } from \"./types\";\nimport { bpfrpt_proptype_CellCache } from \"./types\";\nimport { bpfrpt_proptype_StyleCache } from \"./types\";\nimport { bpfrpt_proptype_AnimationTimeoutId } from \"../utils/requestAnimationTimeout\";\nimport PropTypes from \"prop-types\";","import { caf, raf } from './animationFrame';\nvar bpfrpt_proptype_AnimationTimeoutId = process.env.NODE_ENV === 'production' ? null : {\n  \"id\": PropTypes.number.isRequired\n};\nexport var cancelAnimationTimeout = function cancelAnimationTimeout(frame) {\n  return caf(frame.id);\n};\n/**\n * Recursively calls requestAnimationFrame until a specified delay has been met or exceeded.\n * When the delay time has been reached the function you're timing out will be called.\n *\n * Credit: Joe Lambert (https://gist.github.com/joelambert/1002116#file-requesttimeout-js)\n */\n\nexport var requestAnimationTimeout = function requestAnimationTimeout(callback, delay) {\n  var start; // wait for end of processing current event handler, because event handler may be long\n\n  Promise.resolve().then(function () {\n    start = Date.now();\n  });\n\n  var timeout = function timeout() {\n    if (Date.now() - start >= delay) {\n      callback.call();\n    } else {\n      frame.id = raf(timeout);\n    }\n  };\n\n  var frame = {\n    id: raf(timeout)\n  };\n  return frame;\n};\nimport PropTypes from \"prop-types\";\nexport { bpfrpt_proptype_AnimationTimeoutId };","import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _class, _temp;\n\nimport Grid, { accessibilityOverscanIndicesGetter } from '../Grid';\nimport * as React from 'react';\nimport clsx from 'clsx';\n/**\n * It is inefficient to create and manage a large list of DOM elements within a scrolling container\n * if only a few of those elements are visible. The primary purpose of this component is to improve\n * performance by only rendering the DOM nodes that a user is able to see based on their current\n * scroll position.\n *\n * This component renders a virtualized list of elements with either fixed or dynamic heights.\n */\n\nvar List = (_temp = _class =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(List, _React$PureComponent);\n\n  function List() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, List);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(List)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"Grid\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_cellRenderer\", function (_ref) {\n      var parent = _ref.parent,\n          rowIndex = _ref.rowIndex,\n          style = _ref.style,\n          isScrolling = _ref.isScrolling,\n          isVisible = _ref.isVisible,\n          key = _ref.key;\n      var rowRenderer = _this.props.rowRenderer; // TRICKY The style object is sometimes cached by Grid.\n      // This prevents new style objects from bypassing shallowCompare().\n      // However as of React 16, style props are auto-frozen (at least in dev mode)\n      // Check to make sure we can still modify the style before proceeding.\n      // https://github.com/facebook/react/commit/977357765b44af8ff0cfea327866861073095c12#commitcomment-20648713\n\n      var widthDescriptor = Object.getOwnPropertyDescriptor(style, 'width');\n\n      if (widthDescriptor && widthDescriptor.writable) {\n        // By default, List cells should be 100% width.\n        // This prevents them from flowing under a scrollbar (if present).\n        style.width = '100%';\n      }\n\n      return rowRenderer({\n        index: rowIndex,\n        style: style,\n        isScrolling: isScrolling,\n        isVisible: isVisible,\n        key: key,\n        parent: parent\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_setRef\", function (ref) {\n      _this.Grid = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onScroll\", function (_ref2) {\n      var clientHeight = _ref2.clientHeight,\n          scrollHeight = _ref2.scrollHeight,\n          scrollTop = _ref2.scrollTop;\n      var onScroll = _this.props.onScroll;\n      onScroll({\n        clientHeight: clientHeight,\n        scrollHeight: scrollHeight,\n        scrollTop: scrollTop\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onSectionRendered\", function (_ref3) {\n      var rowOverscanStartIndex = _ref3.rowOverscanStartIndex,\n          rowOverscanStopIndex = _ref3.rowOverscanStopIndex,\n          rowStartIndex = _ref3.rowStartIndex,\n          rowStopIndex = _ref3.rowStopIndex;\n      var onRowsRendered = _this.props.onRowsRendered;\n      onRowsRendered({\n        overscanStartIndex: rowOverscanStartIndex,\n        overscanStopIndex: rowOverscanStopIndex,\n        startIndex: rowStartIndex,\n        stopIndex: rowStopIndex\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: \"forceUpdateGrid\",\n    value: function forceUpdateGrid() {\n      if (this.Grid) {\n        this.Grid.forceUpdate();\n      }\n    }\n    /** See Grid#getOffsetForCell */\n\n  }, {\n    key: \"getOffsetForRow\",\n    value: function getOffsetForRow(_ref4) {\n      var alignment = _ref4.alignment,\n          index = _ref4.index;\n\n      if (this.Grid) {\n        var _this$Grid$getOffsetF = this.Grid.getOffsetForCell({\n          alignment: alignment,\n          rowIndex: index,\n          columnIndex: 0\n        }),\n            scrollTop = _this$Grid$getOffsetF.scrollTop;\n\n        return scrollTop;\n      }\n\n      return 0;\n    }\n    /** CellMeasurer compatibility */\n\n  }, {\n    key: \"invalidateCellSizeAfterRender\",\n    value: function invalidateCellSizeAfterRender(_ref5) {\n      var columnIndex = _ref5.columnIndex,\n          rowIndex = _ref5.rowIndex;\n\n      if (this.Grid) {\n        this.Grid.invalidateCellSizeAfterRender({\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    }\n    /** See Grid#measureAllCells */\n\n  }, {\n    key: \"measureAllRows\",\n    value: function measureAllRows() {\n      if (this.Grid) {\n        this.Grid.measureAllCells();\n      }\n    }\n    /** CellMeasurer compatibility */\n\n  }, {\n    key: \"recomputeGridSize\",\n    value: function recomputeGridSize() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref6$columnIndex = _ref6.columnIndex,\n          columnIndex = _ref6$columnIndex === void 0 ? 0 : _ref6$columnIndex,\n          _ref6$rowIndex = _ref6.rowIndex,\n          rowIndex = _ref6$rowIndex === void 0 ? 0 : _ref6$rowIndex;\n\n      if (this.Grid) {\n        this.Grid.recomputeGridSize({\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    }\n    /** See Grid#recomputeGridSize */\n\n  }, {\n    key: \"recomputeRowHeights\",\n    value: function recomputeRowHeights() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.recomputeGridSize({\n          rowIndex: index,\n          columnIndex: 0\n        });\n      }\n    }\n    /** See Grid#scrollToPosition */\n\n  }, {\n    key: \"scrollToPosition\",\n    value: function scrollToPosition() {\n      var scrollTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.scrollToPosition({\n          scrollTop: scrollTop\n        });\n      }\n    }\n    /** See Grid#scrollToCell */\n\n  }, {\n    key: \"scrollToRow\",\n    value: function scrollToRow() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.scrollToCell({\n          columnIndex: 0,\n          rowIndex: index\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          noRowsRenderer = _this$props.noRowsRenderer,\n          scrollToIndex = _this$props.scrollToIndex,\n          width = _this$props.width;\n      var classNames = clsx('ReactVirtualized__List', className);\n      return React.createElement(Grid, _extends({}, this.props, {\n        autoContainerWidth: true,\n        cellRenderer: this._cellRenderer,\n        className: classNames,\n        columnWidth: width,\n        columnCount: 1,\n        noContentRenderer: noRowsRenderer,\n        onScroll: this._onScroll,\n        onSectionRendered: this._onSectionRendered,\n        ref: this._setRef,\n        scrollToRow: scrollToIndex\n      }));\n    }\n  }]);\n\n  return List;\n}(React.PureComponent), _defineProperty(_class, \"propTypes\", process.env.NODE_ENV === 'production' ? null : {\n  \"aria-label\": PropTypes.string,\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height\n   * of rows can stretch the window. Intended for use with WindowScroller\n   */\n  \"autoHeight\": PropTypes.bool.isRequired,\n\n  /** Optional CSS class name */\n  \"className\": PropTypes.string,\n\n  /**\n   * Used to estimate the total height of a List before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   */\n  \"estimatedRowSize\": PropTypes.number.isRequired,\n\n  /** Height constraint for list (determines how many actual rows are rendered) */\n  \"height\": PropTypes.number.isRequired,\n\n  /** Optional renderer to be used in place of rows when rowCount is 0 */\n  \"noRowsRenderer\": function noRowsRenderer() {\n    return (typeof bpfrpt_proptype_NoContentRenderer === \"function\" ? bpfrpt_proptype_NoContentRenderer.isRequired ? bpfrpt_proptype_NoContentRenderer.isRequired : bpfrpt_proptype_NoContentRenderer : PropTypes.shape(bpfrpt_proptype_NoContentRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Callback invoked with information about the slice of rows that were just rendered.  */\n  \"onRowsRendered\": PropTypes.func.isRequired,\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   */\n  \"onScroll\": PropTypes.func.isRequired,\n\n  /** See Grid#overscanIndicesGetter */\n  \"overscanIndicesGetter\": function overscanIndicesGetter() {\n    return (typeof bpfrpt_proptype_OverscanIndicesGetter === \"function\" ? bpfrpt_proptype_OverscanIndicesGetter.isRequired ? bpfrpt_proptype_OverscanIndicesGetter.isRequired : bpfrpt_proptype_OverscanIndicesGetter : PropTypes.shape(bpfrpt_proptype_OverscanIndicesGetter).isRequired).apply(this, arguments);\n  },\n\n  /**\n   * Number of rows to render above/below the visible bounds of the list.\n   * These rows can help for smoother scrolling on touch devices.\n   */\n  \"overscanRowCount\": PropTypes.number.isRequired,\n\n  /** Either a fixed row height (number) or a function that returns the height of a row given its index.  */\n  \"rowHeight\": function rowHeight() {\n    return (typeof bpfrpt_proptype_CellSize === \"function\" ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : PropTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n  /** Responsible for rendering a row given an index; ({ index: number }): node */\n  \"rowRenderer\": function rowRenderer() {\n    return (typeof bpfrpt_proptype_RowRenderer === \"function\" ? bpfrpt_proptype_RowRenderer.isRequired ? bpfrpt_proptype_RowRenderer.isRequired : bpfrpt_proptype_RowRenderer : PropTypes.shape(bpfrpt_proptype_RowRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Number of rows in list. */\n  \"rowCount\": PropTypes.number.isRequired,\n\n  /** See Grid#scrollToAlignment */\n  \"scrollToAlignment\": function scrollToAlignment() {\n    return (typeof bpfrpt_proptype_Alignment === \"function\" ? bpfrpt_proptype_Alignment.isRequired ? bpfrpt_proptype_Alignment.isRequired : bpfrpt_proptype_Alignment : PropTypes.shape(bpfrpt_proptype_Alignment).isRequired).apply(this, arguments);\n  },\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) */\n  \"scrollToIndex\": PropTypes.number.isRequired,\n\n  /** Vertical offset. */\n  \"scrollTop\": PropTypes.number,\n\n  /** Optional inline style */\n  \"style\": PropTypes.object.isRequired,\n\n  /** Tab index for focus */\n  \"tabIndex\": PropTypes.number,\n\n  /** Width of list */\n  \"width\": PropTypes.number.isRequired\n}), _temp);\n\n_defineProperty(List, \"defaultProps\", {\n  autoHeight: false,\n  estimatedRowSize: 30,\n  onScroll: function onScroll() {},\n  noRowsRenderer: function noRowsRenderer() {\n    return null;\n  },\n  onRowsRendered: function onRowsRendered() {},\n  overscanIndicesGetter: accessibilityOverscanIndicesGetter,\n  overscanRowCount: 10,\n  scrollToAlignment: 'auto',\n  scrollToIndex: -1,\n  style: {}\n});\n\nexport { List as default };\nimport { bpfrpt_proptype_NoContentRenderer } from \"../Grid\";\nimport { bpfrpt_proptype_Alignment } from \"../Grid\";\nimport { bpfrpt_proptype_CellSize } from \"../Grid\";\nimport { bpfrpt_proptype_CellPosition } from \"../Grid\";\nimport { bpfrpt_proptype_OverscanIndicesGetter } from \"../Grid\";\nimport { bpfrpt_proptype_RenderedSection } from \"../Grid\";\nimport { bpfrpt_proptype_CellRendererParams } from \"../Grid\";\nimport { bpfrpt_proptype_Scroll as bpfrpt_proptype_GridScroll } from \"../Grid\";\nimport { bpfrpt_proptype_RowRenderer } from \"./types\";\nimport { bpfrpt_proptype_RenderedRows } from \"./types\";\nimport { bpfrpt_proptype_Scroll } from \"./types\";\nimport PropTypes from \"prop-types\";","export var SCROLL_DIRECTION_BACKWARD = -1;\nexport var SCROLL_DIRECTION_FORWARD = 1;\nexport var SCROLL_DIRECTION_HORIZONTAL = 'horizontal';\nexport var SCROLL_DIRECTION_VERTICAL = 'vertical';\n/**\n * Calculates the number of cells to overscan before and after a specified range.\n * This function ensures that overscanning doesn't exceed the available cells.\n */\n\nexport default function defaultOverscanIndicesGetter(_ref) {\n  var cellCount = _ref.cellCount,\n      overscanCellsCount = _ref.overscanCellsCount,\n      scrollDirection = _ref.scrollDirection,\n      startIndex = _ref.startIndex,\n      stopIndex = _ref.stopIndex;\n\n  if (scrollDirection === SCROLL_DIRECTION_FORWARD) {\n    return {\n      overscanStartIndex: Math.max(0, startIndex),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)\n    };\n  } else {\n    return {\n      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex)\n    };\n  }\n}\nimport { bpfrpt_proptype_OverscanIndicesGetterParams } from \"./types\";\nimport { bpfrpt_proptype_OverscanIndices } from \"./types\";","/**\n * Default implementation of cellRangeRenderer used by Grid.\n * This renderer supports cell-caching while the user is scrolling.\n */\nexport default function defaultCellRangeRenderer(_ref) {\n  var cellCache = _ref.cellCache,\n      cellRenderer = _ref.cellRenderer,\n      columnSizeAndPositionManager = _ref.columnSizeAndPositionManager,\n      columnStartIndex = _ref.columnStartIndex,\n      columnStopIndex = _ref.columnStopIndex,\n      deferredMeasurementCache = _ref.deferredMeasurementCache,\n      horizontalOffsetAdjustment = _ref.horizontalOffsetAdjustment,\n      isScrolling = _ref.isScrolling,\n      isScrollingOptOut = _ref.isScrollingOptOut,\n      parent = _ref.parent,\n      rowSizeAndPositionManager = _ref.rowSizeAndPositionManager,\n      rowStartIndex = _ref.rowStartIndex,\n      rowStopIndex = _ref.rowStopIndex,\n      styleCache = _ref.styleCache,\n      verticalOffsetAdjustment = _ref.verticalOffsetAdjustment,\n      visibleColumnIndices = _ref.visibleColumnIndices,\n      visibleRowIndices = _ref.visibleRowIndices;\n  var renderedCells = []; // Browsers have native size limits for elements (eg Chrome 33M pixels, IE 1.5M pixes).\n  // User cannot scroll beyond these size limitations.\n  // In order to work around this, ScalingCellSizeAndPositionManager compresses offsets.\n  // We should never cache styles for compressed offsets though as this can lead to bugs.\n  // See issue #576 for more.\n\n  var areOffsetsAdjusted = columnSizeAndPositionManager.areOffsetsAdjusted() || rowSizeAndPositionManager.areOffsetsAdjusted();\n  var canCacheStyle = !isScrolling && !areOffsetsAdjusted;\n\n  for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n    var rowDatum = rowSizeAndPositionManager.getSizeAndPositionOfCell(rowIndex);\n\n    for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n      var columnDatum = columnSizeAndPositionManager.getSizeAndPositionOfCell(columnIndex);\n      var isVisible = columnIndex >= visibleColumnIndices.start && columnIndex <= visibleColumnIndices.stop && rowIndex >= visibleRowIndices.start && rowIndex <= visibleRowIndices.stop;\n      var key = \"\".concat(rowIndex, \"-\").concat(columnIndex);\n      var style = void 0; // Cache style objects so shallow-compare doesn't re-render unnecessarily.\n\n      if (canCacheStyle && styleCache[key]) {\n        style = styleCache[key];\n      } else {\n        // In deferred mode, cells will be initially rendered before we know their size.\n        // Don't interfere with CellMeasurer's measurements by setting an invalid size.\n        if (deferredMeasurementCache && !deferredMeasurementCache.has(rowIndex, columnIndex)) {\n          // Position not-yet-measured cells at top/left 0,0,\n          // And give them width/height of 'auto' so they can grow larger than the parent Grid if necessary.\n          // Positioning them further to the right/bottom influences their measured size.\n          style = {\n            height: 'auto',\n            left: 0,\n            position: 'absolute',\n            top: 0,\n            width: 'auto'\n          };\n        } else {\n          style = {\n            height: rowDatum.size,\n            left: columnDatum.offset + horizontalOffsetAdjustment,\n            position: 'absolute',\n            top: rowDatum.offset + verticalOffsetAdjustment,\n            width: columnDatum.size\n          };\n          styleCache[key] = style;\n        }\n      }\n\n      var cellRendererParams = {\n        columnIndex: columnIndex,\n        isScrolling: isScrolling,\n        isVisible: isVisible,\n        key: key,\n        parent: parent,\n        rowIndex: rowIndex,\n        style: style\n      };\n      var renderedCell = void 0; // Avoid re-creating cells while scrolling.\n      // This can lead to the same cell being created many times and can cause performance issues for \"heavy\" cells.\n      // If a scroll is in progress- cache and reuse cells.\n      // This cache will be thrown away once scrolling completes.\n      // However if we are scaling scroll positions and sizes, we should also avoid caching.\n      // This is because the offset changes slightly as scroll position changes and caching leads to stale values.\n      // For more info refer to issue #395\n      //\n      // If isScrollingOptOut is specified, we always cache cells.\n      // For more info refer to issue #1028\n\n      if ((isScrollingOptOut || isScrolling) && !horizontalOffsetAdjustment && !verticalOffsetAdjustment) {\n        if (!cellCache[key]) {\n          cellCache[key] = cellRenderer(cellRendererParams);\n        }\n\n        renderedCell = cellCache[key]; // If the user is no longer scrolling, don't cache cells.\n        // This makes dynamic cell content difficult for users and would also lead to a heavier memory footprint.\n      } else {\n        renderedCell = cellRenderer(cellRendererParams);\n      }\n\n      if (renderedCell == null || renderedCell === false) {\n        continue;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        warnAboutMissingStyle(parent, renderedCell);\n      }\n\n      renderedCells.push(renderedCell);\n    }\n  }\n\n  return renderedCells;\n}\n\nfunction warnAboutMissingStyle(parent, renderedCell) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (renderedCell) {\n      // If the direct child is a CellMeasurer, then we should check its child\n      // See issue #611\n      if (renderedCell.type && renderedCell.type.__internalCellMeasurerFlag) {\n        renderedCell = renderedCell.props.children;\n      }\n\n      if (renderedCell && renderedCell.props && renderedCell.props.style === undefined && parent.__warnedAboutMissingStyle !== true) {\n        parent.__warnedAboutMissingStyle = true;\n        console.warn('Rendered cell should include style property for positioning.');\n      }\n    }\n  }\n}\n\nimport { bpfrpt_proptype_CellRangeRendererParams } from \"./types\";","import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _class, _temp;\n\nimport * as React from 'react';\nimport { findDOMNode } from 'react-dom';\n\n/**\n * Wraps a cell and measures its rendered content.\n * Measurements are stored in a per-cell cache.\n * Cached-content is not be re-measured.\n */\nvar CellMeasurer = (_temp = _class =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(CellMeasurer, _React$PureComponent);\n\n  function CellMeasurer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CellMeasurer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CellMeasurer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"_child\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_measure\", function () {\n      var _this$props = _this.props,\n          cache = _this$props.cache,\n          _this$props$columnInd = _this$props.columnIndex,\n          columnIndex = _this$props$columnInd === void 0 ? 0 : _this$props$columnInd,\n          parent = _this$props.parent,\n          _this$props$rowIndex = _this$props.rowIndex,\n          rowIndex = _this$props$rowIndex === void 0 ? _this.props.index || 0 : _this$props$rowIndex;\n\n      var _this$_getCellMeasure = _this._getCellMeasurements(),\n          height = _this$_getCellMeasure.height,\n          width = _this$_getCellMeasure.width;\n\n      if (height !== cache.getHeight(rowIndex, columnIndex) || width !== cache.getWidth(rowIndex, columnIndex)) {\n        cache.set(rowIndex, columnIndex, width, height);\n\n        if (parent && typeof parent.recomputeGridSize === 'function') {\n          parent.recomputeGridSize({\n            columnIndex: columnIndex,\n            rowIndex: rowIndex\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_registerChild\", function (element) {\n      if (element && !(element instanceof Element)) {\n        console.warn('CellMeasurer registerChild expects to be passed Element or null');\n      }\n\n      _this._child = element;\n\n      if (element) {\n        _this._maybeMeasureCell();\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(CellMeasurer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._maybeMeasureCell();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this._maybeMeasureCell();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      return typeof children === 'function' ? children({\n        measure: this._measure,\n        registerChild: this._registerChild\n      }) : children;\n    }\n  }, {\n    key: \"_getCellMeasurements\",\n    value: function _getCellMeasurements() {\n      var cache = this.props.cache;\n      var node = this._child || findDOMNode(this); // TODO Check for a bad combination of fixedWidth and missing numeric width or vice versa with height\n\n      if (node && node.ownerDocument && node.ownerDocument.defaultView && node instanceof node.ownerDocument.defaultView.HTMLElement) {\n        var styleWidth = node.style.width;\n        var styleHeight = node.style.height; // If we are re-measuring a cell that has already been measured,\n        // It will have a hard-coded width/height from the previous measurement.\n        // The fact that we are measuring indicates this measurement is probably stale,\n        // So explicitly clear it out (eg set to \"auto\") so we can recalculate.\n        // See issue #593 for more info.\n        // Even if we are measuring initially- if we're inside of a MultiGrid component,\n        // Explicitly clear width/height before measuring to avoid being tainted by another Grid.\n        // eg top/left Grid renders before bottom/right Grid\n        // Since the CellMeasurerCache is shared between them this taints derived cell size values.\n\n        if (!cache.hasFixedWidth()) {\n          node.style.width = 'auto';\n        }\n\n        if (!cache.hasFixedHeight()) {\n          node.style.height = 'auto';\n        }\n\n        var height = Math.ceil(node.offsetHeight);\n        var width = Math.ceil(node.offsetWidth); // Reset after measuring to avoid breaking styles; see #660\n\n        if (styleWidth) {\n          node.style.width = styleWidth;\n        }\n\n        if (styleHeight) {\n          node.style.height = styleHeight;\n        }\n\n        return {\n          height: height,\n          width: width\n        };\n      } else {\n        return {\n          height: 0,\n          width: 0\n        };\n      }\n    }\n  }, {\n    key: \"_maybeMeasureCell\",\n    value: function _maybeMeasureCell() {\n      var _this$props2 = this.props,\n          cache = _this$props2.cache,\n          _this$props2$columnIn = _this$props2.columnIndex,\n          columnIndex = _this$props2$columnIn === void 0 ? 0 : _this$props2$columnIn,\n          parent = _this$props2.parent,\n          _this$props2$rowIndex = _this$props2.rowIndex,\n          rowIndex = _this$props2$rowIndex === void 0 ? this.props.index || 0 : _this$props2$rowIndex;\n\n      if (!cache.has(rowIndex, columnIndex)) {\n        var _this$_getCellMeasure2 = this._getCellMeasurements(),\n            height = _this$_getCellMeasure2.height,\n            width = _this$_getCellMeasure2.width;\n\n        cache.set(rowIndex, columnIndex, width, height); // If size has changed, let Grid know to re-render.\n\n        if (parent && typeof parent.invalidateCellSizeAfterRender === 'function') {\n          parent.invalidateCellSizeAfterRender({\n            columnIndex: columnIndex,\n            rowIndex: rowIndex\n          });\n        }\n      }\n    }\n  }]);\n\n  return CellMeasurer;\n}(React.PureComponent), _defineProperty(_class, \"propTypes\", process.env.NODE_ENV === 'production' ? null : {\n  \"cache\": function cache() {\n    return (typeof bpfrpt_proptype_CellMeasureCache === \"function\" ? bpfrpt_proptype_CellMeasureCache.isRequired ? bpfrpt_proptype_CellMeasureCache.isRequired : bpfrpt_proptype_CellMeasureCache : PropTypes.shape(bpfrpt_proptype_CellMeasureCache).isRequired).apply(this, arguments);\n  },\n  \"children\": PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n  \"columnIndex\": PropTypes.number,\n  \"index\": PropTypes.number,\n  \"parent\": PropTypes.shape({\n    invalidateCellSizeAfterRender: PropTypes.func,\n    recomputeGridSize: PropTypes.func\n  }).isRequired,\n  \"rowIndex\": PropTypes.number\n}), _temp); // Used for DEV mode warning check\n\n_defineProperty(CellMeasurer, \"__internalCellMeasurerFlag\", false);\n\nexport { CellMeasurer as default };\n\nif (process.env.NODE_ENV !== 'production') {\n  CellMeasurer.__internalCellMeasurerFlag = true;\n}\n\nimport { bpfrpt_proptype_CellMeasureCache } from \"./types\";\nimport PropTypes from \"prop-types\";","export var SCROLL_DIRECTION_BACKWARD = -1;\nexport var SCROLL_DIRECTION_FORWARD = 1;\nexport var SCROLL_DIRECTION_HORIZONTAL = 'horizontal';\nexport var SCROLL_DIRECTION_VERTICAL = 'vertical';\n/**\n * Calculates the number of cells to overscan before and after a specified range.\n * This function ensures that overscanning doesn't exceed the available cells.\n */\n\nexport default function defaultOverscanIndicesGetter(_ref) {\n  var cellCount = _ref.cellCount,\n      overscanCellsCount = _ref.overscanCellsCount,\n      scrollDirection = _ref.scrollDirection,\n      startIndex = _ref.startIndex,\n      stopIndex = _ref.stopIndex;\n  // Make sure we render at least 1 cell extra before and after (except near boundaries)\n  // This is necessary in order to support keyboard navigation (TAB/SHIFT+TAB) in some cases\n  // For more info see issues #625\n  overscanCellsCount = Math.max(1, overscanCellsCount);\n\n  if (scrollDirection === SCROLL_DIRECTION_FORWARD) {\n    return {\n      overscanStartIndex: Math.max(0, startIndex - 1),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)\n    };\n  } else {\n    return {\n      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex + 1)\n    };\n  }\n}\nimport { bpfrpt_proptype_OverscanIndicesGetterParams } from \"./types\";\nimport { bpfrpt_proptype_OverscanIndices } from \"./types\";","import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nexport var DEFAULT_HEIGHT = 30;\nexport var DEFAULT_WIDTH = 100; // Enables more intelligent mapping of a given column and row index to an item ID.\n// This prevents a cell cache from being invalidated when its parent collection is modified.\n\n/**\n * Caches measurements for a given cell.\n */\nvar CellMeasurerCache =\n/*#__PURE__*/\nfunction () {\n  function CellMeasurerCache() {\n    var _this = this;\n\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, CellMeasurerCache);\n\n    _defineProperty(this, \"_cellHeightCache\", {});\n\n    _defineProperty(this, \"_cellWidthCache\", {});\n\n    _defineProperty(this, \"_columnWidthCache\", {});\n\n    _defineProperty(this, \"_rowHeightCache\", {});\n\n    _defineProperty(this, \"_defaultHeight\", void 0);\n\n    _defineProperty(this, \"_defaultWidth\", void 0);\n\n    _defineProperty(this, \"_minHeight\", void 0);\n\n    _defineProperty(this, \"_minWidth\", void 0);\n\n    _defineProperty(this, \"_keyMapper\", void 0);\n\n    _defineProperty(this, \"_hasFixedHeight\", void 0);\n\n    _defineProperty(this, \"_hasFixedWidth\", void 0);\n\n    _defineProperty(this, \"_columnCount\", 0);\n\n    _defineProperty(this, \"_rowCount\", 0);\n\n    _defineProperty(this, \"columnWidth\", function (_ref) {\n      var index = _ref.index;\n\n      var key = _this._keyMapper(0, index);\n\n      return _this._columnWidthCache[key] !== undefined ? _this._columnWidthCache[key] : _this._defaultWidth;\n    });\n\n    _defineProperty(this, \"rowHeight\", function (_ref2) {\n      var index = _ref2.index;\n\n      var key = _this._keyMapper(index, 0);\n\n      return _this._rowHeightCache[key] !== undefined ? _this._rowHeightCache[key] : _this._defaultHeight;\n    });\n\n    var defaultHeight = params.defaultHeight,\n        defaultWidth = params.defaultWidth,\n        fixedHeight = params.fixedHeight,\n        fixedWidth = params.fixedWidth,\n        keyMapper = params.keyMapper,\n        minHeight = params.minHeight,\n        minWidth = params.minWidth;\n    this._hasFixedHeight = fixedHeight === true;\n    this._hasFixedWidth = fixedWidth === true;\n    this._minHeight = minHeight || 0;\n    this._minWidth = minWidth || 0;\n    this._keyMapper = keyMapper || defaultKeyMapper;\n    this._defaultHeight = Math.max(this._minHeight, typeof defaultHeight === 'number' ? defaultHeight : DEFAULT_HEIGHT);\n    this._defaultWidth = Math.max(this._minWidth, typeof defaultWidth === 'number' ? defaultWidth : DEFAULT_WIDTH);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (this._hasFixedHeight === false && this._hasFixedWidth === false) {\n        console.warn(\"CellMeasurerCache should only measure a cell's width or height. \" + 'You have configured CellMeasurerCache to measure both. ' + 'This will result in poor performance.');\n      }\n\n      if (this._hasFixedHeight === false && this._defaultHeight === 0) {\n        console.warn('Fixed height CellMeasurerCache should specify a :defaultHeight greater than 0. ' + 'Failing to do so will lead to unnecessary layout and poor performance.');\n      }\n\n      if (this._hasFixedWidth === false && this._defaultWidth === 0) {\n        console.warn('Fixed width CellMeasurerCache should specify a :defaultWidth greater than 0. ' + 'Failing to do so will lead to unnecessary layout and poor performance.');\n      }\n    }\n  }\n\n  _createClass(CellMeasurerCache, [{\n    key: \"clear\",\n    value: function clear(rowIndex) {\n      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var key = this._keyMapper(rowIndex, columnIndex);\n\n      delete this._cellHeightCache[key];\n      delete this._cellWidthCache[key];\n\n      this._updateCachedColumnAndRowSizes(rowIndex, columnIndex);\n    }\n  }, {\n    key: \"clearAll\",\n    value: function clearAll() {\n      this._cellHeightCache = {};\n      this._cellWidthCache = {};\n      this._columnWidthCache = {};\n      this._rowHeightCache = {};\n      this._rowCount = 0;\n      this._columnCount = 0;\n    }\n  }, {\n    key: \"hasFixedHeight\",\n    value: function hasFixedHeight() {\n      return this._hasFixedHeight;\n    }\n  }, {\n    key: \"hasFixedWidth\",\n    value: function hasFixedWidth() {\n      return this._hasFixedWidth;\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight(rowIndex) {\n      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (this._hasFixedHeight) {\n        return this._defaultHeight;\n      } else {\n        var _key = this._keyMapper(rowIndex, columnIndex);\n\n        return this._cellHeightCache[_key] !== undefined ? Math.max(this._minHeight, this._cellHeightCache[_key]) : this._defaultHeight;\n      }\n    }\n  }, {\n    key: \"getWidth\",\n    value: function getWidth(rowIndex) {\n      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (this._hasFixedWidth) {\n        return this._defaultWidth;\n      } else {\n        var _key2 = this._keyMapper(rowIndex, columnIndex);\n\n        return this._cellWidthCache[_key2] !== undefined ? Math.max(this._minWidth, this._cellWidthCache[_key2]) : this._defaultWidth;\n      }\n    }\n  }, {\n    key: \"has\",\n    value: function has(rowIndex) {\n      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var key = this._keyMapper(rowIndex, columnIndex);\n\n      return this._cellHeightCache[key] !== undefined;\n    }\n  }, {\n    key: \"set\",\n    value: function set(rowIndex, columnIndex, width, height) {\n      var key = this._keyMapper(rowIndex, columnIndex);\n\n      if (columnIndex >= this._columnCount) {\n        this._columnCount = columnIndex + 1;\n      }\n\n      if (rowIndex >= this._rowCount) {\n        this._rowCount = rowIndex + 1;\n      } // Size is cached per cell so we don't have to re-measure if cells are re-ordered.\n\n\n      this._cellHeightCache[key] = height;\n      this._cellWidthCache[key] = width;\n\n      this._updateCachedColumnAndRowSizes(rowIndex, columnIndex);\n    }\n  }, {\n    key: \"_updateCachedColumnAndRowSizes\",\n    value: function _updateCachedColumnAndRowSizes(rowIndex, columnIndex) {\n      // :columnWidth and :rowHeight are derived based on all cells in a column/row.\n      // Pre-cache these derived values for faster lookup later.\n      // Reads are expected to occur more frequently than writes in this case.\n      // Only update non-fixed dimensions though to avoid doing unnecessary work.\n      if (!this._hasFixedWidth) {\n        var columnWidth = 0;\n\n        for (var i = 0; i < this._rowCount; i++) {\n          columnWidth = Math.max(columnWidth, this.getWidth(i, columnIndex));\n        }\n\n        var columnKey = this._keyMapper(0, columnIndex);\n\n        this._columnWidthCache[columnKey] = columnWidth;\n      }\n\n      if (!this._hasFixedHeight) {\n        var rowHeight = 0;\n\n        for (var _i = 0; _i < this._columnCount; _i++) {\n          rowHeight = Math.max(rowHeight, this.getHeight(rowIndex, _i));\n        }\n\n        var rowKey = this._keyMapper(rowIndex, 0);\n\n        this._rowHeightCache[rowKey] = rowHeight;\n      }\n    }\n  }, {\n    key: \"defaultHeight\",\n    get: function get() {\n      return this._defaultHeight;\n    }\n  }, {\n    key: \"defaultWidth\",\n    get: function get() {\n      return this._defaultWidth;\n    }\n  }]);\n\n  return CellMeasurerCache;\n}();\n\nexport { CellMeasurerCache as default };\n\nfunction defaultKeyMapper(rowIndex, columnIndex) {\n  return \"\".concat(rowIndex, \"-\").concat(columnIndex);\n}\n\nimport { bpfrpt_proptype_CellMeasureCache } from \"./types\";","import React, { Ref, memo, useImperativeHandle, useMemo, useRef } from \"react\";\nimport { ListHandle, TestComponent } from \"./common\";\nimport List from \"react-virtualized/dist/es/List\";\nimport AutoSizer from \"react-virtualized/dist/es/AutoSizer\";\nimport {\n  CellMeasurer,\n  CellMeasurerCache,\n} from \"react-virtualized/dist/es/CellMeasurer\";\n\nexport const ReactVirtualizedList = memo(\n  ({\n    count,\n    Component,\n    handle,\n  }: {\n    count: number;\n    Component: TestComponent;\n    handle?: Ref<ListHandle>;\n  }) => {\n    const ref = useRef<List>(null);\n    const virtualizedCache = useMemo(\n      () =>\n        new CellMeasurerCache({\n          fixedWidth: true,\n          defaultHeight: 50,\n        }),\n      []\n    );\n    useImperativeHandle(handle, () => ({\n      scrollToIndex: (i) => {\n        ref.current?.scrollToRow(i);\n      },\n    }));\n\n    return (\n      <AutoSizer>\n        {({ width, height }) => (\n          <List\n            ref={ref}\n            deferredMeasurementCache={virtualizedCache}\n            width={width}\n            height={height}\n            rowCount={count}\n            rowHeight={virtualizedCache.rowHeight}\n            rowRenderer={({ index: i, key, style, parent }) => (\n              <CellMeasurer\n                key={key}\n                cache={virtualizedCache}\n                columnIndex={0}\n                rowIndex={i}\n                parent={parent}\n              >\n                {({ registerChild }) => (\n                  <div ref={registerChild} style={style}>\n                    <Component index={i} />\n                  </div>\n                )}\n              </CellMeasurer>\n            )}\n          />\n        )}\n      </AutoSizer>\n    );\n  }\n);\n"],"names":["calculateSizeAndPositionDataAndUpdateScrollOffset","_ref","cellCount","cellSize","computeMetadataCallback","computeMetadataCallbackProps","nextCellsCount","nextCellSize","nextScrollToIndex","scrollToIndex","updateScrollOffsetForScrollToIndex","CellSizeAndPositionManager","cellSizeGetter","estimatedCellSize","_classCallCheck","this","_defineProperty","_cellSizeGetter","_cellCount","_estimatedCellSize","_createClass","key","value","_ref2","_lastMeasuredIndex","index","Error","concat","lastMeasuredCellSizeAndPosition","getSizeAndPositionOfLastMeasuredCell","offset","size","i","undefined","isNaN","_cellSizeAndPositionData","_lastBatchedIndex","_ref3","_ref3$align","align","containerSize","currentOffset","targetIndex","idealOffset","datum","getSizeAndPositionOfCell","maxOffset","minOffset","Math","max","min","totalSize","getTotalSize","params","start","_findNearestCell","stop","high","low","middle","floor","interval","_binarySearch","lastMeasuredIndex","_exponentialSearch","getMaxElementSize","window","chrome","ScalingCellSizeAndPositionManager","_ref$maxScrollSize","maxScrollSize","_objectWithoutProperties","_cellSizeAndPositionManager","_maxScrollSize","configure","getCellCount","getEstimatedCellSize","getLastMeasuredIndex","safeTotalSize","offsetPercentage","_getOffsetPercentage","round","_safeOffsetToOffset","getUpdatedOffsetForIndex","_offsetToSafeOffset","_ref4","getVisibleCellRange","resetCell","_ref5","_ref6","_ref7","createCallbackMemoizer","requireAllKeys","arguments","length","cachedIndices","callback","indices","keys","Object","allInitialized","every","Array","isArray","indexChanged","some","cachedValue","join","updateScrollIndexHelper","cellSizeAndPositionManager","previousCellsCount","previousCellSize","previousScrollToAlignment","previousScrollToIndex","previousSize","scrollOffset","scrollToAlignment","sizeJustIncreasedFromZero","updateScrollIndexCallback","hasScrollToIndex","canUseDOM","document","createElement","win","componentWillMount","state","constructor","getDerivedStateFromProps","props","setState","componentWillReceiveProps","nextProps","prevState","bind","componentWillUpdate","nextState","prevProps","__reactInternalSnapshotFlag","__reactInternalSnapshot","getSnapshotBeforeUpdate","__suppressDeprecationWarning","_class","_temp","request","self","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","cancel","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","oCancelAnimationFrame","msCancelAnimationFrame","id","clearTimeout","raf","caf","cancelAnimationTimeout","frame","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","source","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","SCROLL_POSITION_CHANGE_REASONS","Grid","_React$PureComponent","_this","_possibleConstructorReturn","_getPrototypeOf","call","_assertThisInitialized","_disablePointerEventsTimeoutId","isScrolling","needToResetStyleCache","onSectionRendered","_onGridRenderedMemoizer","columnOverscanStartIndex","_columnStartIndex","columnOverscanStopIndex","_columnStopIndex","columnStartIndex","_renderedColumnStartIndex","columnStopIndex","_renderedColumnStopIndex","rowOverscanStartIndex","_rowStartIndex","rowOverscanStopIndex","_rowStopIndex","rowStartIndex","_renderedRowStartIndex","rowStopIndex","_renderedRowStopIndex","ref","_scrollingContainer","event","handleScrollEvent","columnSizeAndPositionManager","columnCount","_wrapSizeGetter","columnWidth","_getEstimatedColumnSize","rowSizeAndPositionManager","rowCount","rowHeight","_getEstimatedRowSize","instanceProps","prevColumnWidth","prevRowHeight","prevColumnCount","prevRowCount","prevIsScrolling","prevScrollToColumn","scrollToColumn","prevScrollToRow","scrollToRow","scrollbarSize","scrollbarSizeMeasured","scrollDirectionHorizontal","scrollDirectionVertical","scrollLeft","scrollTop","scrollPositionChangeReason","_initialScrollTop","_getCalculatedScrollTop","_initialScrollLeft","_getCalculatedScrollLeft","_inherits","_ref$alignment","alignment","_ref$columnIndex","columnIndex","_ref$rowIndex","rowIndex","offsetProps","_ref2$scrollLeft","scrollLeftParam","_ref2$scrollTop","scrollTopParam","_debounceScrollEnded","_this$props","autoHeight","autoWidth","height","width","totalRowsHeight","totalColumnsWidth","newState","_invokeOnScrollMemoizer","_deferredInvalidateColumnIndex","_deferredInvalidateRowIndex","_this$props2","_ref4$columnIndex","_ref4$rowIndex","_this$props3","_recomputeScrollLeftFlag","_recomputeScrollTopFlag","_styleCache","_cellCache","forceUpdate","_updateScrollLeftForScrollToColumn","_updateScrollTopForScrollToRow","_this$props4","getScrollbarSize","_handleInvalidatedGridSize","stateUpdate","_getScrollToPositionStateUpdate","sizeIsBiggerThanZero","_invokeOnGridRenderedHelper","_maybeCallOnScrollbarPresenceChange","_this2","_this$props5","_this$state","columnOrRowCountJustIncreasedFromZero","_this$props6","autoContainerWidth","className","containerProps","containerRole","containerStyle","noContentRenderer","role","style","tabIndex","_this$state2","_isScrolling","gridStyle","boxSizing","direction","position","WebkitOverflowScrolling","willChange","_resetStyleCache","_calculateChildrenToRender","verticalScrollBarSize","horizontalScrollBarSize","_horizontalScrollBarSize","_verticalScrollBarSize","_scrollbarPresenceChanged","overflowX","overflowY","childrenToDisplay","_childrenToDisplay","showNoContentRenderer","React.createElement","_extends","_setScrollingContainerRef","clsx","onScroll","_onScroll","maxWidth","maxHeight","overflow","pointerEvents","cellRenderer","cellRangeRenderer","deferredMeasurementCache","overscanColumnCount","overscanIndicesGetter","overscanRowCount","isScrollingOptOut","visibleColumnIndices","visibleRowIndices","horizontalOffsetAdjustment","getOffsetAdjustment","verticalOffsetAdjustment","overscanColumnIndices","overscanCellsCount","scrollDirection","startIndex","stopIndex","overscanRowIndices","overscanStartIndex","overscanStopIndex","hasFixedHeight","has","hasFixedWidth","cellCache","parent","styleCache","scrollingResetTimeInterval","delay","Promise","resolve","then","Date","now","timeout","requestAnimationTimeout","_debounceScrollEndedCallback","recomputeGridSize","_this3","_onScrollMemoizer","_this3$props","clientHeight","clientWidth","scrollHeight","scrollWidth","hasOwnProperty","Boolean","onScrollbarPresenceChange","horizontal","vertical","_ref8","_getScrollLeftForScrollToColumnStateUpdate","_getScrollTopForScrollToRowStateUpdate","assign","maybeStateA","maybeStateB","estimatedColumnSize","estimatedRowSize","_ref9","finalColumn","scrollBarSize","calculatedScrollLeft","finalRow","calculatedScrollTop","React.PureComponent","PureComponent","renderedCells","areOffsetsAdjusted","canCacheStyle","rowDatum","columnDatum","isVisible","left","top","cellRendererParams","renderedCell","recalc","scrollDiv","body","appendChild","offsetWidth","removeChild","Component","prototype","isReactComponent","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","UNSAFE_componentWillMount","UNSAFE_componentWillReceiveProps","UNSAFE_componentWillUpdate","componentName","displayName","name","newApiName","componentDidUpdate","maybeSnapshot","snapshot","polyfill","List","_getPrototypeOf2","_len","args","_key","rowRenderer","widthDescriptor","writable","onRowsRendered","getOffsetForCell","invalidateCellSizeAfterRender","measureAllCells","_ref6$columnIndex","_ref6$rowIndex","scrollToPosition","scrollToCell","noRowsRenderer","classNames","_cellRenderer","_onSectionRendered","_setRef","CellMeasurer","cache","_this$props$columnInd","_this$props$rowIndex","_this$_getCellMeasure","_getCellMeasurements","getHeight","getWidth","set","element","Element","console","warn","_child","_maybeMeasureCell","children","measure","_measure","registerChild","_registerChild","node","findDOMNode","ownerDocument","defaultView","HTMLElement","styleWidth","styleHeight","ceil","offsetHeight","_this$props2$columnIn","_this$props2$rowIndex","_this$_getCellMeasure2","CellMeasurerCache","_keyMapper","_columnWidthCache","_defaultWidth","_rowHeightCache","_defaultHeight","defaultHeight","defaultWidth","fixedHeight","fixedWidth","keyMapper","minHeight","minWidth","_hasFixedHeight","_hasFixedWidth","_minHeight","_minWidth","defaultKeyMapper","_cellHeightCache","_cellWidthCache","_updateCachedColumnAndRowSizes","_rowCount","_columnCount","_key2","columnKey","_i","rowKey","get","ReactVirtualizedList","memo","count","handle","useRef","virtualizedCache","useMemo","useImperativeHandle","_ref$current","current","jsx","AutoSizer"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]}